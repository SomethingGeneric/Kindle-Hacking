diff --git a/qmake/Makefile.unix b/qmake/Makefile.unix
index ce83960884..10c72bf28f 100644
--- a/qmake/Makefile.unix
+++ b/qmake/Makefile.unix
@@ -12,7 +12,8 @@ OBJS=project.o option.o property.o main.o ioutils.o proitems.o \
      gbuild.o cesdkhandler.o
 
 #qt code
-QOBJS=qtextcodec.o qutfcodec.o qstring.o qstringbuilder.o qtextstream.o qiodevice.o qmalloc.o qglobal.o \
+QOBJS=qtextcodec.o qutfcodec.o qstring.o qstring_compat.o qstringbuilder.o qtextstream.o qiodevice.o \
+      qdebug.o qmalloc.o qglobal.o \
       qarraydata.o qbytearray.o qbytearraymatcher.o qdatastream.o qbuffer.o qlist.o qfiledevice.o qfile.o \
       qfilesystementry.o qfilesystemengine.o qfsfileengine.o qfsfileengine_iterator.o qregexp.o qvector.o \
       qbitarray.o qdir.o qdiriterator.o quuid.o qhash.o qfileinfo.o qdatetime.o qstringlist.o \
@@ -40,8 +41,10 @@ DEPEND_SRC = \
 	   $(QMKGENSRC)/win32/msvc_objectmodel.cpp $(QMKGENSRC)/win32/msbuild_objectmodel.cpp \
 	   $(SOURCE_PATH)/src/corelib/codecs/qtextcodec.cpp $(SOURCE_PATH)/src/corelib/codecs/qutfcodec.cpp \
 	   $(SOURCE_PATH)/src/corelib/tools/qstring.cpp $(SOURCE_PATH)/src/corelib/io/qfile.cpp \
+	   $(SOURCE_PATH)/src/corelib/tools/qstring_compat.cpp \
 	   $(SOURCE_PATH)/src/corelib/io/qfiledevice.cpp \
 	   $(SOURCE_PATH)/src/corelib/io/qtextstream.cpp $(SOURCE_PATH)/src/corelib/io/qiodevice.cpp \
+	   $(SOURCE_PATH)/src/corelib/io/qdebug.cpp \
 	   $(SOURCE_PATH)/src/corelib/global/qmalloc.cpp \
 	   $(SOURCE_PATH)/src/corelib/global/qglobal.cpp $(SOURCE_PATH)/src/corelib/tools/qregexp.cpp \
 	   $(SOURCE_PATH)/src/corelib/tools/qarraydata.cpp $(SOURCE_PATH)/src/corelib/tools/qbytearray.cpp\
@@ -100,7 +103,7 @@ CPPFLAGS = -g $(EXTRA_CPPFLAGS) \
 	   -DQT_BUILD_QMAKE -DQT_BOOTSTRAPPED -DPROEVALUATOR_FULL \
 	   -DQT_NO_TEXTCODEC -DQT_NO_UNICODETABLES -DQT_NO_COMPONENT -DQT_NO_COMPRESS \
 	   -DQT_NO_THREAD -DQT_NO_QOBJECT -DQT_NO_GEOM_VARIANT -DQT_NO_DATASTREAM \
-	   -DQT_CRYPTOGRAPHICHASH_ONLY_SHA1 -DQT_JSON_READONLY
+	   -DQT_CRYPTOGRAPHICHASH_ONLY_SHA1 -DQT_JSON_READONLY -DQT_NO_STANDARDPATHS
 
 CXXFLAGS = $(EXTRA_CXXFLAGS) $(CPPFLAGS)
 
@@ -239,6 +242,9 @@ qsettings_win.o: $(SOURCE_PATH)/src/corelib/io/qsettings_win.cpp
 qiodevice.o: $(SOURCE_PATH)/src/corelib/io/qiodevice.cpp
 	$(CXX) -c -o $@ $(CXXFLAGS) $(SOURCE_PATH)/src/corelib/io/qiodevice.cpp
 
+qdebug.o: $(SOURCE_PATH)/src/corelib/io/qdebug.cpp
+	$(CXX) -c -o $@ $(CXXFLAGS) $(SOURCE_PATH)/src/corelib/io/qdebug.cpp
+
 qmalloc.o: $(SOURCE_PATH)/src/corelib/global/qmalloc.cpp
 	$(CXX) -c -o $@ $(CXXFLAGS) $(SOURCE_PATH)/src/corelib/global/qmalloc.cpp
 
@@ -272,6 +278,9 @@ qtextcodec.o: $(SOURCE_PATH)/src/corelib/codecs/qtextcodec.cpp
 qstring.o: $(SOURCE_PATH)/src/corelib/tools/qstring.cpp
 	$(CXX) -c -o $@ $(CXXFLAGS) $(SOURCE_PATH)/src/corelib/tools/qstring.cpp
 
+qstring_compat.o: $(SOURCE_PATH)/src/corelib/tools/qstring_compat.cpp
+	$(CXX) -c -o $@ $(CXXFLAGS) $(SOURCE_PATH)/src/corelib/tools/qstring_compat.cpp
+
 qstringbuilder.o: $(SOURCE_PATH)/src/corelib/tools/qstringbuilder.cpp
 	$(CXX) -c -o $@ $(CXXFLAGS) $(SOURCE_PATH)/src/corelib/tools/qstringbuilder.cpp
 
diff --git a/qmake/Makefile.win32 b/qmake/Makefile.win32
index af1da918c6..4a1347c954 100644
--- a/qmake/Makefile.win32
+++ b/qmake/Makefile.win32
@@ -27,7 +27,7 @@ LINKER  = link
 !if "$(QMAKESPEC)" == "win32-msvc2005"
 CFLAGS_EXTRA      = /Zc:wchar_t-
 !elseif "$(QMAKESPEC)" == "win32-msvc2008" || "$(QMAKESPEC)" == "win32-msvc2010" || "$(QMAKESPEC)" == "win32-msvc2012" || "$(QMAKESPEC)" == "win32-msvc2013"
-CFLAGS_EXTRA      = /MP
+CFLAGS_EXTRA      = /MP /D_CRT_SECURE_NO_WARNINGS $(CFLAGS_CRT)
 !endif
 
 CFLAGS_BARE = -c -Fo./ -Fdqmake.pdb \
@@ -41,14 +41,14 @@ CFLAGS_BARE = -c -Fo./ -Fdqmake.pdb \
               -DQT_BUILD_QMAKE -DQT_BOOTSTRAPPED -DPROEVALUATOR_FULL \
               -DQT_NO_TEXTCODEC -DQT_NO_UNICODETABLES -DQT_NO_COMPONENT -DQT_NO_COMPRESS \
               -DQT_NO_THREAD -DQT_NO_QOBJECT -DQT_NO_GEOM_VARIANT -DQT_NO_DATASTREAM \
-              -DUNICODE -DQT_CRYPTOGRAPHICHASH_ONLY_SHA1 -DQT_JSON_READONLY
-CFLAGS   = -Yuqmake_pch.h -FIqmake_pch.h -Fpqmake_pch.pch $(CFLAGS_BARE) $(CFLAGS) $(EXTRA_CPPFLAGS)
+              -DUNICODE -DQT_CRYPTOGRAPHICHASH_ONLY_SHA1 -DQT_JSON_READONLY -DQT_NO_STANDARDPATHS
+CFLAGS   = -Yuqmake_pch.h -FIqmake_pch.h -Fpqmake_pch.pch $(CFLAGS_BARE) $(CFLAGS)
 
 CXXFLAGS_BARE = $(CFLAGS_BARE)
 CXXFLAGS = $(CFLAGS)
 
 LFLAGS	    =
-LIBS	    = ole32.lib advapi32.lib
+LIBS	    = ole32.lib advapi32.lib shell32.lib
 LINKQMAKE   = $(LINKER) $(LFLAGS) -OUT:qmake.exe $(OBJS) $(QTOBJS) $(LIBS)
 ADDCLEAN    = qmake.pdb qmake.ilk
 
@@ -61,7 +61,7 @@ OBJS        = project.obj main.obj ioutils.obj proitems.obj qmakevfs.obj \
               qmakeglobals.obj qmakeparser.obj qmakeevaluator.obj qmakebuiltins.obj \
               makefile.obj unixmake.obj unixmake2.obj mingw_make.obj \
               option.obj winmakefile.obj projectgenerator.obj property.obj meta.obj \
-              makefiledeps.obj metamakefile.obj xmloutput.obj pbuilder_pbx.obj \
+              makefiledeps.obj metamakefile.obj xmloutput.obj \
               msvc_nmake.obj msvc_vcproj.obj msvc_vcxproj.obj \
               msvc_objectmodel.obj msbuild_objectmodel.obj registry.obj \
               gbuild.obj cesdkhandler.obj
@@ -94,6 +94,7 @@ QTOBJS= \
 	qglobal.obj \
 	qhash.obj \
 	qiodevice.obj \
+	qdebug.obj \
 	qlist.obj \
 	qlinkedlist.obj \
 	qlocale.obj \
@@ -105,6 +106,7 @@ QTOBJS= \
 	qtextcodec.obj \
 	qutfcodec.obj \
 	qstring.obj \
+	qstring_compat.obj \
 	qstringlist.obj \
 	qstringbuilder.obj \
 	qsystemerror.obj \
@@ -139,7 +141,6 @@ clean::
 	-del $(OBJS)
 	-del qmake_pch.obj
 	-del qmake_pch.pch
-	-del qsystemlibrary.obj
 	-del qmake.pdb
 	-del qmake.ilk
 	-del qmake.tds
@@ -218,3 +219,7 @@ qmake_pch.obj:
 
 {$(SOURCE_PATH)\tools\shared\windows}.cpp{}.obj::
 	$(CXX) $(CXXFLAGS) $<
+
+# Make sure qstring_compat.obj isn't compiled with PCH enabled
+qstring_compat.obj: $(SOURCE_PATH)\src\corelib\tools\qstring_compat.cpp
+	$(CXX) -c $(CXXFLAGS_BARE) $(SOURCE_PATH)\src\corelib\tools\qstring_compat.cpp
diff --git a/qmake/cachekeys.h b/qmake/cachekeys.h
index fc76883333..3d8e795ec3 100644
--- a/qmake/cachekeys.h
+++ b/qmake/cachekeys.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/doc/qmake.qdocconf b/qmake/doc/qmake.qdocconf
index d8f970048c..1a23237999 100644
--- a/qmake/doc/qmake.qdocconf
+++ b/qmake/doc/qmake.qdocconf
@@ -2,7 +2,6 @@ include($QT_INSTALL_DOCS/global/qt-module-defaults.qdocconf)
 
 project                 = QMake
 description             = QMake Manual
-url                     = http://qt-project.org/doc/qt-$QT_VER
 
 qhp.projects            = qmake
 
@@ -74,3 +73,5 @@ depends += \
     qtx11extras \
     qtxml \
     qtxmlpatterns
+
+navigation.landingpage = "qmake Manual"
diff --git a/qmake/doc/snippets/code/doc_src_qmake-manual.pro b/qmake/doc/snippets/code/doc_src_qmake-manual.pro
index ff1edb878d..1bd89d2f04 100644
--- a/qmake/doc/snippets/code/doc_src_qmake-manual.pro
+++ b/qmake/doc/snippets/code/doc_src_qmake-manual.pro
@@ -1,6 +1,6 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the documentation of the Qt Toolkit.
@@ -218,13 +218,6 @@ FORMS = mydialog.ui \
 #! [32]
 
 
-#! [33]
-FORMS3 = my_uic3_dialog.ui \
-     my_uic3_widget.ui \
-         my_uic3_config.ui
-#! [33]
-
-
 #! [34]
 HEADERS = myclass.h \
           login.h \
@@ -977,3 +970,15 @@ int main() { return featureFunction(); }
 # <project root>/project.pro
 qtCompileTest(test)
 #! [182]
+
+#! [183]
+# <project root>/project.pro
+QMAKE_SONAME_PREFIX = @rpath
+#! [183]
+
+#! [184]
+# <project root>/project.pro
+QMAKE_SONAME_PREFIX = @executable_path/../Frameworks
+QMAKE_SONAME_PREFIX = @loader_path/Frameworks
+QMAKE_SONAME_PREFIX = /Library/Frameworks
+#! [184]
diff --git a/qmake/doc/snippets/qmake/comments.pro b/qmake/doc/snippets/qmake/comments.pro
index 957052c81d..9fa85aa6f3 100644
--- a/qmake/doc/snippets/qmake/comments.pro
+++ b/qmake/doc/snippets/qmake/comments.pro
@@ -5,6 +5,6 @@
 
 #! [1]
 # To include a literal hash character, use the $$LITERAL_HASH variable:
-urlPieces = http://qt-project.org/doc/qt-5.0/qtgui/qtextdocument.html pageCount
+urlPieces = http://doc.qt.io/qt-5/qtextdocument.html pageCount
 message($$join(urlPieces, $$LITERAL_HASH))
 #! [1]
diff --git a/qmake/doc/snippets/qmake/qtconfiguration.pro b/qmake/doc/snippets/qmake/qtconfiguration.pro
index 55e13be352..fe3667144e 100644
--- a/qmake/doc/snippets/qmake/qtconfiguration.pro
+++ b/qmake/doc/snippets/qmake/qtconfiguration.pro
@@ -10,7 +10,7 @@ message(Binary files (executables): $$[QT_INSTALL_BINS])
 message(Plugins: $$[QT_INSTALL_PLUGINS])
 message(Data files: $$[QT_INSTALL_DATA])
 message(Translation files: $$[QT_INSTALL_TRANSLATIONS])
-message(Settings: $$[QT_INSTALL_SETTINGS])
+message(Settings: $$[QT_INSTALL_CONFIGURATION])
 message(Examples: $$[QT_INSTALL_EXAMPLES])
 #! [0]
 
diff --git a/qmake/doc/src/qmake-manual.qdoc b/qmake/doc/src/qmake-manual.qdoc
index 958550ce91..e7d125a3a8 100644
--- a/qmake/doc/src/qmake-manual.qdoc
+++ b/qmake/doc/src/qmake-manual.qdoc
@@ -122,10 +122,10 @@
     configuration options to fine tune the build process. For more information,
     see \l{Building Common Project Types}.
 
-    You can use the \l{external: Qt Creator Manual}{Qt Creator} new project
-    wizard to create the project file. You choose the project template, and Qt
-    Creator creates a project file with default values that enable you to build
-    and run the project. You can modify the project file to suit your purposes.
+    You can use the \l{Qt Creator: Creating Projects}{Qt Creator new project wizard} to create the project file.
+    You choose the project template, and Qt Creator creates a project file with
+    default values that enable you to build and run the project. You can modify
+    the project file to suit your purposes.
 
     You can also use qmake to generate project files. For a full description of
     qmake command line options, see \l{Running qmake}.
@@ -321,6 +321,12 @@
     \header \li Template      \li qmake Output
     \row    \li app (default) \li Makefile to build an application.
     \row    \li lib           \li Makefile to build a library.
+    \row    \li aux           \li Makefile to build nothing. Use this if no compiler needs to
+                                  be invoked to create the target, for instance because your
+                                  project is written in an interpreted language.
+                                  \note This template type is only available for Makefile-based
+                                  generators. In particular, it will not work with the vcxproj and
+                                  Xcode generators.
     \row    \li subdirs       \li Makefile containing rules for the
     subdirectories specified using the \l{SUBDIRS}
     variable. Each subdirectory must contain its own project file.
@@ -651,9 +657,9 @@
     qmake knows about many of these features, which can be accessed via specific
     variables that only take effect on the platforms where they are relevant.
 
-    \section1 Mac OS X
+    \section1 OS X and iOS
 
-    Features specific to this platform include support for creating universal
+    Features specific to these platforms include support for creating universal
     binaries, frameworks and bundles.
 
     \section2 Source and Binary Packages
@@ -675,7 +681,7 @@
 
     qmake is able to automatically generate build
     rules for linking against frameworks in the standard framework directory on
-    Mac OS X, located at \c{/Library/Frameworks/}.
+    OS X, located at \c{/Library/Frameworks/}.
 
     Directories other than the standard framework directory need to be specified
     to the build system, and this is achieved by appending linker options to the
@@ -716,14 +722,14 @@
     and \l{QMAKE_FRAMEWORK_VERSION} variables. By default, the values used for
     these variables are obtained from the \l{TARGET} and \l{VERSION} variables.
 
-    See \l{Qt for Mac OS X - Deployment} for more information about
+    See \l{Qt for OS X - Deployment} for more information about
     deploying applications and libraries.
 
     \section2 Creating and Moving Xcode Projects
 
-    Developers on Mac OS X can take advantage of the qmake support for Xcode
+    Developers on OS X can take advantage of the qmake support for Xcode
     project files, as described in
-    \l{Qt is Mac OS X Native#Development Tools}{Qt is Mac OS X Native},
+    \l{Qt is OS X Native#Development Tools}{Qt is OS X Native},
     by running qmake to generate an Xcode project from an existing qmake project
     file. For example:
 
@@ -763,12 +769,7 @@
 
     \section2 Creating Visual Studio Project Files
 
-    Developers using Visual Studio to write Qt applications can use the
-    Visual Studio integration facilities provided with the
-    \l{Qt Commercial License}
-    and do not need to worry about how project dependencies are managed.
-
-    However, some developers may need to import an existing
+    This section describes how to import an existing
     qmake project into Visual Studio.
     qmake is able to take a project file and create
     a Visual Studio project that contains all the necessary information
@@ -911,6 +912,9 @@
     \row    \li c++11 \li C++11 support is enabled. This option has no effect if
             the compiler does not support C++11.
             By default, support is disabled.
+    \row    \li c++14 \li C++14 support is enabled. This option has no effect if
+            the compiler does not support C++14.
+            By default, support is disabled.
     \endtable
 
     When you use the \c debug_and_release option (which is the default under
@@ -1013,14 +1017,14 @@
          on the directory they reside. This is turned on by default.
     \row \li embed_manifest_dll \li Embeds a manifest file in the DLL created
          as part of a library project.
-    \row \li embed_manifest_exe \li Embeds a manifest file in the DLL created
+    \row \li embed_manifest_exe \li Embeds a manifest file in the EXE created
          as part of an application project.
     \endtable
 
     See \l{Platform Notes#Visual Studio Manifest Files}{Platform Notes}
     for more information about the options for embedding manifest files.
 
-    The following options take an effect only on Mac OS X:
+    The following options take an effect only on OS X:
 
     \table
     \header \li Option \li Description
@@ -1189,6 +1193,12 @@
     Please see \l{Setting the Application Icon}{the application icon documentation}
     for more information.
 
+    \target IDLSOURCES
+    \section1 IDLSOURCES
+
+    This variable is used only on Windows for the Visual Studio project generation to
+    put the specified files in the Generated Files folder.
+
     \target INCLUDEPATH
     \section1 INCLUDEPATH
 
@@ -1298,6 +1308,12 @@
     handled internally by qmake and rarely needs to
     be modified.
 
+    \target MSVCPROJ_*
+    \section1 MSVCPROJ_*
+
+    These variables are handled internally by qmake and should not be modified
+    or utilized.
+
     \target MOC_DIR
     \section1 MOC_DIR
 
@@ -1354,7 +1370,7 @@
     Indicates the header file for creating a precompiled
     header file, to increase the compilation speed of a project.
     Precompiled headers are currently only supported on some platforms
-    (Windows - all MSVC project types, Mac OS X - Xcode, Makefile,
+    (Windows - all MSVC project types, Apple - Xcode, Makefile,
     Unix - gcc 3.3 and up).
 
     \target PWD
@@ -1403,7 +1419,7 @@
     \target QMAKE_BUNDLE_DATA
     \section1 QMAKE_BUNDLE_DATA
 
-    \note This variable is used on Mac OS X only.
+    \note This variable is used on OS X and iOS only.
 
     Specifies the data that will be installed with a library
     bundle, and is often used to specify a collection of header files.
@@ -1425,7 +1441,7 @@
 
     \section1 QMAKE_BUNDLE_EXTENSION
 
-    \note This variable is used on Mac OS X only.
+    \note This variable is used on OS X and iOS only.
 
     Specifies the extension to be used for library bundles.
     This allows frameworks to be created with custom extensions instead of the
@@ -1443,6 +1459,15 @@
     executable needs to be specified as long as it is on a path contained
     in the \c PATH variable when the Makefile is processed.
 
+    \section1 QMAKE_CFLAGS
+
+    Specifies the C compiler flags for building
+    a project. The value of this variable is typically handled by
+    qmake or \l{#QMAKESPEC}{qmake.conf} and rarely
+    needs to be modified. The flags specific to debug and release modes can be
+    adjusted by modifying the \c QMAKE_CFLAGS_DEBUG and
+    \c QMAKE_CFLAGS_RELEASE variables, respectively.
+
     \target QMAKE_CFLAGS_DEBUG
     \section1 QMAKE_CFLAGS_DEBUG
 
@@ -1643,7 +1668,7 @@
 
     \section1 QMAKE_FRAMEWORK_BUNDLE_NAME
 
-    \note This variable is used on Mac OS X only.
+    \note This variable is used on OS X and iOS only.
 
     In a framework project, this variable contains the name to be used for the
     framework that is built.
@@ -1657,9 +1682,9 @@
     \target QMAKE_FRAMEWORK_VERSION
     \section1 QMAKE_FRAMEWORK_VERSION
 
-    \note This variable is used on Mac OS X only.
+    \note This variable is used on OS X and iOS only.
 
-    For projects where the build target is a Mac OS X framework, this variable
+    For projects where the build target is an OS X or iOS framework, this variable
     is used to specify the version number that will be applied to the framework
     that is built.
 
@@ -1696,11 +1721,10 @@
     If the OpenGL implementation uses EGL (most OpenGL/ES systems),
     then QMAKE_INCDIR_EGL may also need to be set.
 
-    \section1 QMAKE_INCDIR_OPENGL_ES1, QMAKE_INCDIR_OPENGL_ES2
+    \section1 QMAKE_INCDIR_OPENGL_ES2
 
-    These variables specify the location of OpenGL headers files to be added
-    to \l{INCLUDEPATH} when building a target with OpenGL ES 1
-    or OpenGL ES 2 support respectively.
+    This variable specifies the location of OpenGL header files to be added
+    to \l{INCLUDEPATH} when building a target with OpenGL ES 2 support.
 
     The value of this variable is typically handled by qmake or
     \l{#QMAKESPEC}{qmake.conf} and rarely
@@ -1734,10 +1758,10 @@
     \target QMAKE_INFO_PLIST
     \section1 QMAKE_INFO_PLIST
 
-    \note This variable is used on Mac OS X platforms only.
+    \note This variable is used on OS X and iOS platforms only.
 
     Specifies the name of the property list file, \c{.plist}, you
-    would like to include in your Mac OS X application bundle.
+    would like to include in your OS X and iOS application bundle.
 
     In the \c{.plist} file, you can define some variables, e.g., @EXECUTABLE@,
     which qmake will replace with the actual executable name. Other variables
@@ -1991,16 +2015,16 @@
 
     \section1 QMAKE_MAC_SDK
 
-    This variable is used on Mac OS X when building universal binaries.
+    This variable is used on OS X when building universal binaries.
 
     \section1 QMAKE_MACOSX_DEPLOYMENT_TARGET
 
-    This variable only takes effect when building on Mac OS X. On that
+    This variable only takes effect when building on OS X. On that
     platform, the variable will be forwarded to the MACOSX_DEPLOYMENT_TARGET
     environment variable, which is interpreted by the compiler or linker.
     For more information, see the
-    \l{Qt for Mac OS X - Deployment#Mac OS X Version Dependencies}{Deploying
-    an Application on Mac OS X} document.
+    \l{Qt for OS X - Deployment#OS X Version Dependencies}{Deploying
+    an Application on OS X} document.
 
     \section1 QMAKE_MAKEFILE
 
@@ -2066,12 +2090,77 @@
     qmake or \l{#QMAKESPEC}{qmake.conf} and rarely
     needs to be modified.
 
+    \section1 QMAKE_SONAME_PREFIX
+
+    If defined, the value of this variable is used as a path to be prepended to
+    the built shared library's \c SONAME identifier. The \c SONAME is the
+    identifier that the dynamic linker will later use to reference the library.
+    In general this reference may be a library name or full library path. On OS
+    X and iOS, the path may be specified relatively using the following
+    placeholders:
+
+    \table
+    \header \li Placeholder  \li Effect
+    \row \li @rpath
+         \li Expands to paths defined by LC_RPATH mach-o commands in
+             the current process executable or the referring libraries.
+    \row \li @executable_path
+         \li Expands to the current process executable location.
+    \row \li @loader_path
+         \li Expands to the referring executable or library location.
+    \endtable
+
+    In most cases, using \c @rpath is sufficient and recommended:
+
+    \snippet code/doc_src_qmake-manual.pro 183
+
+    However, the prefix may be also specified using different placeholders, or
+    an absolute path, such as one of the following:
+
+    \snippet code/doc_src_qmake-manual.pro 184
+
+    For more information, see
+    \l{https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dyld.1.html}{dyld}
+    documentation on dynamic library install names.
+
     \section1 QMAKE_TARGET
 
     Specifies the name of the project target.  The value of this
     variable is typically handled by qmake or
     \l{#QMAKESPEC}{qmake.conf} and rarely needs to be modified.
 
+    \target QMAKE_TARGET_COMPANY
+    \section1 QMAKE_TARGET_COMPANY
+
+    Windows only. Specifies the company for the project target, this is used where
+    applicable for putting the company name in the application's properties. This is
+    only utilized if the VERSION or RC_ICONS variable is set and the RC_FILE and RES_FILE
+    variables are not set.
+
+    \target QMAKE_TARGET_DESCRIPTION
+    \section1 QMAKE_TARGET_DESCRIPTION
+
+    Windows only. Specifies the description for the project target, this is used where
+    applicable for putting the description in the application's properties. This is only
+    utilized if the VERSION or RC_ICONS variable is set and the RC_FILE and RES_FILE variables
+    are not set.
+
+    \target QMAKE_TARGET_COPYRIGHT
+    \section1 QMAKE_TARGET_COPYRIGHT
+
+    Windows only. Specifies the copyright information for the project target, this is used where
+    applicable for putting the copyright information in the application's properties. This is only
+    utilized if the VERSION or RC_ICONS variable is set and the RC_FILE and RES_FILE variables
+    are not set.
+
+    \target QMAKE_TARGET_PRODUCT
+    \section1 QMAKE_TARGET_PRODUCT
+
+    Windows only. Specifies the product for the project target, this is used where
+    applicable for putting the product in the application's properties. This is only utilized if
+    the VERSION or RC_ICONS variable is set and the RC_FILE and RES_FILE variables
+    are not set.
+
     \section1 QT
 
     Specifies the Qt modules that are used by your project.
@@ -2134,6 +2223,16 @@
     linked with an application so that they are available as built-in
     resources.
 
+    qmake automatically adds the plugins that are typically needed
+    by the used Qt modules (see \c QT).
+    The defaults are tuned towards an optimal out-of-the-box experience.
+    See \l{Static Plugins} for a list of available plugins, and ways
+    to override the automatic linking.
+
+    This variable currently has no effect when linking against a
+    shared/dynamic build of Qt, or when linking libraries.
+    It may be used for deployment of dynamic plugins at a later time.
+
     \target QT_VERSION_variable
     \section1 QT_VERSION
 
@@ -2161,6 +2260,26 @@
     qmake or \l{#QMAKESPEC}{qmake.conf} and rarely
     needs to be modified.
 
+    \target RC_CODEPAGE
+    \section1 RC_CODEPAGE
+
+    Windows only. Specifies the codepage that should be specified in a generated rc file. This is
+    only utilized if the VERSION or RC_ICONS variable is set and the RC_FILE and RES_FILE variables
+    are not set.
+
+    \target RC_ICONS
+    \section1 RC_ICONS
+
+    Windows only. Specifies the icons that should be included into a generated rc file, this
+    is only utilized if the RC_FILE and RES_FILE variable are not set.
+
+    \target RC_LANG
+    \section1 RC_LANG
+
+    Windows only. Specifies the language that should be specified in a generated rc file. This is
+    only utilized if the VERSION or RC_ICONS variable is set and the RC_FILE and RES_FILE variables
+    are not set.
+
     \section1 RC_INCLUDEPATH
 
     Specifies include paths that are passed to the Windows Resource Compiler.
@@ -2315,6 +2434,12 @@
     \row    \li subdirs \li Creates a Makefile for building targets in subdirectories.
             The subdirectories are specified using the \l{#SUBDIRS}{SUBDIRS}
             variable.
+    \row    \li aux     \li Creates a Makefile for not building anything. Use this if no compiler
+                            needs to be invoked to create the target, for instance because your
+                            project is written in an interpreted language.
+                            \note This template type is only available for Makefile-based
+                            generators. In particular, it will not work with the vcxproj and
+                            Xcode generators.
     \row    \li vcapp  \li Windows only. Creates an application project for
             Visual Studio. See \l{Creating Visual Studio Project Files} for more
             information.
@@ -2382,6 +2507,111 @@
 
     See also \l{#DEPENDPATH}{DEPENDPATH}.
 
+    \target WINRT_MANIFEST
+    \section1 WINRT_MANIFEST
+
+    Specifies parameters to be passed to the application manifest on \l{Qt for WinRT}{Windows
+    Runtime}. The allowed values are:
+
+    \table
+    \header
+        \li Member
+        \li Description
+    \row
+        \li architecture
+        \li The target architecture. Defaults to \c VCPROJ_ARCH.
+    \row
+        \li background
+        \li Tile background color. Defaults to \c{green}.
+    \row
+        \li capabilities
+        \li Specifies capabilities to add to the capability list.
+    \row
+        \li capabilities_device
+        \li Specifies device capabilities to add to the capability list
+            (location, webcam, and so on).
+    \row
+        \li default_language
+        \li The default language code of the application. Defaults to "en".
+    \row
+        \li dependencies
+        \li Specifies dependencies required by the package.
+    \row
+        \li description
+        \li Package description. Defaults to \c{Default package description}.
+    \row
+        \li foreground
+        \li Tile foreground (text) color. Defaults to \c{light}.
+            This option is only available for Windows Store apps on Windows 8 and Windows RT.
+    \row
+        \li iconic_tile_icon
+        \li Image file for the \c{iconic} tile template icon. Default provided by
+            the mkspec.
+    \row
+        \li iconic_tile_small
+        \li Image file for the small \c{iconic} tile template logo. Default provided
+            by the mkspec.
+    \row
+        \li identity
+        \li The unique ID of the app. Defaults to reusing the existing generated
+            manifest's UUID, or generates a new UUID if none is present.
+    \row
+        \li logo_large
+        \li Large logo image file. Default provided by the mkspec.
+    \row
+        \li logo_medium
+        \li Medium logo image file. Default provided by the mkspec.
+    \row
+        \li logo_small
+        \li Small logo image file. Default provided by the mkspec.
+    \row
+        \li logo_store
+        \li Logo image file for Windows Store. Default provided by the mkspec.
+    \row
+        \li name
+        \li The name of the package as displayed to the user. Defaults to TARGET.
+    \row
+        \li phone_product_id
+        \li The GUID of the product. Defaults to the value of WINRT_MANIFEST.identity. (Windows Phone only)
+    \row
+        \li phone_publisher_id
+        \li The GUID of the publisher. Defaults to an invalid GUID. (Windows Phone only)
+    \row
+        \li publisher
+        \li Display name of the publisher. Defaults to \c{Default publisher display name}.
+    \row
+        \li publisher_id
+        \li The publisher's distinguished name (default: \c{CN=MyCN}).
+    \row
+        \li splash_screen
+        \li Splash screen image file. Default provided by the mkspec.
+    \row
+        \li target
+        \li The name of the target (.exe). Defaults to TARGET.
+    \row
+        \li version
+        \li The version number of the package. Defaults to \c{1.0.0.0}.
+    \endtable
+
+    You can use any combination of those values.
+
+    For example:
+
+    \code
+    WINRT_MANIFEST.publisher = MyCompany
+    WINRT_MANIFEST.logo_store = someImage.png
+    WINRT_MANIFEST.capabilities += internetClient
+    WINRT_MANIFEST.capabilities_device += location
+    \endcode
+
+    Additionally, an input manifest file can be specified by using WINRT_MANIFEST.
+
+    For example:
+
+    \code
+    WINRT_MANIFEST = someManifest.xml.in
+    \endcode
+
     \target YACCSOURCES
     \section1 YACCSOURCES
 
@@ -2559,6 +2789,13 @@
 
     See also \l{infile(filename, var, val)}{infile()}.
 
+    \section2 getenv(variablename)
+
+    Returns the value of the environment variable \c variablename.
+    This is mostly equivalent to the \c $$(variablename) syntax.
+    The \c getenv function, however, supports environment variables with
+    parentheses in their name.
+
     \section2 join(variablename, glue, before, after)
 
     Joins the value of \c variablename with \c glue. If this value is
@@ -3963,7 +4200,7 @@
         \li nmake
         \li Visual Studio projects (VS 2008 and later)
         \endlist
-    \li Mac OS X
+    \li OS X and iOS
         \list
         \li Makefile
         \li Xcode
@@ -4162,7 +4399,7 @@
     This tutorial teaches you the basics of qmake. The other topics in this
     manual contain more detailed information about using qmake.
 
-    \section1 Starting off Simple
+    \section1 Starting Off Simple
 
     Let's assume that you have just finished a basic implementation of
     your application, and you have created the following files:
@@ -4334,7 +4571,7 @@
     them uses project-specific variables to customize output files.
 
     Platform-specific variables are not described here. For more information,
-    see  \l{Qt for Windows - Deployment} and \l{Qt for Mac OS X}.
+    see  \l{Qt for Windows - Deployment} and \l{Qt for OS X}.
 
     \target Application
     \section1 Building an Application
@@ -4483,7 +4720,7 @@
     \endlist
 
     The target file name for the library is platform-dependent. For example, on
-    X11 and Mac OS X, the library name will be prefixed by \c lib. On Windows,
+    X11, OS X, and iOS, the library name will be prefixed by \c lib. On Windows,
     no prefix is added to the file name.
 
     \target Plugin
diff --git a/qmake/generators/integrity/gbuild.cpp b/qmake/generators/integrity/gbuild.cpp
index e8e992b694..980c45bfb1 100644
--- a/qmake/generators/integrity/gbuild.cpp
+++ b/qmake/generators/integrity/gbuild.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/generators/integrity/gbuild.h b/qmake/generators/integrity/gbuild.h
index e69d634abb..2223975011 100644
--- a/qmake/generators/integrity/gbuild.h
+++ b/qmake/generators/integrity/gbuild.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/generators/mac/pbuilder_pbx.cpp b/qmake/generators/mac/pbuilder_pbx.cpp
index da64c33cf2..b54f634cf9 100644
--- a/qmake/generators/mac/pbuilder_pbx.cpp
+++ b/qmake/generators/mac/pbuilder_pbx.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -418,7 +410,7 @@ class ProjectBuilderSources
     bool buildable, object_output;
     QString key, group, compiler;
 public:
-    ProjectBuilderSources(const QString &key, bool buildable=false, const QString &group=QString(), const QString &compiler=QString(), bool producesObject=false);
+    ProjectBuilderSources(const QString &key, bool buildable = false, const QString &compiler = QString(), bool producesObject = false);
     QStringList files(QMakeProject *project) const;
     inline bool isBuildable() const { return buildable; }
     inline QString keyName() const { return key; }
@@ -442,8 +434,8 @@ public:
     }
 };
 
-ProjectBuilderSources::ProjectBuilderSources(const QString &k, bool b,
-                                             const QString &g, const QString &c, bool o) : buildable(b), object_output(o), key(k), group(g), compiler(c)
+ProjectBuilderSources::ProjectBuilderSources(const QString &k, bool b, const QString &c, bool o) :
+    buildable(b), object_output(o), key(k), compiler(c)
 {
     // Override group name for a few common keys
     if (k == "SOURCES" || k == "OBJECTIVE_SOURCES" || k == "HEADERS")
@@ -463,10 +455,16 @@ ProjectBuilderSources::files(QMakeProject *project) const
 {
     QStringList ret = project->values(ProKey(key)).toQStringList();
     if(key == "QMAKE_INTERNAL_INCLUDED_FILES") {
+        QString qtPrefix(QLibraryInfo::rawLocation(QLibraryInfo::PrefixPath, QLibraryInfo::EffectivePaths) + '/');
+        QString qtSrcPrefix(QLibraryInfo::rawLocation(QLibraryInfo::PrefixPath, QLibraryInfo::EffectiveSourcePaths) + '/');
+
         QStringList newret;
         for(int i = 0; i < ret.size(); ++i) {
-            if(!ret.at(i).endsWith(Option::prf_ext))
-                newret.append(ret.at(i));
+            // Don't show files "internal" to Qt in Xcode
+            if (ret.at(i).startsWith(qtPrefix) || ret.at(i).startsWith(qtSrcPrefix))
+                continue;
+
+            newret.append(ret.at(i));
         }
         ret = newret;
     }
@@ -567,6 +565,9 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
     // doesn't have access to any of the information it needs to resolve relative paths.
     project->values("QMAKE_INTERNAL_INCLUDED_FILES").prepend(fileFixify(project->projectFile(), qmake_getpwd(), input_dir));
 
+    // Since we can't fileFixify inside ProjectBuilderSources::files(), we resolve the absolute paths here
+    project->values("QMAKE_INTERNAL_INCLUDED_FILES") = ProStringList(fileFixify(project->values("QMAKE_INTERNAL_INCLUDED_FILES").toQStringList(), FileFixifyAbsolute));
+
     //DUMP SOURCES
     QMap<QString, ProStringList> groups;
     QList<ProjectBuilderSources> sources;
@@ -606,7 +607,7 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
                         }
                     }
                     sources.append(ProjectBuilderSources(inputs.at(input).toQString(), true,
-                            QString(), (*it).toQString(), isObj));
+                                                         (*it).toQString(), isObj));
 
                     if (isObj) {
                         inputs.removeAt(input);
@@ -634,18 +635,22 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
                 continue;
 
             bool in_root = true;
-            QString src_key = keyFor(file), name = file;
-            if(project->isActiveConfig("flat")) {
-                QString flat_file = fileFixify(file, qmake_getpwd(), Option::output_dir, FileFixifyRelative);
-                if(flat_file.indexOf(Option::dir_sep) != -1) {
-                    QStringList dirs = flat_file.split(Option::dir_sep);
-                    name = dirs.back();
-                }
-            } else {
-                QString flat_file = fileFixify(file, qmake_getpwd(), Option::output_dir, FileFixifyRelative);
-                if(QDir::isRelativePath(flat_file) && flat_file.indexOf(Option::dir_sep) != -1) {
+            QString src_key = keyFor(file);
+
+            file = fileFixify(file, qmake_getpwd(), Option::output_dir, FileFixifyAbsolute);
+            QString name = file.split(Option::dir_sep).back();
+
+            if (!project->isActiveConfig("flat")) {
+                // Build group hierarchy for file references that match the source our build dir
+                QString relativePath = fileFixify(file, input_dir, qmake_getpwd(), FileFixifyRelative);
+                if (QDir::isRelativePath(relativePath) && relativePath.startsWith(QLatin1String("../")))
+                    relativePath = fileFixify(file, FileFixifyRelative); // Try build dir
+
+                if (QDir::isRelativePath(relativePath)
+                        && !relativePath.startsWith(QLatin1String("../"))
+                        && relativePath.indexOf(Option::dir_sep) != -1) {
                     QString last_grp("QMAKE_PBX_" + sources.at(source).groupName() + "_HEIR_GROUP");
-                    QStringList dirs = flat_file.split(Option::dir_sep);
+                    QStringList dirs = relativePath.split(Option::dir_sep);
                     name = dirs.back();
                     dirs.pop_back(); //remove the file portion as it will be added via src_key
                     for(QStringList::Iterator dir_it = dirs.begin(); dir_it != dirs.end(); ++dir_it) {
@@ -676,12 +681,12 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
               << "\t\t\t" << writeSettings("path", escapeFilePath(file)) << ";\n";
             if (name != file)
                 t << "\t\t\t" << writeSettings("name", escapeFilePath(name)) << ";\n";
-            t << "\t\t\t" << writeSettings("sourceTree", sourceTreeForFile(file)) << ";\n";
+            t << "\t\t\t" << writeSettings("sourceTree", "<absolute>") << ";\n";
             QString filetype = xcodeFiletypeForFilename(file);
             if (!filetype.isNull())
                 t << "\t\t\t" << writeSettings("lastKnownFileType", filetype) << ";\n";
             t << "\t\t};\n";
-            if (sources.at(source).isBuildable() && sources.at(source).isObjectOutput(file)) { //build reference
+            if (sources.at(source).isBuildable()) { //build reference
                 QString build_key = keyFor(file + ".BUILDABLE");
                 t << "\t\t" << build_key << " = {\n"
                   << "\t\t\t" << writeSettings("fileRef", src_key) << ";\n"
@@ -690,7 +695,8 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
                   << "\t\t\t\t" << writeSettings("ATTRIBUTES", ProStringList(), SettingsAsList, 5) << ";\n"
                   << "\t\t\t};\n"
                   << "\t\t};\n";
-                project->values("QMAKE_PBX_OBJ").append(build_key);
+                if (sources.at(source).isObjectOutput(file))
+                    project->values("QMAKE_PBX_OBJ").append(build_key);
             }
         }
         if(!src_list.isEmpty()) {
@@ -733,13 +739,7 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
             mkt << "DEFINES       = "
                 << varGlue("PRL_EXPORT_DEFINES","-D"," -D"," ")
                 << varGlue("DEFINES","-D"," -D","") << endl;
-            mkt << "INCPATH       = -I" << specdir();
-            if(!project->isActiveConfig("no_include_pwd")) {
-                QString pwd = escapeFilePath(fileFixify(qmake_getpwd()));
-                if(pwd.isEmpty())
-                    pwd = ".";
-                mkt << " -I" << pwd;
-            }
+            mkt << "INCPATH       =";
             {
                 const ProStringList &incs = project->values("INCLUDEPATH");
                 for (ProStringList::ConstIterator incit = incs.begin(); incit != incs.end(); ++incit)
@@ -950,7 +950,7 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
                         if(!path.isEmpty() && !libdirs.contains(path))
                             libdirs += path;
                     }
-                    library = fileFixify(library);
+                    library = fileFixify(library, FileFixifyAbsolute);
                     QString filetype = xcodeFiletypeForFilename(library);
                     QString key = keyFor(library);
                     if (!project->values("QMAKE_PBX_LIBRARIES").contains(key)) {
@@ -960,7 +960,7 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
                           << "\t\t\t" << writeSettings("name", escapeFilePath(name)) << ";\n"
                           << "\t\t\t" << writeSettings("path", escapeFilePath(library)) << ";\n"
                           << "\t\t\t" << writeSettings("refType", QString::number(reftypeForFile(library)), SettingsNoQuote) << ";\n"
-                          << "\t\t\t" << writeSettings("sourceTree", sourceTreeForFile(library)) << ";\n";
+                          << "\t\t\t" << writeSettings("sourceTree", "<absolute>") << ";\n";
                         if (is_frmwrk)
                             t << "\t\t\t" << writeSettings("lastKnownFileType", "wrapper.framework") << ";\n";
                         t << "\t\t};\n";
@@ -1023,15 +1023,30 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
     if (!project->isEmpty("QMAKE_PRE_LINK")) {
         QString phase_key = keyFor("QMAKE_PBX_PRELINK_BUILDPHASE");
         project->values("QMAKE_PBX_BUILDPHASES").append(phase_key);
+
+        ProStringList inputPaths;
+        ProStringList outputPaths;
+        const ProStringList &archs = project->values("QMAKE_XCODE_ARCHS");
+        if (!archs.isEmpty()) {
+            for (int i = 0; i < archs.size(); ++i) {
+                const ProString &arch = archs.at(i);
+                inputPaths << "$(OBJECT_FILE_DIR_$(CURRENT_VARIANT))/" + arch + "/";
+                outputPaths << "$(LINK_FILE_LIST_$(CURRENT_VARIANT)_" + arch + ")";
+            }
+        } else {
+            inputPaths << "$(OBJECT_FILE_DIR_$(CURRENT_VARIANT))/$(CURRENT_ARCH)/";
+            outputPaths << "$(LINK_FILE_LIST_$(CURRENT_VARIANT)_$(CURRENT_ARCH))";
+        }
+
         t << "\t\t" << phase_key << " = {\n"
           << "\t\t\t" << writeSettings("buildActionMask", "2147483647", SettingsNoQuote) << ";\n"
           << "\t\t\t" << writeSettings("files", ProStringList(), SettingsAsList, 4) << ";\n"
           // The build phases are not executed in the order they are defined, but by their
           // resolved dependenices, so we have to ensure that this phase is run after the
-          // compilation phase, and before the link phase. Making the phase depend on all the
-          // object files, and "write" to the list of files to link achieves that.
-          << "\t\t\t" << writeSettings("inputPaths", ProStringList("$(OBJECT_FILE_DIR_$(CURRENT_VARIANT))/$(CURRENT_ARCH)/*" + Option::obj_ext), SettingsAsList, 4) << ";\n"
-          << "\t\t\t" << writeSettings("outputPaths", ProStringList("$(LINK_FILE_LIST_$(CURRENT_VARIANT)_$(CURRENT_ARCH))"), SettingsAsList, 4) << ";\n"
+          // compilation phase, and before the link phase. Making the phase depend on the
+          // object file directory, and "write" to the list of files to link achieves that.
+          << "\t\t\t" << writeSettings("inputPaths", inputPaths, SettingsAsList, 4) << ";\n"
+          << "\t\t\t" << writeSettings("outputPaths", outputPaths, SettingsAsList, 4) << ";\n"
           << "\t\t\t" << writeSettings("isa", "PBXShellScriptBuildPhase", SettingsNoQuote) << ";\n"
           << "\t\t\t" << writeSettings("runOnlyForDeploymentPostprocessing", "0", SettingsNoQuote) << ";\n"
           << "\t\t\t" << writeSettings("name", "Qt Prelink") << ";\n"
@@ -1101,12 +1116,12 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
           << "\t\t\t" << writeSettings("shellScript", fixForOutput("cp -r $BUILT_PRODUCTS_DIR/$FULL_PRODUCT_NAME " + escapeFilePath(destDir))) << ";\n"
           << "\t\t};\n";
     }
-    // Copy Bundle Resources
+    bool copyBundleResources = project->isActiveConfig("app_bundle") && project->first("TEMPLATE") == "app";
+    ProStringList bundle_resources_files;
+    // Copy Bundle Data
     if (!project->isEmpty("QMAKE_BUNDLE_DATA")) {
         ProStringList bundle_file_refs;
-        ProStringList bundle_resources_files;
-
-        bool useCopyResourcesPhase = project->isActiveConfig("app_bundle") && project->first("TEMPLATE") == "app";
+        bool ios = project->isActiveConfig("ios");
 
         //all bundle data
         const ProStringList &bundle_data = project->values("QMAKE_BUNDLE_DATA");
@@ -1116,13 +1131,15 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
             //all files
             const ProStringList &files = project->values(ProKey(bundle_data[i] + ".files"));
             for(int file = 0; file < files.count(); file++) {
-                QString fn = files[file].toQString();
+                QString fn = fileFixify(files[file].toQString(), Option::output_dir, input_dir, FileFixifyAbsolute);
+                QString name = fn.split(Option::dir_sep).back();
                 QString file_ref_key = keyFor("QMAKE_PBX_BUNDLE_DATA_FILE_REF." + bundle_data[i] + "-" + fn);
                 bundle_file_refs += file_ref_key;
                 t << "\t\t" << file_ref_key << " = {\n"
                   << "\t\t\t" << writeSettings("isa", "PBXFileReference", SettingsNoQuote) << ";\n"
                   << "\t\t\t" << writeSettings("path", escapeFilePath(fn)) << ";\n"
-                  << "\t\t\t" << writeSettings("sourceTree", sourceTreeForFile(fn)) << ";\n"
+                  << "\t\t\t" << writeSettings("name", name) << ";\n"
+                  << "\t\t\t" << writeSettings("sourceTree", "<absolute>") << ";\n"
                   << "\t\t};\n";
                 QString file_key = keyFor("QMAKE_PBX_BUNDLE_DATA_FILE." + bundle_data[i] + "-" + fn);
                 bundle_files += file_key;
@@ -1132,9 +1149,11 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
                   << "\t\t};\n";
             }
 
-            if (!useCopyResourcesPhase || !path.isEmpty()) {
-                // The resource copy phase doesn't support paths, so we have to use
-                // a regular file copy phase (which doesn't optimize the resources).
+            if (copyBundleResources && ((ios && path.isEmpty())
+                                        || (!ios && path == QLatin1String("Contents/Resources")))) {
+                foreach (const ProString &s, bundle_files)
+                    bundle_resources_files << s;
+            } else {
                 QString phase_key = keyFor("QMAKE_PBX_BUNDLE_COPY." + bundle_data[i]);
                 if (!project->isEmpty(ProKey(bundle_data[i] + ".version"))) {
                     //###
@@ -1146,45 +1165,46 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
                   << "\t\t\t" << writeSettings("buildActionMask", "2147483647", SettingsNoQuote) << ";\n"
                   << "\t\t\t" << writeSettings("dstPath", escapeFilePath(path)) << ";\n"
                   << "\t\t\t" << writeSettings("dstSubfolderSpec", "1", SettingsNoQuote) << ";\n"
-                  << "\t\t\t" << writeSettings("files", bundle_files, SettingsAsList, 4) << ";\n"
                   << "\t\t\t" << writeSettings("isa", "PBXCopyFilesBuildPhase", SettingsNoQuote) << ";\n"
+                  << "\t\t\t" << writeSettings("files", bundle_files, SettingsAsList, 4) << ";\n"
                   << "\t\t\t" << writeSettings("runOnlyForDeploymentPostprocessing", "0", SettingsNoQuote) << ";\n"
                   << "\t\t};\n";
-            } else {
-                // Otherwise we leave it to the resource copy phase below
-                bundle_resources_files += bundle_files;
             }
         }
 
-        if (useCopyResourcesPhase) {
-            if (!project->isEmpty("ICON")) {
-                ProString icon = project->first("ICON");
-                if (icon.length() >= 2 && (icon.at(0) == '"' || icon.at(0) == '\'') && icon.endsWith(icon.at(0)))
-                    icon = icon.mid(1, icon.length() - 2);
-                bundle_resources_files += keyFor(icon + ".BUILDABLE");
-            }
-
-            QString grp("Copy Bundle Resources"), key = keyFor(grp);
-            project->values("QMAKE_PBX_BUILDPHASES").append(key);
-            t << "\t\t" << key << " = {\n"
-              << "\t\t\t" << writeSettings("buildActionMask", "2147483647", SettingsNoQuote) << ";\n"
-              << "\t\t\t" << writeSettings("files", bundle_resources_files, SettingsAsList, 4) << ";\n"
-              << "\t\t\t" << writeSettings("isa", "PBXResourcesBuildPhase", SettingsNoQuote) << ";\n"
-              << "\t\t\t" << writeSettings("runOnlyForDeploymentPostprocessing", "0", SettingsNoQuote) << ";\n"
-              << "\t\t\t" << writeSettings("name", escapeFilePath(grp)) << ";\n"
-              << "\t\t};\n";
-        }
-
         QString bundle_data_key = keyFor("QMAKE_PBX_BUNDLE_DATA");
         project->values("QMAKE_PBX_GROUPS").append(bundle_data_key);
         t << "\t\t" << bundle_data_key << " = {\n"
           << "\t\t\t" << writeSettings("children", bundle_file_refs, SettingsAsList, 4) << ";\n"
           << "\t\t\t" << writeSettings("isa", "PBXGroup", SettingsNoQuote) << ";\n"
-          << "\t\t\t" << writeSettings("name", "Bundle Resources") << ";\n"
+          << "\t\t\t" << writeSettings("name", "Bundle Data") << ";\n"
           << "\t\t\t" << writeSettings("sourceTree", "<Group>") << ";\n"
           << "\t\t};\n";
     }
 
+    // Copy bundle resources. Optimizes resources, and puts them into the Resources
+    // subdirectory on OSX, but doesn't support paths.
+    if (copyBundleResources) {
+        if (!project->isEmpty("ICON")) {
+            ProString icon = project->first("ICON");
+            if (icon.length() >= 2 && (icon.at(0) == '"' || icon.at(0) == '\'') && icon.endsWith(icon.at(0)))
+                icon = icon.mid(1, icon.length() - 2);
+            bundle_resources_files += keyFor(icon + ".BUILDABLE");
+        }
+
+        // Always add "Copy Bundle Resources" phase, even when we have no bundle
+        // resources, since Xcode depends on it being there for e.g asset catalogs.
+        QString grp("Copy Bundle Resources"), key = keyFor(grp);
+        project->values("QMAKE_PBX_BUILDPHASES").append(key);
+        t << "\t\t" << key << " = {\n"
+          << "\t\t\t" << writeSettings("buildActionMask", "2147483647", SettingsNoQuote) << ";\n"
+          << "\t\t\t" << writeSettings("files", bundle_resources_files, SettingsAsList, 4) << ";\n"
+          << "\t\t\t" << writeSettings("isa", "PBXResourcesBuildPhase", SettingsNoQuote) << ";\n"
+          << "\t\t\t" << writeSettings("runOnlyForDeploymentPostprocessing", "0", SettingsNoQuote) << ";\n"
+          << "\t\t\t" << writeSettings("name", escapeFilePath(grp)) << ";\n"
+          << "\t\t};\n";
+    }
+
     //REFERENCE
     project->values("QMAKE_PBX_PRODUCTS").append(keyFor(pbx_dir + "QMAKE_PBX_REFERENCE"));
     t << "\t\t" << keyFor(pbx_dir + "QMAKE_PBX_REFERENCE") << " = {\n"
@@ -1390,9 +1410,13 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
                    (project->first("TEMPLATE") == "lib" && !project->isActiveConfig("staticlib") &&
                     project->isActiveConfig("lib_bundle"))) {
                     QString plist = fileFixify(project->first("QMAKE_INFO_PLIST").toQString(), Option::output_dir, input_dir);
-                    if (plist.isEmpty())
+                    if (!plist.isEmpty()) {
+                        if (exists(plist))
+                            t << "\t\t\t\t" << writeSettings("INFOPLIST_FILE", plist) << ";\n";
+                        else
+                            warn_msg(WarnLogic, "Could not resolve Info.plist: '%s'. Check if QMAKE_INFO_PLIST points to a valid file.", plist.toLatin1().constData());
+                    } else {
                         plist = specdir() + QDir::separator() + "Info.plist." + project->first("TEMPLATE");
-                    if (exists(plist)) {
                         QFile plist_in_file(plist);
                         if (plist_in_file.open(QIODevice::ReadOnly)) {
                             QTextStream plist_in(&plist_in_file);
@@ -1422,8 +1446,6 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
                                 t << "\t\t\t\t" << writeSettings("INFOPLIST_FILE", "Info.plist") << ";\n";
                             }
                         }
-                    } else {
-                        warn_msg(WarnLogic, "Could not resolve Info.plist: '%s'. Check if QMAKE_INFO_PLIST points to a valid file.", plist.toLatin1().constData());
                     }
                 }
 
@@ -1469,7 +1491,7 @@ ProjectBuilderMakefileGenerator::writeMakeParts(QTextStream &t)
                     t << "\t\t\t\t" << writeSettings("GCC_PRECOMPILE_PREFIX_HEADER", "YES") << ";\n"
                     << "\t\t\t\t" << writeSettings("GCC_PREFIX_HEADER", escapeFilePath(project->first("PRECOMPILED_HEADER"))) << ";\n";
                 }
-                t << "\t\t\t\t" << writeSettings("HEADER_SEARCH_PATHS", fixListForOutput("INCLUDEPATH") + ProStringList(fixForOutput(specdir())), SettingsAsList, 5) << ";\n"
+                t << "\t\t\t\t" << writeSettings("HEADER_SEARCH_PATHS", fixListForOutput("INCLUDEPATH"), SettingsAsList, 5) << ";\n"
                   << "\t\t\t\t" << writeSettings("LIBRARY_SEARCH_PATHS", fixListForOutput("QMAKE_PBX_LIBPATHS"), SettingsAsList, 5) << ";\n"
                   << "\t\t\t\t" << writeSettings("FRAMEWORK_SEARCH_PATHS", fixListForOutput("QMAKE_FRAMEWORKPATH"),
                         !project->values("QMAKE_FRAMEWORKPATH").isEmpty() ? SettingsAsList : 0, 5) << ";\n";
@@ -1795,14 +1817,6 @@ ProjectBuilderMakefileGenerator::reftypeForFile(const QString &where)
     return ret;
 }
 
-QString ProjectBuilderMakefileGenerator::sourceTreeForFile(const QString &where)
-{
-    Q_UNUSED(where)
-    // We always use absolute paths, instead of maintaining the SRCROOT
-    // build variable and making files relative to that.
-    return QLatin1String("<absolute>");
-}
-
 QString
 ProjectBuilderMakefileGenerator::projectSuffix() const
 {
diff --git a/qmake/generators/mac/pbuilder_pbx.h b/qmake/generators/mac/pbuilder_pbx.h
index 8813a190a9..f5102d8c55 100644
--- a/qmake/generators/mac/pbuilder_pbx.h
+++ b/qmake/generators/mac/pbuilder_pbx.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -63,7 +55,6 @@ class ProjectBuilderMakefileGenerator : public UnixMakefileGenerator
     ProStringList fixListForOutput(const char *where);
     ProStringList fixListForOutput(const ProStringList &list);
     int     reftypeForFile(const QString &where);
-    QString sourceTreeForFile(const QString &where);
     QString projectSuffix() const;
     enum { SettingsAsList=0x01, SettingsNoQuote=0x02 };
     inline QString writeSettings(const QString &var, const char *val, int flags=0, int indent_level=0)
diff --git a/qmake/generators/makefile.cpp b/qmake/generators/makefile.cpp
index 946a1ee986..804eab9ca7 100644
--- a/qmake/generators/makefile.cpp
+++ b/qmake/generators/makefile.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -70,11 +62,6 @@
 
 QT_BEGIN_NAMESPACE
 
-// Well, Windows doesn't have this, so here's the macro
-#ifndef S_ISDIR
-#  define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
-#endif
-
 bool MakefileGenerator::canExecute(const QStringList &cmdline, int *a) const
 {
     int argv0 = -1;
@@ -370,7 +357,8 @@ MakefileGenerator::findFilesInVPATH(ProStringList l, uchar flags, const QString
                     regex.remove(0, dir.length());
                 }
                 if(real_dir.isEmpty() || exists(real_dir)) {
-                    QStringList files = QDir(real_dir).entryList(QStringList(regex));
+                    QStringList files = QDir(real_dir).entryList(QStringList(regex),
+                                                QDir::NoDotAndDotDot | QDir::AllEntries);
                     if(files.isEmpty()) {
                         debug_msg(1, "%s:%d Failure to find %s in vpath (%s)",
                                   __FILE__, __LINE__,
@@ -383,8 +371,6 @@ MakefileGenerator::findFilesInVPATH(ProStringList l, uchar flags, const QString
                         l.removeAt(val_it);
                         QString a;
                         for(int i = (int)files.count()-1; i >= 0; i--) {
-                            if(files[i] == "." || files[i] == "..")
-                                continue;
                             a = real_dir + files[i];
                             if(!(flags & VPATH_NoFixify))
                                 a = fileFixify(a);
@@ -456,6 +442,43 @@ MakefileGenerator::init()
     if (v["QMAKE_LINK_O_FLAG"].isEmpty())
         v["QMAKE_LINK_O_FLAG"].append("-o ");
 
+    setSystemIncludes(v["QMAKE_DEFAULT_INCDIRS"]);
+
+    ProStringList &incs = project->values("INCLUDEPATH");
+    if (!project->isActiveConfig("no_include_pwd")) {
+        if (Option::output_dir != qmake_getpwd()) {
+            // Pretend that the build dir is the source dir for #include purposes,
+            // consistently with the "transparent shadow builds" strategy. This is
+            // also consistent with #include "foo.h" falling back to #include <foo.h>
+            // behavior if it doesn't find the file in the source dir.
+            incs.prepend(Option::output_dir);
+        }
+        // This makes #include <foo.h> work if the header lives in the source dir.
+        // The benefit of that is questionable, as generally the user should use the
+        // correct include style, and extra compilers that put stuff in the source dir
+        // should add the dir themselves.
+        // More importantly, it makes #include "foo.h" work with MSVC when shadow-building,
+        // as this compiler looks files up relative to %CD%, not the source file's parent.
+        incs.prepend(qmake_getpwd());
+    }
+    incs.append(project->specDir());
+
+    const char * const cacheKeys[] = { "_QMAKE_STASH_", "_QMAKE_SUPER_CACHE_", 0 };
+    for (int i = 0; cacheKeys[i]; ++i) {
+        if (v[cacheKeys[i]].isEmpty())
+            continue;
+        const ProString &file = v[cacheKeys[i]].first();
+        if (file.isEmpty())
+            continue;
+
+        QFileInfo fi(fileInfo(file.toQString()));
+
+        // If the file lives in the output dir we treat it as 'owned' by
+        // the current project, so it should be distcleaned by it as well.
+        if (fi.path() == Option::output_dir)
+            v["QMAKE_DISTCLEAN"].append(fi.fileName());
+    }
+
     ProStringList &quc = v["QMAKE_EXTRA_COMPILERS"];
 
     //make sure the COMPILERS are in the correct input/output chain order
@@ -789,12 +812,6 @@ MakefileGenerator::init()
         ProStringList incDirs = v["DEPENDPATH"] + v["QMAKE_ABSOLUTE_SOURCE_PATH"];
         if(project->isActiveConfig("depend_includepath"))
             incDirs += v["INCLUDEPATH"];
-        if(!project->isActiveConfig("no_include_pwd")) {
-            QString pwd = qmake_getpwd();
-            if(pwd.isEmpty())
-                pwd = ".";
-            incDirs += pwd;
-        }
         QList<QMakeLocalFileName> deplist;
         for (ProStringList::Iterator it = incDirs.begin(); it != incDirs.end(); ++it)
             deplist.append(QMakeLocalFileName(unescapeFilePath((*it).toQString())));
@@ -846,11 +863,6 @@ MakefileGenerator::init()
             (*it) = Option::fixPathToLocalOS((*it).toQString());
     }
 
-    if(!project->isActiveConfig("no_include_pwd")) { //get the output_dir into the pwd
-        if(Option::output_dir != qmake_getpwd())
-            project->values("INCLUDEPATH").append(".");
-    }
-
     //fix up the target deps
     static const char * const fixpaths[] = { "PRE_TARGETDEPS", "POST_TARGETDEPS", 0 };
     for (int path = 0; fixpaths[path]; path++) {
@@ -1322,7 +1334,8 @@ MakefileGenerator::writeInstalls(QTextStream &t, bool noBuild)
                     continue;
                 }
                 QString local_dirstr = Option::fixPathToLocalOS(dirstr, true);
-                QStringList files = QDir(local_dirstr).entryList(QStringList(filestr));
+                QStringList files = QDir(local_dirstr).entryList(QStringList(filestr),
+                                            QDir::NoDotAndDotDot | QDir::AllEntries);
                 if (installConfigValues.contains("no_check_exist") && files.isEmpty()) {
                     QString dst_file = filePrefixRoot(root, dst_dir);
                     QString cmd;
@@ -1344,8 +1357,6 @@ MakefileGenerator::writeInstalls(QTextStream &t, bool noBuild)
                 }
                 for(int x = 0; x < files.count(); x++) {
                     QString file = files[x];
-                    if(file == "." || file == "..") //blah
-                        continue;
                     uninst.append(rm_dir_contents + " " + escapeFilePath(filePrefixRoot(root, fileFixify(dst_dir + file, FileFixifyAbsolute, false))));
                     QFileInfo fi(fileInfo(dirstr + file));
                     QString dst_file = filePrefixRoot(root, fileFixify(dst_dir, FileFixifyAbsolute, false));
@@ -1420,31 +1431,31 @@ MakefileGenerator::writeInstalls(QTextStream &t, bool noBuild)
 }
 
 QString
-MakefileGenerator::var(const ProKey &var)
+MakefileGenerator::var(const ProKey &var) const
 {
     return val(project->values(var));
 }
 
 QString
-MakefileGenerator::val(const ProStringList &varList)
+MakefileGenerator::val(const ProStringList &varList) const
 {
     return valGlue(varList, "", " ", "");
 }
 
 QString
-MakefileGenerator::val(const QStringList &varList)
+MakefileGenerator::val(const QStringList &varList) const
 {
     return valGlue(varList, "", " ", "");
 }
 
 QString
-MakefileGenerator::varGlue(const ProKey &var, const QString &before, const QString &glue, const QString &after)
+MakefileGenerator::varGlue(const ProKey &var, const QString &before, const QString &glue, const QString &after) const
 {
     return valGlue(project->values(var), before, glue, after);
 }
 
 QString
-MakefileGenerator::fileVarGlue(const ProKey &var, const QString &before, const QString &glue, const QString &after)
+MakefileGenerator::fileVarGlue(const ProKey &var, const QString &before, const QString &glue, const QString &after) const
 {
     ProStringList varList;
     foreach (const ProString &val, project->values(var))
@@ -1453,7 +1464,7 @@ MakefileGenerator::fileVarGlue(const ProKey &var, const QString &before, const Q
 }
 
 QString
-MakefileGenerator::valGlue(const ProStringList &varList, const QString &before, const QString &glue, const QString &after)
+MakefileGenerator::valGlue(const ProStringList &varList, const QString &before, const QString &glue, const QString &after) const
 {
     QString ret;
     for (ProStringList::ConstIterator it = varList.begin(); it != varList.end(); ++it) {
@@ -1467,7 +1478,7 @@ MakefileGenerator::valGlue(const ProStringList &varList, const QString &before,
 }
 
 QString
-MakefileGenerator::valGlue(const QStringList &varList, const QString &before, const QString &glue, const QString &after)
+MakefileGenerator::valGlue(const QStringList &varList, const QString &before, const QString &glue, const QString &after) const
 {
     QString ret;
     for(QStringList::ConstIterator it = varList.begin(); it != varList.end(); ++it) {
@@ -1482,19 +1493,19 @@ MakefileGenerator::valGlue(const QStringList &varList, const QString &before, co
 
 
 QString
-MakefileGenerator::varList(const ProKey &var)
+MakefileGenerator::varList(const ProKey &var) const
 {
     return valList(project->values(var));
 }
 
 QString
-MakefileGenerator::valList(const ProStringList &varList)
+MakefileGenerator::valList(const ProStringList &varList) const
 {
     return valGlue(varList, "", " \\\n\t\t", "");
 }
 
 QString
-MakefileGenerator::valList(const QStringList &varList)
+MakefileGenerator::valList(const QStringList &varList) const
 {
     return valGlue(varList, "", " \\\n\t\t", "");
 }
@@ -1749,23 +1760,7 @@ MakefileGenerator::verifyExtraCompiler(const ProString &comp, const QString &fil
         QString tmp_out = project->values(ProKey(comp + ".output")).first().toQString();
         if(tmp_out.isEmpty())
             return false;
-        QString tmp_cmd;
-        const ProKey ckey(comp + ".commands");
-        if (!project->isEmpty(ckey)) {
-            int argv0 = -1;
-            ProStringList cmdline = project->values(ckey);
-            for(int i = 0; i < cmdline.count(); ++i) {
-                if(!cmdline.at(i).contains('=')) {
-                    argv0 = i;
-                    break;
-                }
-            }
-            if(argv0 != -1) {
-                cmdline[argv0] = Option::fixPathToTargetOS(cmdline.at(argv0).toQString(), false);
-                tmp_cmd = cmdline.join(' ');
-            }
-        }
-
+        const QString tmp_cmd = project->values(ProKey(comp + ".commands")).join(' ');
         if (config.indexOf("combine") != -1) {
             QString cmd = replaceExtraCompilerVariables(tmp_cmd, QString(), tmp_out);
             if(system(cmd.toLatin1().constData()))
@@ -1829,42 +1824,10 @@ MakefileGenerator::writeExtraCompilerTargets(QTextStream &t)
     for (ProStringList::ConstIterator it = quc.begin(); it != quc.end(); ++it) {
         QString tmp_out = fileFixify(project->first(ProKey(*it + ".output")).toQString(),
                                      Option::output_dir, Option::output_dir);
-        QString tmp_cmd;
-        const ProKey ckey(*it + ".commands");
-        if (!project->isEmpty(ckey)) {
-            QStringList cmdline = project->values(ckey).toQStringList();
-            int argv0 = findExecutable(cmdline);
-            if(argv0 != -1) {
-                cmdline[argv0] = escapeFilePath(Option::fixPathToTargetOS(cmdline.at(argv0), false));
-                tmp_cmd = cmdline.join(' ');
-            }
-        }
-        QString tmp_dep_cmd;
+        const QString tmp_cmd = project->values(ProKey(*it + ".commands")).join(' ');
+        const QString tmp_dep_cmd = project->values(ProKey(*it + ".depend_command")).join(' ');
         QString dep_cd_cmd;
-        const ProKey dckey(*it + ".depend_command");
-        if (!project->isEmpty(dckey)) {
-            int argv0 = -1;
-            ProStringList cmdline = project->values(dckey);
-            for(int i = 0; i < cmdline.count(); ++i) {
-                if(!cmdline.at(i).contains('=')) {
-                    argv0 = i;
-                    break;
-                }
-            }
-            if(argv0 != -1) {
-                QString arg = cmdline.at(argv0).toQString();
-                const QString c = Option::fixPathToLocalOS(arg, true);
-                if(exists(c)) {
-                    arg = escapeFilePath(Option::fixPathToLocalOS(arg, false));
-                } else {
-                    arg = escapeFilePath(arg);
-                }
-                QFileInfo cmdFileInfo(arg);
-                if (!cmdFileInfo.isAbsolute() || cmdFileInfo.exists()) {
-                    cmdline[argv0] = arg;
-                    tmp_dep_cmd = cmdline.join(' ');
-                }
-            }
+        if (!tmp_dep_cmd.isEmpty()) {
             dep_cd_cmd = QLatin1String("cd ")
                  + escapeFilePath(Option::fixPathToLocalOS(Option::output_dir, false))
                  + QLatin1String(" && ");
@@ -2254,6 +2217,25 @@ MakefileGenerator::writeMakefile(QTextStream &t)
     return true;
 }
 
+void
+MakefileGenerator::writeDefaultVariables(QTextStream &t)
+{
+    t << "QMAKE         = " << var("QMAKE_QMAKE") << endl;
+    t << "DEL_FILE      = " << var("QMAKE_DEL_FILE") << endl;
+    t << "CHK_DIR_EXISTS= " << var("QMAKE_CHK_DIR_EXISTS") << endl;
+    t << "MKDIR         = " << var("QMAKE_MKDIR") << endl;
+    t << "COPY          = " << var("QMAKE_COPY") << endl;
+    t << "COPY_FILE     = " << var("QMAKE_COPY_FILE") << endl;
+    t << "COPY_DIR      = " << var("QMAKE_COPY_DIR") << endl;
+    t << "INSTALL_FILE  = " << var("QMAKE_INSTALL_FILE") << endl;
+    t << "INSTALL_PROGRAM = " << var("QMAKE_INSTALL_PROGRAM") << endl;
+    t << "INSTALL_DIR   = " << var("QMAKE_INSTALL_DIR") << endl;
+    t << "DEL_FILE      = " << var("QMAKE_DEL_FILE") << endl;
+    t << "SYMLINK       = " << var("QMAKE_SYMBOLIC_LINK") << endl;
+    t << "DEL_DIR       = " << var("QMAKE_DEL_DIR") << endl;
+    t << "MOVE          = " << var("QMAKE_MOVE") << endl;
+}
+
 QString MakefileGenerator::fixifySpecdir(const QString &spec, const QString &outdir)
 {
     if (QFileInfo(spec).isAbsolute())
@@ -2464,22 +2446,7 @@ MakefileGenerator::writeSubTargets(QTextStream &t, QList<MakefileGenerator::SubT
         t << "include " << (*qeui_it) << endl;
 
     if (!(flags & SubTargetSkipDefaultVariables)) {
-        /* Calling Option::fixPathToTargetOS() is necessary for MinGW/MSYS, which requires
-         * back-slashes to be turned into slashes. */
-        t << "QMAKE         = " << var("QMAKE_QMAKE") << endl;
-        t << "DEL_FILE      = " << var("QMAKE_DEL_FILE") << endl;
-        t << "CHK_DIR_EXISTS= " << var("QMAKE_CHK_DIR_EXISTS") << endl;
-        t << "MKDIR         = " << var("QMAKE_MKDIR") << endl;
-        t << "COPY          = " << var("QMAKE_COPY") << endl;
-        t << "COPY_FILE     = " << var("QMAKE_COPY_FILE") << endl;
-        t << "COPY_DIR      = " << var("QMAKE_COPY_DIR") << endl;
-        t << "INSTALL_FILE  = " << var("QMAKE_INSTALL_FILE") << endl;
-        t << "INSTALL_PROGRAM = " << var("QMAKE_INSTALL_PROGRAM") << endl;
-        t << "INSTALL_DIR   = " << var("QMAKE_INSTALL_DIR") << endl;
-        t << "DEL_FILE      = " << var("QMAKE_DEL_FILE") << endl;
-        t << "SYMLINK       = " << var("QMAKE_SYMBOLIC_LINK") << endl;
-        t << "DEL_DIR       = " << var("QMAKE_DEL_DIR") << endl;
-        t << "MOVE          = " << var("QMAKE_MOVE") << endl;
+        writeDefaultVariables(t);
         t << "SUBTARGETS    = ";     // subtargets are sub-directory
         for(int target = 0; target < targets.size(); ++target)
             t << " \\\n\t\t" << targets.at(target)->target;
@@ -2617,6 +2584,8 @@ MakefileGenerator::writeSubTargets(QTextStream &t, QList<MakefileGenerator::SubT
             t << varGlue("ALL_DEPS"," "," ","");
         if(suffix == "clean")
             t << varGlue("CLEAN_DEPS"," "," ","");
+        else if (suffix == "distclean")
+            t << varGlue("DISTCLEAN_DEPS"," "," ","");
         t << " FORCE\n";
         if(suffix == "clean") {
             t << fileVarGlue("QMAKE_CLEAN", "\t-$(DEL_FILE) ", "\n\t-$(DEL_FILE) ", "\n");
@@ -3215,7 +3184,7 @@ MakefileGenerator::writePkgConfigFile()
     QString prefix = pkgConfigPrefix();
     QString libDir = project->first("QMAKE_PKGCONFIG_LIBDIR").toQString();
     if(libDir.isEmpty())
-        libDir = prefix + Option::dir_sep + "lib" + Option::dir_sep;
+        libDir = prefix + "/lib";
     QString includeDir = project->first("QMAKE_PKGCONFIG_INCDIR").toQString();
     if(includeDir.isEmpty())
         includeDir = prefix + "/include";
@@ -3282,10 +3251,12 @@ MakefileGenerator::writePkgConfigFile()
 
     // libs
     t << "Libs: ";
-    QString pkgConfiglibDir;
     QString pkgConfiglibName;
     if (target_mode == TARG_MAC_MODE && project->isActiveConfig("lib_bundle")) {
-        pkgConfiglibDir = "-F${libdir}";
+        if (libDir != QLatin1String("/System/Library/Frameworks")
+            && libDir != QLatin1String("/Library/Frameworks")) {
+            t << "-F${libdir} ";
+        }
         ProString bundle;
         if (!project->isEmpty("QMAKE_FRAMEWORK_BUNDLE_NAME"))
             bundle = unescapeFilePath(project->first("QMAKE_FRAMEWORK_BUNDLE_NAME"));
@@ -3296,12 +3267,13 @@ MakefileGenerator::writePkgConfigFile()
             bundle = bundle.left(suffix);
         pkgConfiglibName = "-framework " + bundle + " ";
     } else {
-        pkgConfiglibDir = "-L${libdir}";
-        pkgConfiglibName = "-l" + fileInfo(fname).completeBaseName();
+        if (!project->values("QMAKE_DEFAULT_LIBDIRS").contains(libDir))
+            t << "-L${libdir} ";
+        pkgConfiglibName = "-l" + unescapeFilePath(project->first("QMAKE_ORIG_TARGET"));
         if (project->isActiveConfig("shared"))
             pkgConfiglibName += project->first("TARGET_VERSION_EXT").toQString();
     }
-    t << pkgConfiglibDir << " " << pkgConfiglibName << " \n";
+    t << pkgConfiglibName << " \n";
 
     ProStringList libs;
     if(!project->isEmpty("QMAKE_INTERNAL_PRL_LIBS")) {
@@ -3325,7 +3297,10 @@ MakefileGenerator::writePkgConfigFile()
       << varGlue("PRL_EXPORT_CXXFLAGS", "", " ", " ")
       << varGlue("QMAKE_PKGCONFIG_CFLAGS", "", " ", " ")
         //      << varGlue("DEFINES","-D"," -D"," ")
-      << "-I${includedir}\n";
+         ;
+    if (!project->values("QMAKE_DEFAULT_INCDIRS").contains(includeDir))
+        t << "-I${includedir}";
+    t << endl;
 
     // requires
     const QString requires = project->values("QMAKE_PKGCONFIG_REQUIRES").join(' ');
diff --git a/qmake/generators/makefile.h b/qmake/generators/makefile.h
index 4b8a96c15f..672ba87683 100644
--- a/qmake/generators/makefile.h
+++ b/qmake/generators/makefile.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -107,6 +99,7 @@ protected:
     bool writeDummyMakefile(QTextStream &t);
     virtual bool writeStubMakefile(QTextStream &t);
     virtual bool writeMakefile(QTextStream &t);
+    virtual void writeDefaultVariables(QTextStream &t);
 
     QString pkgConfigPrefix() const;
     QString pkgConfigFileName(bool fixify=true);
@@ -135,7 +128,7 @@ protected:
             const QString &out_directory_cdin, const QString &makefilein);
     virtual void writeSubMakeCall(QTextStream &t, const QString &outDirectory_cdin,
                                   const QString &makeFileIn);
-    void writeSubTargets(QTextStream &t, QList<SubTarget*> subtargets, int flags);
+    virtual void writeSubTargets(QTextStream &t, QList<SubTarget*> subtargets, int flags);
 
     //extra compiler interface
     bool verifyExtraCompiler(const ProString &c, const QString &f);
@@ -225,16 +218,16 @@ protected:
     virtual bool findLibraries();
 
     //for retrieving values and lists of values
-    virtual QString var(const ProKey &var);
-    QString varGlue(const ProKey &var, const QString &before, const QString &glue, const QString &after);
-    QString fileVarGlue(const ProKey &var, const QString &before, const QString &glue, const QString &after);
-    QString varList(const ProKey &var);
-    QString val(const ProStringList &varList);
-    QString val(const QStringList &varList);
-    QString valGlue(const QStringList &varList, const QString &before, const QString &glue, const QString &after);
-    QString valGlue(const ProStringList &varList, const QString &before, const QString &glue, const QString &after);
-    QString valList(const QStringList &varList);
-    QString valList(const ProStringList &varList);
+    virtual QString var(const ProKey &var) const;
+    QString varGlue(const ProKey &var, const QString &before, const QString &glue, const QString &after) const;
+    QString fileVarGlue(const ProKey &var, const QString &before, const QString &glue, const QString &after) const;
+    QString varList(const ProKey &var) const;
+    QString val(const ProStringList &varList) const;
+    QString val(const QStringList &varList) const;
+    QString valGlue(const QStringList &varList, const QString &before, const QString &glue, const QString &after) const;
+    QString valGlue(const ProStringList &varList, const QString &before, const QString &glue, const QString &after) const;
+    QString valList(const QStringList &varList) const;
+    QString valList(const ProStringList &varList) const;
 
     QString filePrefixRoot(const QString &, const QString &);
 
diff --git a/qmake/generators/makefiledeps.cpp b/qmake/generators/makefiledeps.cpp
index df37957f9b..4638d0b94e 100644
--- a/qmake/generators/makefiledeps.cpp
+++ b/qmake/generators/makefiledeps.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -345,6 +337,30 @@ bool QMakeSourceFileInfo::containsSourceFile(const QString &f, SourceFileType ty
     return false;
 }
 
+bool QMakeSourceFileInfo::isSystemInclude(const QString &name)
+{
+    if (QDir::isRelativePath(name)) {
+        // if we got a relative path here, it's either an -I flag with a relative path
+        // or an include file we couldn't locate. Either way, conclude it's not
+        // a system include.
+        return false;
+    }
+
+    for (int i = 0; i < systemIncludes.size(); ++i) {
+        // check if name is located inside the system include dir:
+        QDir systemDir(systemIncludes.at(i));
+        QString relativePath = systemDir.relativeFilePath(name);
+
+        // the relative path might be absolute if we're crossing drives on Windows
+        if (QDir::isAbsolutePath(relativePath) || relativePath.startsWith("../"))
+            continue;
+        debug_msg(5, "File/dir %s is in system dir %s, skipping",
+                  qPrintable(name), qPrintable(systemIncludes.at(i)));
+        return true;
+    }
+    return false;
+}
+
 char *QMakeSourceFileInfo::getBuffer(int s) {
     if(!spare_buffer || spare_buffer_size < s)
         spare_buffer = (char *)realloc(spare_buffer, spare_buffer_size=s);
@@ -655,7 +671,7 @@ bool QMakeSourceFileInfo::findDeps(SourceFile *file)
                 } else {
                     exists = QFile::exists(lfn.real());
                 }
-                if(!lfn.isNull()) {
+                if (!lfn.isNull() && !isSystemInclude(lfn.real())) {
                     dep = files->lookupFile(lfn);
                     if(!dep) {
                         dep = new SourceFile;
diff --git a/qmake/generators/makefiledeps.h b/qmake/generators/makefiledeps.h
index ba55c36998..903b5b95e0 100644
--- a/qmake/generators/makefiledeps.h
+++ b/qmake/generators/makefiledeps.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -78,6 +70,7 @@ private:
     SourceFiles *files, *includes;
     bool files_changed;
     QList<QMakeLocalFileName> depdirs;
+    QStringList systemIncludes;
 
     //sleezy buffer code
     char *spare_buffer;
@@ -98,6 +91,7 @@ protected:
     virtual QFileInfo findFileInfo(const QMakeLocalFileName &);
 
 public:
+
     QMakeSourceFileInfo(const QString &cachefile="");
     virtual ~QMakeSourceFileInfo();
 
@@ -108,11 +102,15 @@ public:
     inline void setDependencyMode(DependencyMode mode) { dep_mode = mode; }
     inline DependencyMode dependencyMode() const { return dep_mode; }
 
+    void setSystemIncludes(const ProStringList &list)
+    { systemIncludes = list.toQStringList(); }
+
     enum SourceFileType { TYPE_UNKNOWN, TYPE_C, TYPE_UI, TYPE_QRC };
     enum SourceFileSeek { SEEK_DEPS=0x01, SEEK_MOCS=0x02 };
     void addSourceFiles(const ProStringList &, uchar seek, SourceFileType type=TYPE_C);
     void addSourceFile(const QString &, uchar seek, SourceFileType type=TYPE_C);
     bool containsSourceFile(const QString &, SourceFileType type=TYPE_C);
+    bool isSystemInclude(const QString &);
 
     int included(const QString &file);
     QStringList dependencies(const QString &file);
diff --git a/qmake/generators/metamakefile.cpp b/qmake/generators/metamakefile.cpp
index a037a966f6..990bee6091 100644
--- a/qmake/generators/metamakefile.cpp
+++ b/qmake/generators/metamakefile.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -444,7 +436,11 @@ MetaMakefileGenerator::createMakefileGenerator(QMakeProject *proj, bool noIO)
     } else if(gen == "MINGW") {
         mkfile = new MingwMakefileGenerator;
     } else if(gen == "PROJECTBUILDER" || gen == "XCODE") {
+#ifdef Q_CC_MSVC
+        fprintf(stderr, "Generating Xcode projects is not supported with an MSVC build of Qt.\n");
+#else
         mkfile = new ProjectBuilderMakefileGenerator;
+#endif
     } else if(gen == "MSVC.NET") {
         if (proj->first("TEMPLATE").startsWith("vc"))
             mkfile = new VcprojGenerator;
diff --git a/qmake/generators/metamakefile.h b/qmake/generators/metamakefile.h
index aff2f422a6..8ef3257ff7 100644
--- a/qmake/generators/metamakefile.h
+++ b/qmake/generators/metamakefile.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/generators/projectgenerator.cpp b/qmake/generators/projectgenerator.cpp
index 3cd5a22a33..cb00208a5b 100644
--- a/qmake/generators/projectgenerator.cpp
+++ b/qmake/generators/projectgenerator.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -111,10 +103,8 @@ ProjectGenerator::init()
                         dir += Option::dir_sep;
                     if (Option::recursive) {
                         QStringList files = QDir(dir).entryList(QDir::Files);
-                        for(int i = 0; i < (int)files.count(); i++) {
-                            if(files[i] != "." && files[i] != "..")
-                                dirs.append(dir + files[i] + QDir::separator() + builtin_regex);
-                        }
+                        for (int i = 0; i < files.count(); i++)
+                            dirs.append(dir + files[i] + QDir::separator() + builtin_regex);
                     }
                     regex = builtin_regex;
                 } else {
@@ -137,12 +127,9 @@ ProjectGenerator::init()
                     regex = regex.right(regex.length() - (s+1));
                 }
                 if (Option::recursive) {
-                    QStringList entries = QDir(dir).entryList(QDir::Dirs);
-                    for(int i = 0; i < (int)entries.count(); i++) {
-                        if(entries[i] != "." && entries[i] != "..") {
-                            dirs.append(dir + entries[i] + QDir::separator() + regex);
-                        }
-                    }
+                    QStringList entries = QDir(dir).entryList(QDir::Dirs | QDir::NoDotAndDotDot);
+                    for (int i = 0; i < entries.count(); i++)
+                        dirs.append(dir + entries[i] + QDir::separator() + regex);
                 }
                 QStringList files = QDir(dir).entryList(QDir::nameFiltersFromString(regex));
                 for(int i = 0; i < (int)files.count(); i++) {
@@ -186,16 +173,15 @@ ProjectGenerator::init()
                                 nd += QDir::separator();
                             nd += profiles[i];
                             fileFixify(nd);
-                            if(profiles[i] != "." && profiles[i] != ".." &&
-                               !subdirs.contains(nd, Qt::CaseInsensitive) && !out_file.endsWith(nd))
+                            if (!subdirs.contains(nd, Qt::CaseInsensitive) && !out_file.endsWith(nd))
                                 subdirs.append(nd);
                         }
                     }
                     if (Option::recursive) {
-                        QStringList dirs = QDir(newdir).entryList(QDir::Dirs);
+                        QStringList dirs = QDir(newdir).entryList(QDir::Dirs | QDir::NoDotAndDotDot);
                         for(int i = 0; i < (int)dirs.count(); i++) {
                             QString nd = fileFixify(newdir + QDir::separator() + dirs[i]);
-                            if(dirs[i] != "." && dirs[i] != ".." && !knownDirs.contains(nd, Qt::CaseInsensitive))
+                            if (!knownDirs.contains(nd, Qt::CaseInsensitive))
                                 knownDirs.append(nd);
                         }
                     }
@@ -207,12 +193,13 @@ ProjectGenerator::init()
                     dir = regx.left(s+1);
                     regx = regx.right(regx.length() - (s+1));
                 }
-                QStringList files = QDir(dir).entryList(QDir::nameFiltersFromString(regx), QDir::Dirs);
+                QStringList files = QDir(dir).entryList(QDir::nameFiltersFromString(regx),
+                                                        QDir::Dirs | QDir::NoDotAndDotDot);
                 ProStringList &subdirs = v["SUBDIRS"];
                 for(int i = 0; i < (int)files.count(); i++) {
                     QString newdir(dir + files[i]);
                     QFileInfo fi(fileInfo(newdir));
-                    if(fi.fileName() != "." && fi.fileName() != "..") {
+                    {
                         newdir = fileFixify(newdir);
                         if(exists(fi.filePath() + QDir::separator() + fi.fileName() + Option::pro_ext) &&
                            !subdirs.contains(newdir)) {
diff --git a/qmake/generators/projectgenerator.h b/qmake/generators/projectgenerator.h
index 621a9eb977..e1fe4ffca6 100644
--- a/qmake/generators/projectgenerator.h
+++ b/qmake/generators/projectgenerator.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/generators/unix/unixmake.cpp b/qmake/generators/unix/unixmake.cpp
index ea6a6a6e90..e54ddf8ad7 100644
--- a/qmake/generators/unix/unixmake.cpp
+++ b/qmake/generators/unix/unixmake.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -94,6 +86,29 @@ UnixMakefileGenerator::init()
     if(project->isEmpty("QMAKE_SYMBOLIC_LINK"))
         project->values("QMAKE_SYMBOLIC_LINK").append("ln -f -s");
 
+    if (!project->isEmpty("TARGET"))
+        project->values("TARGET") = escapeFilePaths(project->values("TARGET"));
+    project->values("QMAKE_ORIG_TARGET") = project->values("TARGET");
+
+    //version handling
+    if (project->isEmpty("VERSION")) {
+        project->values("VERSION").append(
+            "1.0." + (project->isEmpty("VER_PAT") ? QString("0") : project->first("VER_PAT")));
+    }
+    QStringList l = project->first("VERSION").toQString().split('.');
+    l << "0" << "0"; //make sure there are three
+    project->values("VER_MAJ").append(l[0]);
+    project->values("VER_MIN").append(l[1]);
+    project->values("VER_PAT").append(l[2]);
+
+    QString sroot = project->sourceRoot();
+    foreach (const ProString &iif, project->values("QMAKE_INTERNAL_INCLUDED_FILES")) {
+        if (iif == project->cacheFile())
+            continue;
+        if (iif.startsWith(sroot) && iif.at(sroot.length()) == QLatin1Char('/'))
+            project->values("DISTFILES") += fileFixify(iif.toQString(), FileFixifyRelative);
+    }
+
     /* this should probably not be here, but I'm using it to wrap the .t files */
     if(project->first("TEMPLATE") == "app")
         project->values("QMAKE_APP_FLAG").append("1");
@@ -106,10 +121,6 @@ UnixMakefileGenerator::init()
         return; /* subdirs is done */
     }
 
-    if (!project->isEmpty("TARGET"))
-        project->values("TARGET") = escapeFilePaths(project->values("TARGET"));
-
-    project->values("QMAKE_ORIG_TARGET") = project->values("TARGET");
     project->values("QMAKE_ORIG_DESTDIR") = project->values("DESTDIR");
     project->values("QMAKE_LIBS") += escapeFilePaths(project->values("LIBS"));
     project->values("QMAKE_LIBS_PRIVATE") += escapeFilePaths(project->values("LIBS_PRIVATE"));
@@ -152,11 +163,13 @@ UnixMakefileGenerator::init()
     }
     ProStringList &qmklibs = project->values("QMAKE_LIBS");
     qmklibs = ldadd + qmklibs;
-    if(!project->isEmpty("QMAKE_RPATHDIR")) {
+    if (!project->isEmpty("QMAKE_RPATHDIR") && !project->isEmpty("QMAKE_LFLAGS_RPATH")) {
         const ProStringList &rpathdirs = project->values("QMAKE_RPATHDIR");
-        for(int i = 0; i < rpathdirs.size(); ++i) {
-            if(!project->isEmpty("QMAKE_LFLAGS_RPATH"))
-                project->values("QMAKE_LFLAGS") += var("QMAKE_LFLAGS_RPATH") + escapeFilePath(QFileInfo(rpathdirs[i].toQString()).absoluteFilePath());
+        for (int i = 0; i < rpathdirs.size(); ++i) {
+            QString rpathdir = rpathdirs[i].toQString();
+            if (!rpathdir.startsWith('@') && !rpathdir.startsWith('$'))
+                rpathdir = QFileInfo(rpathdir).absoluteFilePath();
+            project->values("QMAKE_LFLAGS") += var("QMAKE_LFLAGS_RPATH") + escapeFilePath(rpathdir);
         }
     }
     if (!project->isEmpty("QMAKE_RPATHLINKDIR")) {
@@ -193,7 +206,7 @@ UnixMakefileGenerator::init()
 
             // replace place holders
             pchFlags = pchFlags.replace("${QMAKE_PCH_INPUT}",
-                                        fileFixify(project->first("PRECOMPILED_HEADER").toQString()));
+                                        project->first("PRECOMPILED_HEADER").toQString());
             pchFlags = pchFlags.replace("${QMAKE_PCH_OUTPUT_BASE}", pchBaseName);
             if (project->isActiveConfig("icc_pch_style")) {
                 // icc style
@@ -293,8 +306,6 @@ UnixMakefileGenerator::init()
         }
         if(!bundle.isEmpty()) {
             project->values("QMAKE_BUNDLE") = ProStringList(bundle);
-            project->values("ALL_DEPS") += project->first("QMAKE_PKGINFO");
-            project->values("ALL_DEPS") += project->first("QMAKE_BUNDLE_RESOURCE_FILE");
         } else {
             project->values("QMAKE_BUNDLE").clear();
             project->values("QMAKE_BUNDLE_LOCATION").clear();
@@ -304,10 +315,6 @@ UnixMakefileGenerator::init()
         project->values("QMAKE_BUNDLE_LOCATION").clear();
     }
 
-    if(!project->isEmpty("QMAKE_INTERNAL_INCLUDED_FILES"))
-        project->values("DISTFILES") += project->values("QMAKE_INTERNAL_INCLUDED_FILES");
-    project->values("DISTFILES") += project->projectFile();
-
     init2();
     project->values("QMAKE_INTERNAL_PRL_LIBS") << "QMAKE_LIBS";
     if(!project->isEmpty("QMAKE_MAX_FILES_PER_AR")) {
@@ -736,7 +743,9 @@ UnixMakefileGenerator::defaultInstall(const QString &t)
         target = "$(QMAKE_TARGET)";
     } else if(project->first("TEMPLATE") == "lib") {
         if(project->isEmpty("QMAKE_CYGWIN_SHLIB")) {
-            if(!project->isActiveConfig("staticlib") && !project->isActiveConfig("plugin")) {
+            if (!project->isActiveConfig("staticlib")
+                    && !project->isActiveConfig("plugin")
+                    && !project->isActiveConfig("unversioned_libname")) {
                 if(project->isEmpty("QMAKE_HPUX_SHLIB")) {
                     links << "$(TARGET0)" << "$(TARGET1)" << "$(TARGET2)";
                 } else {
@@ -908,7 +917,8 @@ UnixMakefileGenerator::escapeFilePath(const QString &path) const
 {
     QString ret = path;
     if(!ret.isEmpty()) {
-        ret = unescapeFilePath(ret).replace(QLatin1Char(' '), QLatin1String("\\ "));
+        ret = unescapeFilePath(ret).replace(QLatin1Char(' '), QLatin1String("\\ "))
+                                   .replace(QLatin1Char('\t'), QLatin1String("\\\t"));
         debug_msg(2, "EscapeFilePath: %s -> %s", path.toLatin1().constData(), ret.toLatin1().constData());
     }
     return ret;
diff --git a/qmake/generators/unix/unixmake.h b/qmake/generators/unix/unixmake.h
index 5820060adb..e90933649a 100644
--- a/qmake/generators/unix/unixmake.h
+++ b/qmake/generators/unix/unixmake.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -69,6 +61,8 @@ protected:
     virtual QStringList &findDependencies(const QString &);
     virtual void init();
 
+    virtual void writeDefaultVariables(QTextStream &t);
+    virtual void writeSubTargets(QTextStream &t, QList<SubTarget*> subtargets, int flags);
     void writeMakeParts(QTextStream &);
     bool writeMakefile(QTextStream &);
 
diff --git a/qmake/generators/unix/unixmake2.cpp b/qmake/generators/unix/unixmake2.cpp
index bc4c167744..f3a24a8681 100644
--- a/qmake/generators/unix/unixmake2.cpp
+++ b/qmake/generators/unix/unixmake2.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -97,6 +89,81 @@ UnixMakefileGenerator::writeMakefile(QTextStream &t)
     return false;
 }
 
+void
+UnixMakefileGenerator::writeDefaultVariables(QTextStream &t)
+{
+    MakefileGenerator::writeDefaultVariables(t);
+    t << "TAR           = " << var("QMAKE_TAR") << endl;
+    t << "COMPRESS      = " << var("QMAKE_GZIP") << endl;
+
+    if (project->isEmpty("QMAKE_DISTNAME")) {
+        ProString distname = project->first("QMAKE_ORIG_TARGET");
+        if (!project->isActiveConfig("no_dist_version"))
+            distname += project->first("VERSION");
+        project->values("QMAKE_DISTNAME") = distname;
+    }
+    t << "DISTNAME      = " << var("QMAKE_DISTNAME") << endl;
+
+    if (project->isEmpty("QMAKE_DISTDIR"))
+        project->values("QMAKE_DISTDIR") = project->first("QMAKE_DISTNAME");
+    t << "DISTDIR = " << escapeFilePath(fileFixify(
+            (project->isEmpty("OBJECTS_DIR") ? ProString(".tmp/") : project->first("OBJECTS_DIR")) + project->first("QMAKE_DISTDIR"),
+            Option::output_dir, Option::output_dir, FileFixifyAbsolute)) << endl;
+}
+
+void
+UnixMakefileGenerator::writeSubTargets(QTextStream &t, QList<MakefileGenerator::SubTarget*> targets, int flags)
+{
+    MakefileGenerator::writeSubTargets(t, targets, flags);
+
+    t << "dist: distdir FORCE" << endl;
+    t << "\t(cd `dirname $(DISTDIR)` && $(TAR) $(DISTNAME).tar $(DISTNAME) && $(COMPRESS) $(DISTNAME).tar)"
+         " && $(MOVE) `dirname $(DISTDIR)`/$(DISTNAME).tar.gz . && $(DEL_FILE) -r $(DISTDIR)";
+    t << endl << endl;
+
+    t << "distdir:";
+    for (int target = 0; target < targets.size(); ++target) {
+        SubTarget *subtarget = targets.at(target);
+        t << " " << subtarget->target << "-distdir";
+    }
+    t << " FORCE\n\t"
+      << mkdir_p_asstring("$(DISTDIR)", false) << "\n\t"
+      << "$(COPY_FILE) --parents " << var("DISTFILES") << " $(DISTDIR)" << Option::dir_sep << endl << endl;
+
+    const QString abs_source_path = project->first("QMAKE_ABSOLUTE_SOURCE_PATH").toQString();
+    for (int target = 0; target < targets.size(); ++target) {
+        SubTarget *subtarget = targets.at(target);
+        QString in_directory = subtarget->in_directory;
+        if (!in_directory.isEmpty() && !in_directory.endsWith(Option::dir_sep))
+            in_directory += Option::dir_sep;
+        QString out_directory = subtarget->out_directory;
+        if (!out_directory.isEmpty() && !out_directory.endsWith(Option::dir_sep))
+            out_directory += Option::dir_sep;
+        if (!abs_source_path.isEmpty() && out_directory.startsWith(abs_source_path))
+            out_directory = Option::output_dir + out_directory.mid(abs_source_path.length());
+
+        QString dist_directory = out_directory;
+        if (dist_directory.endsWith(Option::dir_sep))
+            dist_directory.chop(Option::dir_sep.length());
+        if (!dist_directory.startsWith(Option::dir_sep))
+            dist_directory.prepend(Option::dir_sep);
+
+        QString out_directory_cdin = out_directory.isEmpty() ? "\n\t"
+                                                             : "\n\tcd " + out_directory + " && ";
+        QString makefilein = " -e -f " + subtarget->makefile + " distdir DISTDIR=$(DISTDIR)" + dist_directory;
+
+        QString out = subtarget->makefile;
+        QString in = escapeFilePath(fileFixify(in_directory + subtarget->profile, FileFixifyAbsolute));
+        if (out.startsWith(in_directory))
+            out.remove(0, in_directory.length());
+
+        t << subtarget->target << "-distdir: FORCE";
+        writeSubTargetCall(t, in_directory, in, out_directory, out,
+                           out_directory_cdin, makefilein);
+        t << endl;
+    }
+}
+
 void
 UnixMakefileGenerator::writeMakeParts(QTextStream &t)
 {
@@ -117,18 +184,18 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
       << varGlue("DEFINES","-D"," -D","") << endl;
     t << "CFLAGS        = " << var("QMAKE_CFLAGS") << " $(DEFINES)\n";
     t << "CXXFLAGS      = " << var("QMAKE_CXXFLAGS") << " $(DEFINES)\n";
-    t << "INCPATH       = -I" << specdir();
-    if(!project->isActiveConfig("no_include_pwd")) {
-        QString pwd = escapeFilePath(fileFixify(qmake_getpwd()));
-        if(pwd.isEmpty())
-            pwd = ".";
-        t << " -I" << pwd;
-    }
+    t << "INCPATH       =";
     {
+        QString isystem = var("QMAKE_CFLAGS_ISYSTEM");
         const ProStringList &incs = project->values("INCLUDEPATH");
         for(int i = 0; i < incs.size(); ++i) {
             ProString inc = escapeFilePath(incs.at(i));
-            if(!inc.isEmpty())
+            if (inc.isEmpty())
+                continue;
+
+            if (!isystem.isEmpty() && isSystemInclude(inc.toQString()))
+                t << ' ' << isystem << ' ' << inc;
+            else
                 t << " -I" << inc;
         }
     }
@@ -136,6 +203,8 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
        t << " " << var("QMAKE_FRAMEWORKPATH_FLAGS");
     t << endl;
 
+    writeDefaultVariables(t);
+
     if(!project->isActiveConfig("staticlib")) {
         t << "LINK          = " << var("QMAKE_LINK") << endl;
         t << "LFLAGS        = " << var("QMAKE_LFLAGS") << endl;
@@ -144,26 +213,10 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
 
     t << "AR            = " << var("QMAKE_AR") << endl;
     t << "RANLIB        = " << var("QMAKE_RANLIB") << endl;
-    t << "QMAKE         = " << var("QMAKE_QMAKE") << endl;
-    t << "TAR           = " << var("QMAKE_TAR") << endl;
-    t << "COMPRESS      = " << var("QMAKE_GZIP") << endl;
     if(project->isActiveConfig("compile_libtool"))
         t << "LIBTOOL       = " << var("QMAKE_LIBTOOL") << endl;
-    t << "COPY          = " << var("QMAKE_COPY") << endl;
     t << "SED           = " << var("QMAKE_STREAM_EDITOR") << endl;
-    t << "COPY_FILE     = " << var("QMAKE_COPY_FILE") << endl;
-    t << "COPY_DIR      = " << var("QMAKE_COPY_DIR") << endl;
     t << "STRIP         = " << var("QMAKE_STRIP") << endl;
-    t << "INSTALL_FILE  = " << var("QMAKE_INSTALL_FILE") << endl;
-    t << "INSTALL_DIR   = " << var("QMAKE_INSTALL_DIR") << endl;
-    t << "INSTALL_PROGRAM = " << var("QMAKE_INSTALL_PROGRAM") << endl;
-
-    t << "DEL_FILE      = " << var("QMAKE_DEL_FILE") << endl;
-    t << "SYMLINK       = " << var("QMAKE_SYMBOLIC_LINK") << endl;
-    t << "DEL_DIR       = " << var("QMAKE_DEL_DIR") << endl;
-    t << "MOVE          = " << var("QMAKE_MOVE") << endl;
-    t << "CHK_DIR_EXISTS= " << var("QMAKE_CHK_DIR_EXISTS") << endl;
-    t << "MKDIR         = " << var("QMAKE_MKDIR") << endl;
 
     t << endl;
 
@@ -210,7 +263,9 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
     }
     if(do_incremental && !src_incremental)
         do_incremental = false;
-    t << "DIST          = " << valList(fileFixify(project->values("DISTFILES").toQStringList())) << endl;
+    t << "DIST          = " << valList(fileFixify(project->values("DISTFILES").toQStringList())) << " "
+                            << valList(escapeFilePaths(project->values("HEADERS"))) << " "
+                            << valList(escapeFilePaths(project->values("SOURCES"))) << endl;
     t << "QMAKE_TARGET  = " << var("QMAKE_ORIG_TARGET") << endl;
     // The comment is important for mingw32-make.exe on Windows as otherwise trailing slashes
     // would be interpreted as line continuation. The lack of spacing between the value and the
@@ -227,14 +282,15 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
         if(!project->isEmpty("QMAKE_BUNDLE")) {
             t << "TARGETD       = " << escapeFilePath(var("TARGET_x.y")) << endl;
             t << "TARGET0       = " << escapeFilePath(var("TARGET_")) << endl;
-        } else if(project->isEmpty("QMAKE_HPUX_SHLIB")) {
-            t << "TARGETD       = " << escapeFilePath(var("TARGET_x.y.z")) << endl;
-            t << "TARGET0       = " << escapeFilePath(var("TARGET_")) << endl;
-            t << "TARGET1       = " << escapeFilePath(var("TARGET_x")) << endl;
-            t << "TARGET2       = " << escapeFilePath(var("TARGET_x.y")) << endl;
-        } else {
-            t << "TARGETD       = " << escapeFilePath(var("TARGET_x")) << endl;
+        } else if (!project->isActiveConfig("unversioned_libname")) {
             t << "TARGET0       = " << escapeFilePath(var("TARGET_")) << endl;
+            if (project->isEmpty("QMAKE_HPUX_SHLIB")) {
+                t << "TARGETD       = " << escapeFilePath(var("TARGET_x.y.z")) << endl;
+                t << "TARGET1       = " << escapeFilePath(var("TARGET_x")) << endl;
+                t << "TARGET2       = " << escapeFilePath(var("TARGET_x.y")) << endl;
+            } else {
+                t << "TARGETD       = " << escapeFilePath(var("TARGET_x")) << endl;
+            }
         }
     }
     writeExtraCompilerVariables(t);
@@ -368,6 +424,7 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
             }
         }
     }
+    QString allDeps;
     if (!project->values("QMAKE_APP_FLAG").isEmpty() || project->first("TEMPLATE") == "aux") {
         QString destdir = project->first("DESTDIR").toQString();
         if(!project->isEmpty("QMAKE_BUNDLE")) {
@@ -428,8 +485,6 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
                 deps.prepend(incr_target_dir + " ");
                 incr_deps = "$(OBJECTS)";
             }
-            t << "all: " << escapeDependencyPath(deps) <<  " " << valGlue(escapeDependencyPaths(project->values("ALL_DEPS")),""," "," ") <<  "$(TARGET)"
-              << endl << endl;
 
             //real target
             t << var("TARGET") << ": " << var("PRE_TARGETDEPS") << " " << incr_deps << " " << target_deps
@@ -443,9 +498,6 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
                 t << "\n\t" << var("QMAKE_POST_LINK");
             t << endl << endl;
         } else {
-            t << "all: " << escapeDependencyPath(deps) <<  " " << valGlue(escapeDependencyPaths(project->values("ALL_DEPS")),""," "," ") <<  "$(TARGET)"
-              << endl << endl;
-
             t << "$(TARGET): " << var("PRE_TARGETDEPS") << " $(OBJECTS) "
               << target_deps << " " << var("POST_TARGETDEPS") << "\n\t";
             if (project->first("TEMPLATE") != "aux") {
@@ -459,6 +511,7 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
             }
             t << endl << endl;
         }
+        allDeps = " $(TARGET)";
     } else if(!project->isActiveConfig("staticlib")) {
         QString destdir = unescapeFilePath(project->first("DESTDIR").toQString()), incr_deps;
         if(!project->isEmpty("QMAKE_BUNDLE")) {
@@ -518,19 +571,15 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
                 incr_deps = "$(OBJECTS)";
             }
 
-            t << "all:  " << escapeDependencyPath(deps) << " " << valGlue(escapeDependencyPaths(project->values("ALL_DEPS")),""," "," ")
-              << " " << destdir << "$(TARGET)\n\n";
-
             //real target
             t << destdir << "$(TARGET): " << var("PRE_TARGETDEPS") << " "
               << incr_deps << " $(SUBLIBS) " << target_deps << " " << var("POST_TARGETDEPS");
         } else {
-            t << "all: " << escapeDependencyPath(deps) << " " << valGlue(escapeDependencyPaths(project->values("ALL_DEPS")),""," "," ") << " " <<
-                destdir << "$(TARGET)\n\n";
             t << destdir << "$(TARGET): " << var("PRE_TARGETDEPS")
               << " $(OBJECTS) $(SUBLIBS) $(OBJCOMP) " << target_deps
               << " " << var("POST_TARGETDEPS");
         }
+        allDeps = ' ' + destdir + "$(TARGET)";
         if(!destdir.isEmpty())
             t << "\n\t" << mkdir_p_asstring(destdir, false);
         if(!project->isEmpty("QMAKE_PRE_LINK"))
@@ -567,22 +616,36 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
                 t << "\n\t" << var("QMAKE_POST_LINK");
             t << endl << endl;
         } else if(project->isEmpty("QMAKE_HPUX_SHLIB")) {
-            t << "\n\t"
-              << "-$(DEL_FILE) $(TARGET) $(TARGET0) $(TARGET1) $(TARGET2)\n\t"
-              << var("QMAKE_LINK_SHLIB_CMD") << "\n\t";
-            t << varGlue("QMAKE_LN_SHLIB","-"," "," $(TARGET) $(TARGET0)")  << "\n\t"
-              << varGlue("QMAKE_LN_SHLIB","-"," "," $(TARGET) $(TARGET1)") << "\n\t"
-              << varGlue("QMAKE_LN_SHLIB","-"," "," $(TARGET) $(TARGET2)");
-            if(!destdir.isEmpty())
+            t << "\n\t";
+
+            if (!project->isActiveConfig("unversioned_libname"))
+                t << "-$(DEL_FILE) $(TARGET) $(TARGET0) $(TARGET1) $(TARGET2)";
+            else
+                t << "-$(DEL_FILE) $(TARGET)";
+
+            t << "\n\t" << var("QMAKE_LINK_SHLIB_CMD");
+
+            if (!project->isActiveConfig("unversioned_libname")) {
+                t << "\n\t"
+                  << varGlue("QMAKE_LN_SHLIB","-"," "," $(TARGET) $(TARGET0)") << "\n\t"
+                  << varGlue("QMAKE_LN_SHLIB","-"," "," $(TARGET) $(TARGET1)") << "\n\t"
+                  << varGlue("QMAKE_LN_SHLIB","-"," "," $(TARGET) $(TARGET2)");
+            }
+            if (!destdir.isEmpty()) {
                 t << "\n\t"
                   << "-$(DEL_FILE) " << destdir << "$(TARGET)\n\t"
-                  << "-$(DEL_FILE) " << destdir << "$(TARGET0)\n\t"
-                  << "-$(DEL_FILE) " << destdir << "$(TARGET1)\n\t"
-                  << "-$(DEL_FILE) " << destdir << "$(TARGET2)\n\t"
-                  << "-$(MOVE) $(TARGET)  " << destdir << " \n\t"
-                  << "-$(MOVE) $(TARGET0) " << destdir << " \n\t"
-                  << "-$(MOVE) $(TARGET1) " << destdir << " \n\t"
-                  << "-$(MOVE) $(TARGET2) " << destdir << " \n\t";
+                  << "-$(MOVE) $(TARGET)  " << destdir << " ";
+
+                if (!project->isActiveConfig("unversioned_libname")) {
+                    t << "\n\t"
+                      << "-$(DEL_FILE) " << destdir << "$(TARGET0)\n\t"
+                      << "-$(DEL_FILE) " << destdir << "$(TARGET1)\n\t"
+                      << "-$(DEL_FILE) " << destdir << "$(TARGET2)\n\t"
+                      << "-$(MOVE) $(TARGET0) " << destdir << " \n\t"
+                      << "-$(MOVE) $(TARGET1) " << destdir << " \n\t"
+                      << "-$(MOVE) $(TARGET2) " << destdir << " ";
+                }
+            }
             if(!project->isEmpty("QMAKE_POST_LINK"))
                 t << "\n\t" << var("QMAKE_POST_LINK");
             t << endl << endl;
@@ -619,9 +682,9 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
         }
     } else {
         QString destdir = project->first("DESTDIR").toQString();
-        t << "all: " << escapeDependencyPath(deps) << " " << valGlue(escapeDependencyPaths(project->values("ALL_DEPS")),""," "," ") << destdir << "$(TARGET) "
-          << varGlue("QMAKE_AR_SUBLIBS", destdir, " " + destdir, "") << "\n\n"
-          << "staticlib: " << destdir << "$(TARGET)\n\n";
+        allDeps = ' ' + destdir + "$(TARGET)"
+                  + varGlue("QMAKE_AR_SUBLIBS", ' ' + destdir, ' ' + destdir, "");
+        t << "staticlib: " << destdir << "$(TARGET)\n\n";
         if(project->isEmpty("QMAKE_AR_SUBLIBS")) {
             t << destdir << "$(TARGET): " << var("PRE_TARGETDEPS")
               << " $(OBJECTS) $(OBJCOMP) " << var("POST_TARGETDEPS") << "\n\t";
@@ -687,78 +750,118 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
               << "@$(QMAKE) -prl " << buildArgs() << " " << project->projectFile() << endl;
     }
 
-    if(!project->first("QMAKE_PKGINFO").isEmpty()) {
-        ProString pkginfo = escapeFilePath(project->first("QMAKE_PKGINFO"));
-        QString destdir = project->first("DESTDIR") + project->first("QMAKE_BUNDLE") + "/Contents";
-        t << pkginfo << ": \n\t";
-        if(!destdir.isEmpty())
+    if (!project->isEmpty("QMAKE_BUNDLE")) {
+        QHash<QString, QString> symlinks;
+        ProStringList &alldeps = project->values("ALL_DEPS");
+        QString bundle_dir = project->first("DESTDIR") + project->first("QMAKE_BUNDLE") + "/";
+        if (!project->first("QMAKE_PKGINFO").isEmpty()) {
+            ProString pkginfo = escapeFilePath(project->first("QMAKE_PKGINFO"));
+            bundledFiles << pkginfo;
+            alldeps << pkginfo;
+            QString destdir = bundle_dir + "Contents";
+            t << pkginfo << ": \n\t";
+            if (!destdir.isEmpty())
+                t << mkdir_p_asstring(destdir) << "\n\t";
+            t << "@$(DEL_FILE) " << pkginfo << "\n\t"
+              << "@echo \"APPL"
+              << (project->isEmpty("QMAKE_PKGINFO_TYPEINFO")
+                  ? QString::fromLatin1("????") : project->first("QMAKE_PKGINFO_TYPEINFO").left(4))
+              << "\" >" << pkginfo << endl;
+        }
+        if (!project->first("QMAKE_BUNDLE_RESOURCE_FILE").isEmpty()) {
+            ProString resources = escapeFilePath(project->first("QMAKE_BUNDLE_RESOURCE_FILE"));
+            bundledFiles << resources;
+            alldeps << resources;
+            QString destdir = bundle_dir + "Contents/Resources";
+            t << resources << ": \n\t";
             t << mkdir_p_asstring(destdir) << "\n\t";
-        t << "@$(DEL_FILE) " << pkginfo << "\n\t"
-          << "@echo \"APPL"
-          << (project->isEmpty("QMAKE_PKGINFO_TYPEINFO") ? QString::fromLatin1("????") : project->first("QMAKE_PKGINFO_TYPEINFO").left(4))
-          << "\" >" << pkginfo << endl;
-    }
-    if(!project->first("QMAKE_BUNDLE_RESOURCE_FILE").isEmpty()) {
-        ProString resources = escapeFilePath(project->first("QMAKE_BUNDLE_RESOURCE_FILE"));
-        bundledFiles << resources;
-        QString destdir = project->first("DESTDIR") + project->first("QMAKE_BUNDLE") + "/Contents/Resources";
-        t << resources << ": \n\t";
-        t << mkdir_p_asstring(destdir) << "\n\t";
-        t << "@touch " << resources << "\n\t\n";
-    }
-    if(!project->isEmpty("QMAKE_BUNDLE")) {
+            t << "@touch " << resources << "\n\t\n";
+        }
         //copy the plist
-        QString info_plist = escapeFilePath(fileFixify(project->first("QMAKE_INFO_PLIST").toQString())),
-            info_plist_out = escapeFilePath(project->first("QMAKE_INFO_PLIST_OUT").toQString());
-        bundledFiles << info_plist_out;
-        QString destdir = info_plist_out.section(Option::dir_sep, 0, -2);
-        t << info_plist_out << ": \n\t";
-        if(!destdir.isEmpty())
-            t << mkdir_p_asstring(destdir, false) << "\n\t";
-        ProStringList commonSedArgs;
-        if (!project->values("VERSION").isEmpty())
-            commonSedArgs << "-e \"s,@SHORT_VERSION@," << project->first("VER_MAJ") << "." << project->first("VER_MIN") << ",g\" ";
-        commonSedArgs << "-e \"s,@TYPEINFO@,"<< (project->isEmpty("QMAKE_PKGINFO_TYPEINFO") ?
-                   QString::fromLatin1("????") : project->first("QMAKE_PKGINFO_TYPEINFO").left(4)) << ",g\" ";
-        if(project->first("TEMPLATE") == "app") {
-            QString icon = fileFixify(var("ICON"));
-            QString bundleIdentifier = "com.yourcompany." + var("QMAKE_BUNDLE");
+        while (!project->isActiveConfig("no_plist")) {  // 'while' just to be able to 'break'
+            QString info_plist = project->first("QMAKE_INFO_PLIST").toQString();
+            if (info_plist.isEmpty()) {
+                info_plist = escapeFilePath(specdir() + QDir::separator() + "Info.plist." + project->first("TEMPLATE"));
+            } else if (!exists(Option::fixPathToLocalOS(info_plist))) {
+                warn_msg(WarnLogic, "Could not resolve Info.plist: '%s'. Check if QMAKE_INFO_PLIST points to a valid file.",
+                         info_plist.toLatin1().constData());
+                break;
+            } else {
+                info_plist = escapeFilePath(fileFixify(info_plist));
+            }
+
+            bool isApp = (project->first("TEMPLATE") == "app");
+            QString info_plist_out = escapeFilePath(
+                    bundle_dir + (isApp ? "Contents/Info.plist"
+                                        : "Versions/" + project->first("QMAKE_FRAMEWORK_VERSION")
+                                          + "/Resources/Info.plist"));
+            bundledFiles << info_plist_out;
+            alldeps << info_plist_out;
+            QString destdir = info_plist_out.section(Option::dir_sep, 0, -2);
+            t << info_plist_out << ": \n\t";
+            if (!destdir.isEmpty())
+                t << mkdir_p_asstring(destdir, false) << "\n\t";
+            ProStringList commonSedArgs;
+            if (!project->values("VERSION").isEmpty()) {
+                commonSedArgs << "-e \"s,@SHORT_VERSION@," << project->first("VER_MAJ") << "."
+                                                           << project->first("VER_MIN") << ",g\" ";
+                commonSedArgs << "-e \"s,@FULL_VERSION@," << project->first("VER_MAJ") << "."
+                                                          << project->first("VER_MIN") << "."
+                                                          << project->first("VER_PAT") << ",g\" ";
+            }
+            commonSedArgs << "-e \"s,@TYPEINFO@,"<< (project->isEmpty("QMAKE_PKGINFO_TYPEINFO") ?
+                       QString::fromLatin1("????") : project->first("QMAKE_PKGINFO_TYPEINFO").left(4)) << ",g\" ";
+
+            QString bundlePrefix = project->first("QMAKE_TARGET_BUNDLE_PREFIX").toQString();
+            if (bundlePrefix.isEmpty())
+                bundlePrefix = "com.yourcompany";
+            if (bundlePrefix.endsWith("."))
+                bundlePrefix.chop(1);
+            QString bundleIdentifier =  bundlePrefix + "." + var("QMAKE_BUNDLE");
             if (bundleIdentifier.endsWith(".app"))
                 bundleIdentifier.chop(4);
-            t << "@$(DEL_FILE) " << info_plist_out << "\n\t"
-              << "@sed ";
-            foreach (const ProString &arg, commonSedArgs)
-                t << arg;
-            t << "-e \"s,@ICON@," << icon.section(Option::dir_sep, -1) << ",g\" "
-              << "-e \"s,@BUNDLEIDENTIFIER@," << bundleIdentifier << ",g\" "
-              << "-e \"s,@EXECUTABLE@," << var("QMAKE_ORIG_TARGET") << ",g\" "
-              << "-e \"s,@TYPEINFO@,"<< (project->isEmpty("QMAKE_PKGINFO_TYPEINFO") ?
-                         QString::fromLatin1("????") : project->first("QMAKE_PKGINFO_TYPEINFO").left(4)) << ",g\" "
-              << "" << info_plist << " >" << info_plist_out << endl;
-            //copy the icon
-            if(!project->isEmpty("ICON")) {
-                QString dir = project->first("DESTDIR") + project->first("QMAKE_BUNDLE") + "/Contents/Resources/";
-                const QString icon_path = escapeFilePath(dir + icon.section(Option::dir_sep, -1));
-                bundledFiles << icon_path;
-                t << icon_path << ": " << icon << "\n\t"
-                  << mkdir_p_asstring(dir) << "\n\t"
-                  << "@$(DEL_FILE) " << icon_path << "\n\t"
-                  << "@$(COPY_FILE) " << escapeFilePath(icon) << " " << icon_path << endl;
+            if (bundleIdentifier.endsWith(".framework"))
+                bundleIdentifier.chop(10);
+            commonSedArgs << "-e \"s,@BUNDLEIDENTIFIER@," << bundleIdentifier << ",g\" ";
+
+            if (isApp) {
+                QString icon = fileFixify(var("ICON"));
+                t << "@$(DEL_FILE) " << info_plist_out << "\n\t"
+                  << "@sed ";
+                foreach (const ProString &arg, commonSedArgs)
+                    t << arg;
+                t << "-e \"s,@ICON@," << icon.section(Option::dir_sep, -1) << ",g\" "
+                  << "-e \"s,@EXECUTABLE@," << var("QMAKE_ORIG_TARGET") << ",g\" "
+                  << "-e \"s,@TYPEINFO@,"<< (project->isEmpty("QMAKE_PKGINFO_TYPEINFO") ?
+                             QString::fromLatin1("????") : project->first("QMAKE_PKGINFO_TYPEINFO").left(4)) << ",g\" "
+                  << "" << info_plist << " >" << info_plist_out << endl;
+                //copy the icon
+                if (!project->isEmpty("ICON")) {
+                    QString dir = bundle_dir + "Contents/Resources/";
+                    const QString icon_path = escapeFilePath(dir + icon.section(Option::dir_sep, -1));
+                    bundledFiles << icon_path;
+                    alldeps << icon_path;
+                    t << icon_path << ": " << icon << "\n\t"
+                      << mkdir_p_asstring(dir) << "\n\t"
+                      << "@$(DEL_FILE) " << icon_path << "\n\t"
+                      << "@$(COPY_FILE) " << escapeFilePath(icon) << " " << icon_path << endl;
+                }
+            } else {
+                symlinks[bundle_dir + "Resources"] = "Versions/Current/Resources";
+                t << "@$(DEL_FILE) " << info_plist_out << "\n\t"
+                  << "@sed ";
+                foreach (const ProString &arg, commonSedArgs)
+                    t << arg;
+                t << "-e \"s,@LIBRARY@," << var("QMAKE_ORIG_TARGET") << ",g\" "
+                  << "-e \"s,@TYPEINFO@,"
+                  << (project->isEmpty("QMAKE_PKGINFO_TYPEINFO") ?
+                      QString::fromLatin1("????") : project->first("QMAKE_PKGINFO_TYPEINFO").left(4)) << ",g\" "
+                  << "" << info_plist << " >" << info_plist_out << endl;
             }
-        } else {
-            t << "@$(DEL_FILE) " << info_plist_out << "\n\t"
-              << "@sed ";
-            foreach (const ProString &arg, commonSedArgs)
-                t << arg;
-            t << "-e \"s,@LIBRARY@," << var("QMAKE_ORIG_TARGET") << ",g\" "
-              << "-e \"s,@TYPEINFO@,"
-              << (project->isEmpty("QMAKE_PKGINFO_TYPEINFO") ?
-                  QString::fromLatin1("????") : project->first("QMAKE_PKGINFO_TYPEINFO").left(4)) << ",g\" "
-              << "" << info_plist << " >" << info_plist_out << endl;
-        }
+            break;
+        } // project->isActiveConfig("no_plist")
         //copy other data
         if(!project->isEmpty("QMAKE_BUNDLE_DATA")) {
-            QString bundle_dir = project->first("DESTDIR") + project->first("QMAKE_BUNDLE") + "/";
             const ProStringList &bundle_data = project->values("QMAKE_BUNDLE_DATA");
             for(int i = 0; i < bundle_data.count(); i++) {
                 const ProStringList &files = project->values(ProKey(bundle_data[i] + ".files"));
@@ -768,11 +871,12 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
                 if (!project->isEmpty(vkey)) {
                     QString version = project->first(vkey) + "/" +
                                       project->first("QMAKE_FRAMEWORK_VERSION") + "/";
-                    QString link = Option::fixPathToLocalOS(path + project->first(pkey));
-                    bundledFiles << link;
-                    t << link << ": \n\t"
-                      << mkdir_p_asstring(path) << "\n\t"
-                      << "@$(SYMLINK) " << version << project->first(pkey) << " " << path << endl;
+                    ProString name = project->first(pkey);
+                    int pos = name.indexOf('/');
+                    if (pos > 0)
+                        name = name.mid(0, pos);
+                    symlinks[Option::fixPathToLocalOS(path + name)] =
+                            project->first(vkey) + "/Current/" + name;
                     path += version;
                 }
                 path += project->first(pkey).toQString();
@@ -785,6 +889,7 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
                     src = escapeFilePath(src);
                     const QString dst = escapeFilePath(path + Option::dir_sep + fileInfo(fn).fileName());
                     bundledFiles << dst;
+                    alldeps << dst;
                     t << dst << ": " << src << "\n\t"
                       << mkdir_p_asstring(path) << "\n\t";
                     QFileInfo fi(fileInfo(fn));
@@ -797,23 +902,30 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
                 }
             }
         }
+        QHash<QString, QString>::ConstIterator symIt = symlinks.constBegin(),
+                                               symEnd = symlinks.constEnd();
+        for (; symIt != symEnd; ++symIt) {
+            bundledFiles << symIt.key();
+            alldeps << symIt.key();
+            t << symIt.key() << ":\n\t"
+              << mkdir_p_asstring(bundle_dir) << "\n\t"
+              << "@$(SYMLINK) " << symIt.value() << " " << bundle_dir << endl;
+        }
     }
 
-    ProString ddir;
-    ProString packageName(project->first("QMAKE_ORIG_TARGET"));
-    if(!project->isActiveConfig("no_dist_version"))
-        packageName += var("VERSION");
-    if (project->isEmpty("QMAKE_DISTDIR"))
-        ddir = packageName;
-    else
-        ddir = project->first("QMAKE_DISTDIR");
-
-    QString ddir_c = escapeFilePath(fileFixify((project->isEmpty("OBJECTS_DIR") ? ProString(".tmp/") :
-                                                project->first("OBJECTS_DIR")) + ddir,
-                                               Option::output_dir, Option::output_dir));
-    t << "dist: \n\t"
-      << mkdir_p_asstring(ddir_c, false) << "\n\t"
-      << "$(COPY_FILE) --parents $(SOURCES) $(DIST) " << ddir_c << Option::dir_sep << " && ";
+    t << endl << "all: " << escapeDependencyPath(deps)
+      << valGlue(escapeDependencyPaths(project->values("ALL_DEPS")), " \\\n\t\t", " \\\n\t\t", "")
+      << allDeps << endl << endl;
+
+    t << "dist: distdir FORCE\n\t";
+    t << "(cd `dirname $(DISTDIR)` && $(TAR) $(DISTNAME).tar $(DISTNAME) && $(COMPRESS) $(DISTNAME).tar)"
+         " && $(MOVE) `dirname $(DISTDIR)`" << Option::dir_sep << "$(DISTNAME).tar.gz ."
+         " && $(DEL_FILE) -r $(DISTDIR)";
+    t << endl << endl;
+
+    t << "distdir: FORCE\n\t"
+      << mkdir_p_asstring("$(DISTDIR)", false) << "\n\t"
+      << "$(COPY_FILE) --parents $(DIST) $(DISTDIR)" << Option::dir_sep << endl;
     if(!project->isEmpty("QMAKE_EXTRA_COMPILERS")) {
         const ProStringList &quc = project->values("QMAKE_EXTRA_COMPILERS");
         for (ProStringList::ConstIterator it = quc.begin(); it != quc.end(); ++it) {
@@ -822,20 +934,13 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
                 const ProStringList &val = project->values((*var_it).toKey());
                 if(val.isEmpty())
                     continue;
-                t << "$(COPY_FILE) --parents " << val.join(' ') << " " << ddir_c << Option::dir_sep << " && ";
+                t << "\t$(COPY_FILE) --parents " << val.join(' ') << " $(DISTDIR)" << Option::dir_sep << endl;
             }
         }
     }
     if(!project->isEmpty("TRANSLATIONS"))
-        t << "$(COPY_FILE) --parents " << var("TRANSLATIONS") << " " << ddir_c << Option::dir_sep << " && ";
-    t << "(cd `dirname " << ddir_c << "` && "
-      << "$(TAR) " << packageName << ".tar " << ddir << " && "
-      << "$(COMPRESS) " << packageName << ".tar) && "
-      << "$(MOVE) `dirname " << ddir_c << "`" << Option::dir_sep << packageName << ".tar.gz . && "
-      << "$(DEL_FILE) -r " << ddir_c
-      << endl << endl;
-
-    t << endl;
+        t << "\t$(COPY_FILE) --parents " << var("TRANSLATIONS") << " $(DISTDIR)" << Option::dir_sep << endl;
+    t << endl << endl;
 
     QString clean_targets = "compiler_clean " + var("CLEAN_DEPS");
     if(do_incremental) {
@@ -901,34 +1006,28 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
     t << varGlue("QMAKE_CLEAN","-$(DEL_FILE) "," ","\n\t")
       << "-$(DEL_FILE) *~ core *.core\n"
       << varGlue("CLEAN_FILES","\t-$(DEL_FILE) "," ","") << endl << endl;
-    t << "####### Sub-libraries\n\n";
-    if (!project->values("SUBLIBS").isEmpty()) {
-        ProString libdir = "tmp/";
-        if(!project->isEmpty("SUBLIBS_DIR"))
-            libdir = project->first("SUBLIBS_DIR");
-        const ProStringList &l = project->values("SUBLIBS");
-        for(it = l.begin(); it != l.end(); ++it)
-            t << libdir << project->first("QMAKE_PREFIX_STATICLIB") << (*it) << "."
-              << project->first("QMAKE_EXTENSION_STATICLIB") << ":\n\t"
-              << var(ProKey("MAKELIB" + *it)) << endl << endl;
-    }
 
     ProString destdir = project->first("DESTDIR");
     if (!destdir.isEmpty() && !destdir.endsWith(Option::dir_sep))
         destdir += Option::dir_sep;
-    t << "distclean: clean\n";
+    t << "distclean: clean " << var("DISTCLEAN_DEPS") << '\n';
     if(!project->isEmpty("QMAKE_BUNDLE")) {
         QString bundlePath = escapeFilePath(destdir + project->first("QMAKE_BUNDLE"));
         t << "\t-$(DEL_FILE) -r " << bundlePath << endl;
     } else if(project->isActiveConfig("compile_libtool")) {
         t << "\t-$(LIBTOOL) --mode=clean $(DEL_FILE) $(TARGET)\n";
-    } else if(!project->isActiveConfig("staticlib") && project->values("QMAKE_APP_FLAG").isEmpty() &&
-       !project->isActiveConfig("plugin")) {
+    } else if (project->isActiveConfig("staticlib")) {
         t << "\t-$(DEL_FILE) " << destdir << "$(TARGET) \n";
-        t << "\t-$(DEL_FILE) " << destdir << "$(TARGET0) " << destdir << "$(TARGET1) "
-          << destdir << "$(TARGET2) $(TARGETA)\n";
-    } else {
+    } else if (project->values("QMAKE_APP_FLAG").isEmpty() && !project->isActiveConfig("plugin")) {
         t << "\t-$(DEL_FILE) " << destdir << "$(TARGET) \n";
+        if (!project->isActiveConfig("unversioned_libname")) {
+            t << "\t-$(DEL_FILE) " << destdir << "$(TARGET0) " << destdir << "$(TARGET1) "
+              << destdir << "$(TARGET2) $(TARGETA)\n";
+        } else {
+            t << "\t-$(DEL_FILE) $(TARGETA)\n";
+        }
+    } else {
+        t << "\t-$(DEL_FILE) $(TARGET) \n";
     }
     t << varGlue("QMAKE_DISTCLEAN","\t-$(DEL_FILE) "," ","\n");
     {
@@ -938,9 +1037,21 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
     }
     t << endl << endl;
 
+    t << "####### Sub-libraries\n\n";
+    if (!project->values("SUBLIBS").isEmpty()) {
+        ProString libdir = "tmp/";
+        if (!project->isEmpty("SUBLIBS_DIR"))
+            libdir = project->first("SUBLIBS_DIR");
+        const ProStringList &l = project->values("SUBLIBS");
+        for (it = l.begin(); it != l.end(); ++it)
+            t << libdir << project->first("QMAKE_PREFIX_STATICLIB") << (*it) << "."
+              << project->first("QMAKE_EXTENSION_STATICLIB") << ":\n\t"
+              << var(ProKey("MAKELIB" + *it)) << endl << endl;
+    }
+
     if(doPrecompiledHeaders() && !project->isEmpty("PRECOMPILED_HEADER")) {
         QString pchInput = project->first("PRECOMPILED_HEADER").toQString();
-        t << "###### Prefix headers\n";
+        t << "###### Precompiled headers\n";
         QString comps[] = { "C", "CXX", "OBJC", "OBJCXX", QString() };
         for(int i = 0; !comps[i].isNull(); i++) {
             QString pchFlags = var(ProKey("QMAKE_" + comps[i] + "FLAGS_PRECOMPILE"));
@@ -1017,16 +1128,6 @@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
 
 void UnixMakefileGenerator::init2()
 {
-    //version handling
-    if(project->isEmpty("VERSION"))
-        project->values("VERSION").append("1.0." +
-                                               (project->isEmpty("VER_PAT") ? QString("0") :
-                                                project->first("VER_PAT")));
-    QStringList l = project->first("VERSION").toQString().split('.');
-    l << "0" << "0"; //make sure there are three
-    project->values("VER_MAJ").append(l[0]);
-    project->values("VER_MIN").append(l[1]);
-    project->values("VER_PAT").append(l[2]);
     if(project->isEmpty("QMAKE_FRAMEWORK_VERSION"))
         project->values("QMAKE_FRAMEWORK_VERSION").append(project->values("VER_MAJ").first());
 
@@ -1164,7 +1265,10 @@ void UnixMakefileGenerator::init2()
                                                             project->first("VER_MIN") +  "." +
                                                             project->first("VER_PAT"));
             }
-            project->values("TARGET") = project->values("TARGET_x.y.z");
+            if (project->isActiveConfig("unversioned_libname"))
+                project->values("TARGET") = project->values("TARGET_");
+            else
+                project->values("TARGET") = project->values("TARGET_x.y.z");
         }
         if(project->isEmpty("QMAKE_LN_SHLIB"))
             project->values("QMAKE_LN_SHLIB").append("ln -s");
@@ -1189,6 +1293,13 @@ void UnixMakefileGenerator::init2()
                     if(!instpath.endsWith(Option::dir_sep))
                         instpath += Option::dir_sep;
                     soname.prepend(instpath);
+                } else if (!project->isEmpty("QMAKE_SONAME_PREFIX")) {
+                    QString sonameprefix = project->first("QMAKE_SONAME_PREFIX").toQString();
+                    if (!sonameprefix.startsWith('@') && !sonameprefix.startsWith('$'))
+                        sonameprefix = Option::fixPathToTargetOS(sonameprefix, false);
+                    if (!sonameprefix.endsWith(Option::dir_sep))
+                        sonameprefix += Option::dir_sep;
+                    soname.prepend(sonameprefix);
                 }
                 project->values("QMAKE_LFLAGS_SONAME").first() += escapeFilePath(soname);
             }
@@ -1235,48 +1346,10 @@ void UnixMakefileGenerator::init2()
     }
 
     if (include_deps && project->isActiveConfig("gcc_MD_depends")) {
-        project->values("QMAKE_CFLAGS") += "-MD";
-        project->values("QMAKE_CXXFLAGS") += "-MD";
-    }
-
-    if(!project->isEmpty("QMAKE_BUNDLE")) {
-        QString plist = fileFixify(project->first("QMAKE_INFO_PLIST").toQString(), qmake_getpwd());
-        if(plist.isEmpty())
-            plist = specdir() + QDir::separator() + "Info.plist." + project->first("TEMPLATE");
-        if(exists(Option::fixPathToLocalOS(plist))) {
-            if(project->isEmpty("QMAKE_INFO_PLIST"))
-                project->values("QMAKE_INFO_PLIST").append(plist);
-            project->values("QMAKE_INFO_PLIST_OUT").append(project->first("DESTDIR") +
-                                                                project->first("QMAKE_BUNDLE") +
-                                                                "/Contents/Info.plist");
-            project->values("ALL_DEPS") += project->first("QMAKE_INFO_PLIST_OUT");
-            if(!project->isEmpty("ICON") && project->first("TEMPLATE") == "app")
-                project->values("ALL_DEPS") += project->first("DESTDIR") +
-                                                    project->first("QMAKE_BUNDLE") +
-                                                    "/Contents/Resources/" + project->first("ICON").toQString().section('/', -1);
-            if(!project->isEmpty("QMAKE_BUNDLE_DATA")) {
-                QString bundle_dir = project->first("DESTDIR") + project->first("QMAKE_BUNDLE") + "/";
-                ProStringList &alldeps = project->values("ALL_DEPS");
-                const ProStringList &bundle_data = project->values("QMAKE_BUNDLE_DATA");
-                for(int i = 0; i < bundle_data.count(); i++) {
-                    const ProStringList &files = project->values(ProKey(bundle_data[i] + ".files"));
-                    QString path = bundle_dir;
-                    const ProKey vkey(bundle_data[i] + ".version");
-                    const ProKey pkey(bundle_data[i] + ".path");
-                    if (!project->isEmpty(vkey)) {
-                        alldeps += Option::fixPathToLocalOS(path + Option::dir_sep + project->first(pkey));
-                        path += project->first(vkey) + "/" +
-                                project->first("QMAKE_FRAMEWORK_VERSION") + "/";
-                    }
-                    path += project->first(pkey);
-                    path = Option::fixPathToLocalOS(path);
-                    for(int file = 0; file < files.count(); file++)
-                        alldeps += path + Option::dir_sep + fileInfo(files[file].toQString()).fileName();
-                }
-            }
-        } else {
-            warn_msg(WarnLogic, "Could not resolve Info.plist: '%s'. Check if QMAKE_INFO_PLIST points to a valid file.", plist.toLatin1().constData());
-        }
+        // use -MMD if we know about -isystem too
+        ProString MD_flag(project->values("QMAKE_CFLAGS_ISYSTEM").isEmpty() ? "-MD" : "-MMD");
+        project->values("QMAKE_CFLAGS") += MD_flag;
+        project->values("QMAKE_CXXFLAGS") += MD_flag;
     }
 }
 
@@ -1318,7 +1391,7 @@ UnixMakefileGenerator::writeLibtoolFile()
     t << "# " << lname << " - a libtool library file\n";
     t << "# Generated by qmake/libtool (" QMAKE_VERSION_STR ") (Qt "
       << QT_VERSION_STR << ") on: " << QDateTime::currentDateTime().toString();
-	t << "\n";
+    t << "\n";
 
     t << "# The name that we can dlopen(3).\n"
       << "dlname='" << var(project->isActiveConfig("plugin") ? "TARGET" : "TARGET_x")
diff --git a/qmake/generators/win32/cesdkhandler.cpp b/qmake/generators/win32/cesdkhandler.cpp
index 50b190a935..f2e6758704 100644
--- a/qmake/generators/win32/cesdkhandler.cpp
+++ b/qmake/generators/win32/cesdkhandler.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the tools applications of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -105,7 +97,7 @@ bool CeSdkHandler::parse()
         return false;
     }
 
-    return m_list.size() > 0 ? true : false;
+    return m_list.size() > 0;
 }
 
 QString CeSdkHandler::fixPaths(QString path) const
diff --git a/qmake/generators/win32/cesdkhandler.h b/qmake/generators/win32/cesdkhandler.h
index e26eddb8fc..d3894087b2 100644
--- a/qmake/generators/win32/cesdkhandler.h
+++ b/qmake/generators/win32/cesdkhandler.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the tools applications of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/generators/win32/mingw_make.cpp b/qmake/generators/win32/mingw_make.cpp
index 29b27cb7d7..f2d6678cdf 100644
--- a/qmake/generators/win32/mingw_make.cpp
+++ b/qmake/generators/win32/mingw_make.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -101,7 +93,7 @@ bool MingwMakefileGenerator::findLibraries()
             }
             if (!out.isEmpty()) // We assume if it never finds it that its correct
                 (*it) = out;
-	    } else if((*it).startsWith("-L")) {
+        } else if ((*it).startsWith("-L")) {
             dirs.append(QMakeLocalFileName((*it).mid(2).toQString()));
         }
 
@@ -159,7 +151,7 @@ void createLdObjectScriptFile(const QString &fileName, const ProStringList &objL
                 t << path << endl;
         }
         t << ");\n";
-	t.flush();
+        t.flush();
         file.close();
     }
 }
@@ -175,7 +167,7 @@ void createArObjectScriptFile(const QString &fileName, const QString &target, co
             t << "ADDMOD " << *it << endl;
         }
         t << "SAVE\n";
-	t.flush();
+        t.flush();
         file.close();
     }
 }
@@ -204,16 +196,16 @@ void MingwMakefileGenerator::writeMingwParts(QTextStream &t)
 
     if (!preCompHeaderOut.isEmpty()) {
         QString header = project->first("PRECOMPILED_HEADER").toQString();
-	QString cHeader = preCompHeaderOut + Option::dir_sep + "c";
-	t << escapeDependencyPath(cHeader) << ": " << escapeDependencyPath(header) << " "
+        QString cHeader = preCompHeaderOut + Option::dir_sep + "c";
+        t << escapeDependencyPath(cHeader) << ": " << escapeDependencyPath(header) << " "
           << escapeDependencyPaths(findDependencies(header)).join(" \\\n\t\t")
-	  << "\n\t" << mkdir_p_asstring(preCompHeaderOut)
+          << "\n\t" << mkdir_p_asstring(preCompHeaderOut)
           << "\n\t$(CC) -x c-header -c $(CFLAGS) $(INCPATH) -o " << cHeader << " " << header
           << endl << endl;
-	QString cppHeader = preCompHeaderOut + Option::dir_sep + "c++";
-	t << escapeDependencyPath(cppHeader) << ": " << escapeDependencyPath(header) << " "
+        QString cppHeader = preCompHeaderOut + Option::dir_sep + "c++";
+        t << escapeDependencyPath(cppHeader) << ": " << escapeDependencyPath(header) << " "
           << escapeDependencyPaths(findDependencies(header)).join(" \\\n\t\t")
-	  << "\n\t" << mkdir_p_asstring(preCompHeaderOut)
+          << "\n\t" << mkdir_p_asstring(preCompHeaderOut)
           << "\n\t$(CXX) -x c++-header -c $(CXXFLAGS) $(INCPATH) -o " << cppHeader << " " << header
           << endl << endl;
     }
@@ -269,7 +261,7 @@ void MingwMakefileGenerator::init()
             destDir = Option::fixPathToTargetOS(project->first("DESTDIR") + Option::dir_sep, false, false);
         project->values("MINGW_IMPORT_LIB").prepend(destDir + "lib" + project->first("TARGET")
                                                          + project->first("TARGET_VERSION_EXT") + ".a");
-	project->values("QMAKE_LFLAGS").append(QString("-Wl,--out-implib,") + project->first("MINGW_IMPORT_LIB"));
+        project->values("QMAKE_LFLAGS").append(QString("-Wl,--out-implib,") + project->first("MINGW_IMPORT_LIB"));
     }
 
     if (!project->values("DEF_FILE").isEmpty()) {
@@ -287,21 +279,21 @@ void MingwMakefileGenerator::init()
         && project->isActiveConfig("precompile_header")) {
         QString preCompHeader = var("PRECOMPILED_DIR")
                     + QFileInfo(project->first("PRECOMPILED_HEADER").toQString()).fileName();
-	preCompHeaderOut = preCompHeader + ".gch";
-	project->values("QMAKE_CLEAN").append(preCompHeaderOut + Option::dir_sep + "c");
-	project->values("QMAKE_CLEAN").append(preCompHeaderOut + Option::dir_sep + "c++");
+        preCompHeaderOut = preCompHeader + ".gch";
+        project->values("QMAKE_CLEAN").append(preCompHeaderOut + Option::dir_sep + "c");
+        project->values("QMAKE_CLEAN").append(preCompHeaderOut + Option::dir_sep + "c++");
 
-	project->values("QMAKE_RUN_CC").clear();
-	project->values("QMAKE_RUN_CC").append("$(CC) -c -include " + preCompHeader +
+        project->values("QMAKE_RUN_CC").clear();
+        project->values("QMAKE_RUN_CC").append("$(CC) -c -include " + preCompHeader +
                                                     " $(CFLAGS) $(INCPATH) " + var("QMAKE_CC_O_FLAG") + "$obj $src");
         project->values("QMAKE_RUN_CC_IMP").clear();
-	project->values("QMAKE_RUN_CC_IMP").append("$(CC)  -c -include " + preCompHeader +
+        project->values("QMAKE_RUN_CC_IMP").append("$(CC)  -c -include " + preCompHeader +
                                                         " $(CFLAGS) $(INCPATH) " + var("QMAKE_CC_O_FLAG") + "$@ $<");
         project->values("QMAKE_RUN_CXX").clear();
-	project->values("QMAKE_RUN_CXX").append("$(CXX) -c -include " + preCompHeader +
+        project->values("QMAKE_RUN_CXX").append("$(CXX) -c -include " + preCompHeader +
                                                      " $(CXXFLAGS) $(INCPATH) " + var("QMAKE_CC_O_FLAG") + "$obj $src");
         project->values("QMAKE_RUN_CXX_IMP").clear();
-	project->values("QMAKE_RUN_CXX_IMP").append("$(CXX) -c -include " + preCompHeader +
+        project->values("QMAKE_RUN_CXX_IMP").append("$(CXX) -c -include " + preCompHeader +
                                                          " $(CXXFLAGS) $(INCPATH) " + var("QMAKE_CC_O_FLAG") + "$@ $<");
     }
 
@@ -314,22 +306,20 @@ void MingwMakefileGenerator::writeIncPart(QTextStream &t)
 {
     t << "INCPATH       = ";
 
-    if (!project->isActiveConfig("no_include_pwd")) {
-        QString pwd = escapeFilePath(fileFixify(qmake_getpwd()));
-        if (pwd.isEmpty())
-            pwd = ".";
-        t << "-I" << pwd << " ";
-    }
-
+    QString isystem = var("QMAKE_CFLAGS_ISYSTEM");
     const ProStringList &incs = project->values("INCLUDEPATH");
     for (ProStringList::ConstIterator incit = incs.begin(); incit != incs.end(); ++incit) {
         QString inc = (*incit).toQString();
         inc.replace(QRegExp("\\\\$"), "");
         inc.replace(QRegExp("\""), "");
-        t << "-I" << quote << inc << quote << " ";
+
+        if (!isystem.isEmpty() && isSystemInclude(inc))
+            t << isystem << ' ';
+        else
+            t << "-I";
+        t << quote << inc << quote << " ";
     }
-    t << "-I" << quote << specdir() << quote
-      << endl;
+    t << endl;
 }
 
 void MingwMakefileGenerator::writeLibsPart(QTextStream &t)
@@ -350,10 +340,10 @@ void MingwMakefileGenerator::writeObjectsPart(QTextStream &t)
     if (project->values("OBJECTS").count() < var("QMAKE_LINK_OBJECT_MAX").toInt()) {
         objectsLinkLine = "$(OBJECTS)";
     } else if (project->isActiveConfig("staticlib") && project->first("TEMPLATE") == "lib") {
-	QString ar_script_file = var("QMAKE_LINK_OBJECT_SCRIPT") + "." + var("TARGET");
-	if (!var("BUILD_NAME").isEmpty()) {
-	    ar_script_file += "." + var("BUILD_NAME");
-	}
+        QString ar_script_file = var("QMAKE_LINK_OBJECT_SCRIPT") + "." + var("TARGET");
+        if (!var("BUILD_NAME").isEmpty()) {
+            ar_script_file += "." + var("BUILD_NAME");
+        }
         // QMAKE_LIB is used for win32, including mingw, whereas QMAKE_AR is used on Unix.
         if (project->isActiveConfig("rvct_linker")) {
             createRvctObjectScriptFile(ar_script_file, project->values("OBJECTS"));
@@ -371,9 +361,9 @@ void MingwMakefileGenerator::writeObjectsPart(QTextStream &t)
         }
     } else {
         QString ld_script_file = var("QMAKE_LINK_OBJECT_SCRIPT") + "." + var("TARGET");
-	if (!var("BUILD_NAME").isEmpty()) {
-	    ld_script_file += "." + var("BUILD_NAME");
-	}
+        if (!var("BUILD_NAME").isEmpty()) {
+            ld_script_file += "." + var("BUILD_NAME");
+        }
         if (project->isActiveConfig("rvct_linker")) {
             createRvctObjectScriptFile(ld_script_file, project->values("OBJECTS"));
             objectsLinkLine = QString::fromLatin1("--via ") + escapeFilePath(ld_script_file);
@@ -393,7 +383,7 @@ void MingwMakefileGenerator::writeBuildRulesPart(QTextStream &t)
     if(!project->isEmpty("QMAKE_PRE_LINK"))
         t << "\n\t" <<var("QMAKE_PRE_LINK");
     if(project->isActiveConfig("staticlib") && project->first("TEMPLATE") == "lib") {
-	if (project->values("OBJECTS").count() < var("QMAKE_LINK_OBJECT_MAX").toInt()) {
+        if (project->values("OBJECTS").count() < var("QMAKE_LINK_OBJECT_MAX").toInt()) {
             t << "\n\t$(LIB) $(DESTDIR_TARGET) " << objectsLinkLine << " " ;
         } else {
             t << "\n\t" << objectsLinkLine << " " ;
diff --git a/qmake/generators/win32/mingw_make.h b/qmake/generators/win32/mingw_make.h
index 0e1267994e..2442ea852b 100644
--- a/qmake/generators/win32/mingw_make.h
+++ b/qmake/generators/win32/mingw_make.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/generators/win32/msbuild_objectmodel.cpp b/qmake/generators/win32/msbuild_objectmodel.cpp
index fdb664f3f4..2f98eae075 100644
--- a/qmake/generators/win32/msbuild_objectmodel.cpp
+++ b/qmake/generators/win32/msbuild_objectmodel.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -54,6 +46,7 @@ QT_BEGIN_NAMESPACE
 const char _CLCompile[]                         = "ClCompile";
 const char _ItemGroup[]                         = "ItemGroup";
 const char _Link[]                              = "Link";
+const char _Lib[]                               = "Lib";
 const char _ManifestTool[]                      = "ManifestTool";
 const char _Midl[]                              = "Midl";
 const char _ResourceCompile[]                   = "ResourceCompile";
@@ -349,8 +342,9 @@ static QStringList unquote(const QStringList &values)
 }
 
 // Tree file generation ---------------------------------------------
-void XTreeNode::generateXML(XmlOutput &xml, XmlOutput &xmlFilter, const QString &tagName, VCProject &tool, const QString &filter) {
-
+void XTreeNode::generateXML(XmlOutput &xml, XmlOutput &xmlFilter, const QString &tagName,
+                            VCProject &tool, const QString &filter)
+{
     if (children.size()) {
         // Filter
         QString tempFilterName;
@@ -394,7 +388,9 @@ void XTreeNode::generateXML(XmlOutput &xml, XmlOutput &xmlFilter, const QString
 }
 
 // Flat file generation ---------------------------------------------
-void XFlatNode::generateXML(XmlOutput &xml, XmlOutput &xmlFilter, const QString &/*tagName*/, VCProject &tool, const QString &filter) {
+void XFlatNode::generateXML(XmlOutput &xml, XmlOutput &xmlFilter, const QString &/*tagName*/,
+                            VCProject &tool, const QString &filter)
+{
     if (children.size()) {
         ChildrenMapFlat::ConstIterator it = children.constBegin();
         ChildrenMapFlat::ConstIterator end = children.constEnd();
@@ -480,7 +476,11 @@ void VCXProjectWriter::write(XmlOutput &xml, VCProjectSingleConfig &tool)
             << attrTag("Condition", condition)
             << valueTag(tool.Configuration.PrimaryOutput);
     }
-
+    if (!tool.Configuration.PrimaryOutputExtension.isEmpty()) {
+        xml<< tag("TargetExt")
+            << attrTag("Condition", condition)
+            << valueTag(tool.Configuration.PrimaryOutputExtension);
+    }
     if ( tool.Configuration.linker.IgnoreImportLibrary != unset) {
         xml<< tag("IgnoreImportLibrary")
             << attrTag("Condition", condition)
@@ -614,12 +614,18 @@ void VCXProjectWriter::write(XmlOutput &xml, VCProject &tool)
         << tag("ItemGroup")
         << attrTag("Label", "ProjectConfigurations");
 
+    bool isWinRT = false;
+    bool isWinPhone = false;
+    bool isWinPhone80 = false; // ### Windows Phone 8.0, remove in Qt 5.4
     for (int i = 0; i < tool.SingleProjects.count(); ++i) {
         xml << tag("ProjectConfiguration")
             << attrTag("Include" , tool.SingleProjects.at(i).Configuration.Name)
             << tagValue("Configuration", tool.SingleProjects.at(i).Configuration.ConfigurationName)
             << tagValue("Platform", tool.SingleProjects.at(i).PlatformName)
             << closetag();
+        isWinRT = isWinRT || tool.SingleProjects.at(i).Configuration.WinRT;
+        isWinPhone = isWinPhone = tool.SingleProjects.at(i).Configuration.WinPhone;
+        isWinPhone80 = isWinPhone80 || tool.SingleProjects.at(i).Configuration.WinPhone80;
     }
 
     xml << closetag()
@@ -629,18 +635,20 @@ void VCXProjectWriter::write(XmlOutput &xml, VCProject &tool)
         << tagValue("RootNamespace", tool.Name)
         << tagValue("Keyword", tool.Keyword);
 
-    if (tool.SingleProjects.at(0).Configuration.WinRT) {
-        xml << tagValue("MinimumVisualStudioVersion", "11.0");
-        if (tool.SingleProjects.at(0).Configuration.WinPhone)
+    if (isWinRT) {
+        xml << tagValue("MinimumVisualStudioVersion", tool.Version)
+            << tagValue("DefaultLanguage", "en");
+        if (isWinPhone80) {
             xml << tagValue("WinMDAssembly", "true");
-        else
-            xml << tagValue("AppContainerApplication", "true");
-    }
-
-    if (tool.SingleProjects.at(0).Configuration.WinPhone
-            && tool.SingleProjects.at(0).Configuration.ConfigurationType == typeApplication) {
-        xml << tagValue("XapOutputs", "true");
-        xml << tagValue("XapFilename", "$(RootNamespace)_$(Configuration)_$(Platform).xap");
+            if (tool.SingleProjects.at(0).Configuration.ConfigurationType == typeApplication) {
+                xml << tagValue("XapOutputs", "true");
+                xml << tagValue("XapFilename", "$(RootNamespace)_$(Configuration)_$(Platform).xap");
+            }
+        } else {
+            xml << tagValue("AppContainerApplication", "true")
+                << tagValue("ApplicationType", isWinPhone ? "Windows Phone" : "Windows Store")
+                << tagValue("ApplicationTypeRevision", tool.SdkVersion);
+        }
     }
 
     xml << closetag();
@@ -694,7 +702,11 @@ void VCXProjectWriter::write(XmlOutput &xml, VCProject &tool)
                 << attrTag("Condition", condition)
                 << valueTag(config.PrimaryOutput);
         }
-
+        if (!config.PrimaryOutputExtension.isEmpty()) {
+            xml << tag("TargetExt")
+                << attrTag("Condition", condition)
+                << valueTag(config.PrimaryOutputExtension);
+        }
         if (config.linker.IgnoreImportLibrary != unset) {
             xml << tag("IgnoreImportLibrary")
                 << attrTag("Condition", condition)
@@ -747,8 +759,11 @@ void VCXProjectWriter::write(XmlOutput &xml, VCProject &tool)
         // ClCompile
         write(xml, config.compiler);
 
-        // Link
-        write(xml, config.linker);
+        // Librarian / Linker
+        if (config.ConfigurationType == typeStaticLibrary)
+            write(xml, config.librarian);
+        else
+            write(xml, config.linker);
 
         // Midl
         write(xml, config.idl);
@@ -769,6 +784,10 @@ void VCXProjectWriter::write(XmlOutput &xml, VCProject &tool)
             write(xml, config.preLink);
 
         xml << closetag();
+
+        // windeployqt
+        if (!config.windeployqt.ExcludedFromBuild)
+            write(xml, config.windeployqt);
     }
 
     // The file filters are added in a separate file for MSBUILD.
@@ -814,7 +833,7 @@ void VCXProjectWriter::write(XmlOutput &xml, VCProject &tool)
     }
     outputFilter(tool, xml, xmlFilter, "Root Files");
 
-    if (tool.SingleProjects.at(0).Configuration.WinPhone) {
+    if (isWinPhone80) {
         xml << tag("ItemGroup")
               << tag("Reference")
                 << attrTag("Include", "platform")
@@ -824,9 +843,43 @@ void VCXProjectWriter::write(XmlOutput &xml, VCProject &tool)
             << closetag();
     }
 
+    // App manifest
+    if (isWinRT) {
+        QString manifest = isWinPhone80 ? QStringLiteral("WMAppManifest.xml") : QStringLiteral("Package.appxmanifest");
+
+        // Find all icons referenced in the manifest
+        QSet<QString> icons;
+        QFile manifestFile(Option::output_dir + QLatin1Char('/') + manifest);
+        if (manifestFile.open(QFile::ReadOnly)) {
+            const QString contents = manifestFile.readAll();
+            QRegExp regexp("[\\\\/a-zA-Z0-9_\\-\\!]*\\.(png|jpg|jpeg)");
+            int pos = 0;
+            while (pos > -1) {
+                pos = regexp.indexIn(contents, pos);
+                if (pos >= 0) {
+                    const QString match = regexp.cap(0);
+                    icons.insert(match);
+                    pos += match.length();
+                }
+            }
+        }
+
+        // Write out manifest + icons as content items
+        xml << tag(_ItemGroup)
+            << tag(isWinPhone80 ? "Xml" : "AppxManifest")
+            << attrTag("Include", manifest)
+            << closetag();
+        foreach (const QString &icon, icons) {
+            xml << tag("Image")
+                << attrTag("Include", icon)
+                << closetag();
+        }
+        xml << closetag();
+    }
+
     xml << import("Project", "$(VCTargetsPath)\\Microsoft.Cpp.targets");
 
-    if (tool.SingleProjects.at(0).Configuration.WinPhone)
+    if (isWinPhone80)
         xml << import("Project", "$(MSBuildExtensionsPath)\\Microsoft\\WindowsPhone\\v8.0\\Microsoft.Cpp.WindowsPhone.8.0.targets");
 
     xml << tag("ImportGroup")
@@ -1638,7 +1691,7 @@ void VCXProjectWriter::write(XmlOutput &xml, const VCCustomBuildTool &tool)
 void VCXProjectWriter::write(XmlOutput &xml, const VCLibrarianTool &tool)
 {
     xml
-        << tag(_Link)
+        << tag(_Lib)
             << attrTagX(_AdditionalDependencies, tool.AdditionalDependencies, ";")
             << attrTagX(_AdditionalLibraryDirectories, tool.AdditionalLibraryDirectories, ";")
             << attrTagX(_AdditionalOptions, tool.AdditionalOptions, " ")
@@ -1658,7 +1711,7 @@ void VCXProjectWriter::write(XmlOutput &xml, const VCLibrarianTool &tool)
 //unused    << attrTagS(_TargetMachine, tool.TargetMachine)
 //unused    << attrTagT(_TreatLibWarningAsErrors, tool.TreatLibWarningAsErrors)
 //unused    << attrTagT(_Verbose, tool.Verbose)
-        << closetag(_Link);
+        << closetag(_Lib);
 }
 
 void VCXProjectWriter::write(XmlOutput &xml, const VCResourceCompilerTool &tool)
@@ -1695,13 +1748,48 @@ void VCXProjectWriter::write(XmlOutput &xml, const VCDeploymentTool &tool)
     // SmartDevice deployment not supported in VS 2010
 }
 
+void VCXProjectWriter::write(XmlOutput &xml, const VCWinDeployQtTool &tool)
+{
+    const QString name = QStringLiteral("WinDeployQt_") + tool.config->Name;
+    xml << tag("Target")
+           << attrTag(_Name, name)
+           << attrTag("Condition", generateCondition(*tool.config))
+           << attrTag("Inputs", "$(OutDir)\\$(TargetName).exe")
+           << attrTag("Outputs", tool.Record)
+           << tag(_Message)
+              << attrTag("Text", tool.CommandLine)
+           << closetag()
+           << tag("Exec")
+             << attrTag("Command", tool.CommandLine)
+           << closetag()
+        << closetag()
+        << tag("Target")
+           << attrTag(_Name, QStringLiteral("PopulateWinDeployQtItems_") + tool.config->Name)
+           << attrTag("Condition", generateCondition(*tool.config))
+           << attrTag("AfterTargets", "Link")
+           << attrTag("DependsOnTargets", name)
+           << tag("ReadLinesFromFile")
+              << attrTag("File", tool.Record)
+              << tag("Output")
+                 << attrTag("TaskParameter", "Lines")
+                 << attrTag("ItemName", "DeploymentItems")
+              << closetag()
+           << closetag()
+           << tag(_ItemGroup)
+              << tag("None")
+                 << attrTag("Include", "@(DeploymentItems)")
+                 << attrTagT("DeploymentContent", _True)
+              << closetag()
+           << closetag()
+        << closetag();
+}
+
 void VCXProjectWriter::write(XmlOutput &xml, const VCConfiguration &tool)
 {
         xml << tag("PropertyGroup")
             << attrTag("Condition", generateCondition(tool))
             << attrTag("Label", "Configuration")
-            << attrTagS(_PlatformToolSet, platformToolSetVersion(tool.CompilerVersion,
-                                                                 tool.WinPhone))
+            << attrTagS(_PlatformToolSet, tool.PlatformToolSet)
             << attrTagS(_OutputDirectory, tool.OutputDirectory)
             << attrTagT(_ATLMinimizesCRunTimeLibraryUsage, tool.ATLMinimizesCRunTimeLibraryUsage)
             << attrTagT(_BuildBrowserInformation, tool.BuildBrowserInformation)
@@ -1732,31 +1820,7 @@ void VCXProjectWriter::addFilters(VCProject &project, XmlOutput &xmlFilter, cons
     bool added = false;
 
     for (int i = 0; i < project.SingleProjects.count(); ++i) {
-        VCFilter filter;
-        const VCProjectSingleConfig &singleCfg = project.SingleProjects.at(i);
-        if (filtername == "Root Files") {
-            filter = singleCfg.RootFiles;
-        } else if (filtername == "Source Files") {
-            filter = singleCfg.SourceFiles;
-        } else if (filtername == "Header Files") {
-            filter = singleCfg.HeaderFiles;
-        } else if (filtername == "Generated Files") {
-            filter = singleCfg.GeneratedFiles;
-        } else if (filtername == "LexYacc Files") {
-            filter = singleCfg.LexYaccFiles;
-        } else if (filtername == "Translation Files") {
-            filter = singleCfg.TranslationFiles;
-        } else if (filtername == "Form Files") {
-            filter = singleCfg.FormFiles;
-        } else if (filtername == "Resource Files") {
-            filter = singleCfg.ResourceFiles;
-        } else if (filtername == "Deployment Files") {
-            filter = singleCfg.DeploymentFiles;
-        } else {
-            // ExtraCompilers
-            filter = project.SingleProjects[i].filterForExtraCompiler(filtername);
-        }
-
+        const VCFilter filter = project.SingleProjects.at(i).filterByName(filtername);
         if(!filter.Files.isEmpty() && !added) {
             xmlFilter << tag("Filter")
                       << attrTag("Include", filtername)
@@ -1778,31 +1842,7 @@ void VCXProjectWriter::outputFilter(VCProject &project, XmlOutput &xml, XmlOutpu
         root.reset(new XTreeNode);
 
     for (int i = 0; i < project.SingleProjects.count(); ++i) {
-        VCFilter filter;
-        const VCProjectSingleConfig &singleCfg = project.SingleProjects.at(i);
-        if (filtername == "Root Files") {
-            filter = singleCfg.RootFiles;
-        } else if (filtername == "Source Files") {
-            filter = singleCfg.SourceFiles;
-        } else if (filtername == "Header Files") {
-            filter = singleCfg.HeaderFiles;
-        } else if (filtername == "Generated Files") {
-            filter = singleCfg.GeneratedFiles;
-        } else if (filtername == "LexYacc Files") {
-            filter = singleCfg.LexYaccFiles;
-        } else if (filtername == "Translation Files") {
-            filter = singleCfg.TranslationFiles;
-        } else if (filtername == "Form Files") {
-            filter = singleCfg.FormFiles;
-        } else if (filtername == "Resource Files") {
-            filter = singleCfg.ResourceFiles;
-        } else if (filtername == "Deployment Files") {
-            filter = singleCfg.DeploymentFiles;
-        } else {
-            // ExtraCompilers
-            filter = project.SingleProjects[i].filterForExtraCompiler(filtername);
-        }
-
+        const VCFilter filter = project.SingleProjects.at(i).filterByName(filtername);
         // Merge all files in this filter to root tree
         for (int x = 0; x < filter.Files.count(); ++x)
             root->addElement(filter.Files.at(x));
@@ -1814,273 +1854,117 @@ void VCXProjectWriter::outputFilter(VCProject &project, XmlOutput &xml, XmlOutpu
     root->generateXML(xml, xmlFilter, "", project, filtername); // output root tree
 }
 
+static QString stringBeforeFirstBackslash(const QString &str)
+{
+    int idx = str.indexOf(QLatin1Char('\\'));
+    return idx == -1 ? str : str.left(idx);
+}
+
 // Output all configurations (by filtername) for a file (by info)
 // A filters config output is in VCFilter.outputFileConfig()
-void VCXProjectWriter::outputFileConfigs(VCProject &project, XmlOutput &xml, XmlOutput &xmlFilter, const VCFilterFile &info, const QString &filtername)
+void VCXProjectWriter::outputFileConfigs(VCProject &project, XmlOutput &xml, XmlOutput &xmlFilter,
+                                         const VCFilterFile &info, const QString &filtername)
 {
+    // In non-flat mode the filter names have directory suffixes, e.g. "Generated Files\subdir".
+    const QString cleanFilterName = stringBeforeFirstBackslash(filtername);
+
     // We need to check if the file has any custom build step.
     // If there is one then it has to be included with "CustomBuild Include"
-    bool fileAdded = false;
+    bool hasCustomBuildStep = false;
+    QVarLengthArray<OutputFilterData> data(project.SingleProjects.count());
+    for (int i = 0; i < project.SingleProjects.count(); ++i) {
+        data[i].filter = project.SingleProjects.at(i).filterByName(cleanFilterName);
+        if (!data[i].filter.Config) // only if the filter is not empty
+            continue;
+        VCFilter &filter = data[i].filter;
+
+        // Clearing each filter tool
+        filter.useCustomBuildTool = false;
+        filter.useCompilerTool = false;
+        filter.CustomBuildTool = VCCustomBuildTool();
+        filter.CustomBuildTool.config = filter.Config;
+        filter.CompilerTool = VCCLCompilerTool();
+        filter.CompilerTool.config = filter.Config;
+
+        VCFilterFile fileInFilter = filter.findFile(info.file, &data[i].inBuild);
+        data[i].info = fileInFilter;
+        data[i].inBuild &= !fileInFilter.excludeFromBuild;
+        if (data[i].inBuild && filter.addExtraCompiler(fileInFilter))
+            hasCustomBuildStep = true;
+    }
 
+    bool fileAdded = false;
     for (int i = 0; i < project.SingleProjects.count(); ++i) {
-        VCFilter filter;
-        const VCProjectSingleConfig &singleCfg = project.SingleProjects.at(i);
-        if (filtername.startsWith("Root Files")) {
-            filter = singleCfg.RootFiles;
-        } else if (filtername.startsWith("Source Files")) {
-            filter = singleCfg.SourceFiles;
-        } else if (filtername.startsWith("Header Files")) {
-            filter = singleCfg.HeaderFiles;
-        } else if (filtername.startsWith("Generated Files")) {
-            filter = singleCfg.GeneratedFiles;
-        } else if (filtername.startsWith("LexYacc Files")) {
-            filter = singleCfg.LexYaccFiles;
-        } else if (filtername.startsWith("Translation Files")) {
-            filter = singleCfg.TranslationFiles;
-        } else if (filtername.startsWith("Form Files")) {
-            filter = singleCfg.FormFiles;
-        } else if (filtername.startsWith("Resource Files")) {
-            filter = singleCfg.ResourceFiles;
-        } else if (filtername.startsWith("Deployment Files")) {
-            filter = singleCfg.DeploymentFiles;
-        } else {
-            // ExtraCompilers
-            filter = project.SingleProjects[i].filterForExtraCompiler(filtername);
+        OutputFilterData *d = &data[i];
+        if (!d->filter.Config) // only if the filter is not empty
+            continue;
+        if (outputFileConfig(d, xml, xmlFilter, info.file, filtername, fileAdded,
+                             hasCustomBuildStep)) {
+            fileAdded = true;
         }
-
-        if (filter.Config) // only if the filter is not empty
-            if (outputFileConfig(filter, xml, xmlFilter, info.file, filtername, fileAdded)) // only add it once.
-                fileAdded = true;
     }
 
     if ( !fileAdded )
-    {
-        if (filtername.startsWith("Source Files")) {
-
-            xmlFilter << tag("ClCompile")
-                      << attrTag("Include",Option::fixPathToLocalOS(info.file))
-                      << attrTagS("Filter", filtername);
-
-            xml << tag("ClCompile")
-                << attrTag("Include",Option::fixPathToLocalOS(info.file));
-
-        } else if(filtername.startsWith("Header Files")) {
-
-            xmlFilter << tag("ClInclude")
-                << attrTag("Include",Option::fixPathToLocalOS(info.file))
-                << attrTagS("Filter", filtername);
-
-            xml << tag("ClInclude")
-                << attrTag("Include",Option::fixPathToLocalOS(info.file));
-        } else if(filtername.startsWith("Generated Files") || filtername.startsWith("Form Files")) {
-
-            if (info.file.endsWith(".h")) {
-
-                xmlFilter << tag("ClInclude")
-                          << attrTag("Include",Option::fixPathToLocalOS(info.file))
-                          << attrTagS("Filter", filtername);
-
-                xml << tag("ClInclude")
-                    << attrTag("Include",Option::fixPathToLocalOS(info.file));
-            } else if(info.file.endsWith(".cpp")) {
-
-                xmlFilter << tag("ClCompile")
-                          << attrTag("Include",Option::fixPathToLocalOS(info.file))
-                          << attrTagS("Filter", filtername);
-
-                xml << tag("ClCompile")
-                    << attrTag("Include",Option::fixPathToLocalOS(info.file));
-            } else if(info.file.endsWith(".res")) {
-
-                    xmlFilter << tag("CustomBuild")
-                              << attrTag("Include",Option::fixPathToLocalOS(info.file))
-                              << attrTagS("Filter", filtername);
-
-                    xml << tag("CustomBuild")
-                        << attrTag("Include",Option::fixPathToLocalOS(info.file));
-            } else {
-
-                xmlFilter << tag("CustomBuild")
-                          << attrTag("Include",Option::fixPathToLocalOS(info.file))
-                          << attrTagS("Filter", filtername);
-
-                xml << tag("CustomBuild")
-                    << attrTag("Include",Option::fixPathToLocalOS(info.file));
-            }
-
-        } else if(filtername.startsWith("Root Files")) {
-
-            if (info.file.endsWith(".rc")) {
-
-                xmlFilter << tag("ResourceCompile")
-                          << attrTag("Include",Option::fixPathToLocalOS(info.file));
-
-                xml << tag("ResourceCompile")
-                    << attrTag("Include",Option::fixPathToLocalOS(info.file));
-            }
-        } else {
-
-            xmlFilter << tag("None")
-                      << attrTag("Include",Option::fixPathToLocalOS(info.file))
-                      << attrTagS("Filter", filtername);
-
-                xml << tag("None")
-                    << attrTag("Include",Option::fixPathToLocalOS(info.file));
-        }
-    }
+        outputFileConfig(xml, xmlFilter, info.file, filtername);
 
     xml << closetag();
     xmlFilter << closetag();
 }
 
-bool VCXProjectWriter::outputFileConfig(VCFilter &filter, XmlOutput &xml, XmlOutput &xmlFilter, const QString &filename, const QString &filtername, bool fileAllreadyAdded)
+bool VCXProjectWriter::outputFileConfig(OutputFilterData *d, XmlOutput &xml, XmlOutput &xmlFilter,
+                                        const QString &filename, const QString &fullFilterName,
+                                        bool fileAdded, bool hasCustomBuildStep)
 {
-    bool fileAdded = false;
-
-    // Clearing each filter tool
-    filter.useCustomBuildTool = false;
-    filter.useCompilerTool = false;
-    filter.CustomBuildTool = VCCustomBuildTool();
-    filter.CompilerTool = VCCLCompilerTool();
-
-    // Unset some default options
-    filter.CustomBuildTool.config = filter.Config;
-    filter.CompilerTool.BufferSecurityCheck = unset;
-    filter.CompilerTool.DebugInformationFormat = debugUnknown;
-    filter.CompilerTool.ExceptionHandling = ehDefault;
-    filter.CompilerTool.ProgramDataBaseFileName.clear();
-    filter.CompilerTool.RuntimeLibrary = rtUnknown;
-    filter.CompilerTool.config = filter.Config;
-
-    bool inBuild = false;
-    VCFilterFile info;
-    for (int i = 0; i < filter.Files.count(); ++i) {
-        if (filter.Files.at(i).file == filename) {
-            info = filter.Files.at(i);
-            inBuild = true;
-        }
-    }
-    inBuild &= !info.excludeFromBuild;
-
-    if (inBuild) {
-        filter.addExtraCompiler(info);
+    VCFilter &filter = d->filter;
+    if (d->inBuild) {
         if (filter.Project->usePCH)
-            filter.modifyPCHstage(info.file);
+            filter.modifyPCHstage(filename);
     } else {
         // Excluded files uses an empty compiler stage
-        if(info.excludeFromBuild)
+        if (d->info.excludeFromBuild)
             filter.useCompilerTool = true;
     }
 
     // Actual XML output ----------------------------------
-    if (filter.useCustomBuildTool || filter.useCompilerTool
-            || !inBuild || filtername.startsWith("Deployment Files")) {
+    if (hasCustomBuildStep || filter.useCustomBuildTool || filter.useCompilerTool
+            || !d->inBuild || filter.Name.startsWith("Deployment Files")) {
 
-        if (filter.useCustomBuildTool)
+        if (hasCustomBuildStep || filter.useCustomBuildTool)
         {
-            if ( !fileAllreadyAdded ) {
-
+            if (!fileAdded) {
                 fileAdded = true;
 
                 xmlFilter << tag("CustomBuild")
                     << attrTag("Include",Option::fixPathToLocalOS(filename))
-                    << attrTagS("Filter", filtername);
+                    << attrTagS("Filter", fullFilterName);
 
                 xml << tag("CustomBuild")
                     << attrTag("Include",Option::fixPathToLocalOS(filename));
 
-                if (filtername.startsWith("Form Files") || filtername.startsWith("Generated Files")
-                        || filtername.startsWith("Resource Files") || filtername.startsWith("Deployment Files"))
+                if (filter.Name.startsWith("Form Files")
+                        || filter.Name.startsWith("Generated Files")
+                        || filter.Name.startsWith("Resource Files")
+                        || filter.Name.startsWith("Deployment Files"))
                     xml << attrTagS("FileType", "Document");
             }
 
             filter.Project->projectWriter->write(xml, filter.CustomBuildTool);
         }
 
-        if ( !fileAdded && !fileAllreadyAdded )
+        if (!fileAdded)
         {
             fileAdded = true;
-
-            if (filtername.startsWith("Source Files")) {
-
-                xmlFilter << tag("ClCompile")
-                          << attrTag("Include",Option::fixPathToLocalOS(filename))
-                          << attrTagS("Filter", filtername);
-
-                xml << tag("ClCompile")
-                    << attrTag("Include",Option::fixPathToLocalOS(filename));
-
-            } else if(filtername.startsWith("Header Files")) {
-
-                xmlFilter << tag("ClInclude")
-                    << attrTag("Include",Option::fixPathToLocalOS(filename))
-                    << attrTagS("Filter", filtername);
-
-                xml << tag("ClInclude")
-                    << attrTag("Include",Option::fixPathToLocalOS(filename));
-            } else if(filtername.startsWith("Generated Files") || filtername.startsWith("Form Files")) {
-
-                if (filename.endsWith(".h")) {
-
-                    xmlFilter << tag("ClInclude")
-                              << attrTag("Include",Option::fixPathToLocalOS(filename))
-                              << attrTagS("Filter", filtername);
-
-                    xml << tag("ClInclude")
-                        << attrTag("Include",Option::fixPathToLocalOS(filename));
-                } else if(filename.endsWith(".cpp")) {
-
-                    xmlFilter << tag("ClCompile")
-                              << attrTag("Include",Option::fixPathToLocalOS(filename))
-                              << attrTagS("Filter", filtername);
-
-                    xml << tag("ClCompile")
-                        << attrTag("Include",Option::fixPathToLocalOS(filename));
-                } else if(filename.endsWith(".res")) {
-
-                    xmlFilter << tag("CustomBuild")
-                              << attrTag("Include",Option::fixPathToLocalOS(filename))
-                              << attrTagS("Filter", filtername);
-
-                    xml << tag("CustomBuild")
-                        << attrTag("Include",Option::fixPathToLocalOS(filename));
-                } else {
-
-                    xmlFilter << tag("CustomBuild")
-                              << attrTag("Include",Option::fixPathToLocalOS(filename))
-                              << attrTagS("Filter", filtername);
-
-                    xml << tag("CustomBuild")
-                        << attrTag("Include",Option::fixPathToLocalOS(filename));
-                }
-            } else if(filtername.startsWith("Root Files")) {
-
-                if (filename.endsWith(".rc")) {
-
-                    xmlFilter << tag("ResourceCompile")
-                              << attrTag("Include",Option::fixPathToLocalOS(filename));
-
-                    xml << tag("ResourceCompile")
-                        << attrTag("Include",Option::fixPathToLocalOS(filename));
-                }
-            } else if (filtername.startsWith("Deployment Files")) {
-                xmlFilter << tag("None")
-                          << attrTag("Include",Option::fixPathToLocalOS(filename))
-                          << attrTagS("Filter", filtername);
-
-                xml << tag("None")
-                    << attrTag("Include",Option::fixPathToLocalOS(filename));
-            }
+            outputFileConfig(xml, xmlFilter, filename, fullFilterName);
         }
 
         const QString condition = generateCondition(*filter.Config);
-        if(!inBuild) {
+        if (!d->inBuild) {
             xml << tag("ExcludedFromBuild")
                 << attrTag("Condition", condition)
                 << valueTag("true");
         }
 
-        if (filtername.startsWith("Deployment Files") && inBuild) {
+        if (filter.Name.startsWith("Deployment Files") && d->inBuild) {
             xml << tag("DeploymentContent")
                 << attrTag("Condition", condition)
                 << valueTag("true");
@@ -2109,22 +1993,67 @@ bool VCXProjectWriter::outputFileConfig(VCFilter &filter, XmlOutput &xml, XmlOut
     return fileAdded;
 }
 
-QString VCXProjectWriter::generateCondition(const VCConfiguration &config)
-{
-    return QStringLiteral("'$(Configuration)|$(Platform)'=='") + config.Name + QLatin1Char('\'');
+void VCXProjectWriter::outputFileConfig(XmlOutput &xml, XmlOutput &xmlFilter,
+                                        const QString &filePath, const QString &filterName)
+{
+    const QString nativeFilePath = Option::fixPathToLocalOS(filePath);
+    if (filterName.startsWith("Source Files")) {
+        xmlFilter << tag("ClCompile")
+                  << attrTag("Include", nativeFilePath)
+                  << attrTagS("Filter", filterName);
+        xml << tag("ClCompile")
+            << attrTag("Include", nativeFilePath);
+    } else if (filterName.startsWith("Header Files")) {
+        xmlFilter << tag("ClInclude")
+                  << attrTag("Include", nativeFilePath)
+                  << attrTagS("Filter", filterName);
+        xml << tag("ClInclude")
+            << attrTag("Include", nativeFilePath);
+    } else if (filterName.startsWith("Generated Files") || filterName.startsWith("Form Files")) {
+        if (filePath.endsWith(".h")) {
+            xmlFilter << tag("ClInclude")
+                      << attrTag("Include", nativeFilePath)
+                      << attrTagS("Filter", filterName);
+            xml << tag("ClInclude")
+                << attrTag("Include", nativeFilePath);
+        } else if (filePath.endsWith(".cpp")) {
+            xmlFilter << tag("ClCompile")
+                      << attrTag("Include", nativeFilePath)
+                      << attrTagS("Filter", filterName);
+            xml << tag("ClCompile")
+                << attrTag("Include", nativeFilePath);
+        } else if (filePath.endsWith(".res")) {
+            xmlFilter << tag("CustomBuild")
+                      << attrTag("Include", nativeFilePath)
+                      << attrTagS("Filter", filterName);
+            xml << tag("CustomBuild")
+                << attrTag("Include", nativeFilePath);
+        } else {
+            xmlFilter << tag("CustomBuild")
+                      << attrTag("Include", nativeFilePath)
+                      << attrTagS("Filter", filterName);
+            xml << tag("CustomBuild")
+                << attrTag("Include", nativeFilePath);
+        }
+    } else if (filterName.startsWith("Root Files")) {
+        if (filePath.endsWith(".rc")) {
+            xmlFilter << tag("ResourceCompile")
+                      << attrTag("Include", nativeFilePath);
+            xml << tag("ResourceCompile")
+                << attrTag("Include", nativeFilePath);
+        }
+    } else {
+        xmlFilter << tag("None")
+                  << attrTag("Include", nativeFilePath)
+                  << attrTagS("Filter", filterName);
+        xml << tag("None")
+            << attrTag("Include", nativeFilePath);
+    }
 }
 
-QString VCXProjectWriter::platformToolSetVersion(const DotNET version, bool winphoneBuild)
+QString VCXProjectWriter::generateCondition(const VCConfiguration &config)
 {
-    switch (version)
-    {
-    case NET2012:
-        return winphoneBuild ? "v110_wp80" : "v110";
-    case NET2013:
-        return "v120";
-    default:
-        return QString();
-    }
+    return QStringLiteral("'$(Configuration)|$(Platform)'=='") + config.Name + QLatin1Char('\'');
 }
 
 QT_END_NAMESPACE
diff --git a/qmake/generators/win32/msbuild_objectmodel.h b/qmake/generators/win32/msbuild_objectmodel.h
index 7fb83233f4..68ba0eea83 100644
--- a/qmake/generators/win32/msbuild_objectmodel.h
+++ b/qmake/generators/win32/msbuild_objectmodel.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -64,7 +56,8 @@ public:
     }
     virtual void addElement(const QString &filepath, const VCFilterFile &allInfo) = 0;
     virtual void removeElements()= 0;
-    virtual void generateXML(XmlOutput &xml, XmlOutput &xmlFilter, const QString &tagName, VCProject &tool, const QString &filter) = 0;
+    virtual void generateXML(XmlOutput &xml, XmlOutput &xmlFilter, const QString &tagName,
+                             VCProject &tool, const QString &filter) = 0;
     virtual bool hasElements() = 0;
 };
 
@@ -114,7 +107,8 @@ public:
         children.clear();
     }
 
-    void generateXML(XmlOutput &xml, XmlOutput &xmlFilter, const QString &tagName, VCProject &tool, const QString &filter);
+    void generateXML(XmlOutput &xml, XmlOutput &xmlFilter, const QString &tagName, VCProject &tool,
+                     const QString &filter);
     bool hasElements() {
         return children.size() != 0;
     }
@@ -154,7 +148,8 @@ public:
         children.clear();
     }
 
-    void generateXML(XmlOutput &xml, XmlOutput &xmlFilter, const QString &tagName, VCProject &proj, const QString &filter);
+    void generateXML(XmlOutput &xml, XmlOutput &xmlFilter, const QString &tagName, VCProject &proj,
+                     const QString &filter);
     bool hasElements() {
         return children.size() != 0;
     }
@@ -174,16 +169,27 @@ public:
     void write(XmlOutput &, const VCResourceCompilerTool &);
     void write(XmlOutput &, const VCEventTool &);
     void write(XmlOutput &, const VCDeploymentTool &);
+    void write(XmlOutput &, const VCWinDeployQtTool &);
     void write(XmlOutput &, const VCConfiguration &);
     void write(XmlOutput &, VCFilter &);
 
 private:
+    struct OutputFilterData
+    {
+        VCFilter filter;
+        VCFilterFile info;
+        bool inBuild;
+    };
+
     static void addFilters(VCProject &project, XmlOutput &xmlFilter, const QString &filterName);
     static void outputFilter(VCProject &project, XmlOutput &xml, XmlOutput &xmlFilter, const QString &filtername);
-    static void outputFileConfigs(VCProject &project, XmlOutput &xml, XmlOutput &xmlFilter, const VCFilterFile &info, const QString &filtername);
-    static bool outputFileConfig(VCFilter &filter, XmlOutput &xml, XmlOutput &xmlFilter, const QString &filename, const QString &filtername, bool fileAllreadyAdded);
+    static void outputFileConfigs(VCProject &project, XmlOutput &xml, XmlOutput &xmlFilter,
+                                  const VCFilterFile &info, const QString &filtername);
+    static bool outputFileConfig(OutputFilterData *d, XmlOutput &xml, XmlOutput &xmlFilter,
+                                 const QString &filename, const QString &fullFilterName,
+                                 bool fileAdded, bool hasCustomBuildStep);
+    static void outputFileConfig(XmlOutput &xml, XmlOutput &xmlFilter, const QString &fileName, const QString &filterName);
     static QString generateCondition(const VCConfiguration &config);
-    static QString platformToolSetVersion(const DotNET version, bool winphoneBuild);
 
     friend class XTreeNode;
     friend class XFlatNode;
diff --git a/qmake/generators/win32/msvc_nmake.cpp b/qmake/generators/win32/msvc_nmake.cpp
index 0abbd133cc..758db337ea 100644
--- a/qmake/generators/win32/msvc_nmake.cpp
+++ b/qmake/generators/win32/msvc_nmake.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -121,31 +113,79 @@ NmakeMakefileGenerator::writeMakefile(QTextStream &t)
                     compiler = QStringLiteral("x86_arm");
                     compilerArch = QStringLiteral("arm");
                 } else if (arch == QStringLiteral("x64")) {
-                    compiler = QStringLiteral("x86_amd64");
+                    const ProStringList hostArch = project->values("QMAKE_TARGET.arch");
+                    if (hostArch.contains("x86_64"))
+                        compiler = QStringLiteral("amd64");
+                    else
+                        compiler = QStringLiteral("x86_amd64");
                     compilerArch = QStringLiteral("amd64");
+                } else {
+                    arch = QStringLiteral("x86");
+                }
+
+                const QString msvcVer = project->first("MSVC_VER").toQString();
+                if (msvcVer.isEmpty()) {
+                    fprintf(stderr, "Mkspec does not specify MSVC_VER. Cannot continue.\n");
+                    return false;
+                }
+                const QString winsdkVer = project->first("WINSDK_VER").toQString();
+                if (winsdkVer.isEmpty()) {
+                    fprintf(stderr, "Mkspec does not specify WINSDK_VER. Cannot continue.\n");
+                    return false;
+                }
+                const QString targetVer = project->first("WINTARGET_VER").toQString();
+                if (targetVer.isEmpty()) {
+                    fprintf(stderr, "Mkspec does not specify WINTARGET_VER. Cannot continue.\n");
+                    return false;
                 }
+
+                const bool isPhone = project->isActiveConfig(QStringLiteral("winphone"));
 #ifdef Q_OS_WIN
-#ifdef Q_OS_WIN64
-                const QString regKey = QStringLiteral("Software\\Wow6432Node\\Microsoft\\VisualStudio\\11.0\\Setup\\VC\\ProductDir");
-#else
-                const QString regKey = QStringLiteral("Software\\Microsoft\\VisualStudio\\11.0\\Setup\\VC\\ProductDir");
+                QString regKeyPrefix;
+#if !defined(Q_OS_WIN64) && _WIN32_WINNT >= 0x0501
+                BOOL isWow64;
+                IsWow64Process(GetCurrentProcess(), &isWow64);
+                if (!isWow64)
+                    regKeyPrefix = QStringLiteral("Software\\");
+                else
 #endif
+                    regKeyPrefix = QStringLiteral("Software\\Wow6432Node\\");
+
+                QString regKey = regKeyPrefix + QStringLiteral("Microsoft\\VisualStudio\\") + msvcVer + ("\\Setup\\VC\\ProductDir");
                 const QString vcInstallDir = qt_readRegistryKey(HKEY_LOCAL_MACHINE, regKey);
                 if (vcInstallDir.isEmpty()) {
-                    fprintf(stderr, "Failed to find the Visual Studio 2012 installation directory.\n"
-                                    "Is it installed?.\n");
+                    fprintf(stderr, "Failed to find the Visual Studio installation directory.\n");
+                    return false;
+                }
+
+                QString windowsPath;
+                if (isPhone) {
+                    if (targetVer == "WP80") // ### Windows Phone 8.0, remove in Qt 5.4
+                        windowsPath = "Microsoft\\Microsoft SDKs\\WindowsPhone\\v";
+                    else
+                        windowsPath = "Microsoft\\Microsoft SDKs\\WindowsPhoneApp\\v";
+                } else {
+                    windowsPath = "Microsoft\\Microsoft SDKs\\Windows\\v";
+                }
+
+                regKey = regKeyPrefix + windowsPath + winsdkVer + QStringLiteral("\\InstallationFolder");
+                const QString kitDir = qt_readRegistryKey(HKEY_LOCAL_MACHINE, regKey);
+                if (kitDir.isEmpty()) {
+                    fprintf(stderr, "Failed to find the Windows Kit installation directory.\n");
                     return false;
                 }
 #else
                 const QString vcInstallDir = "/fake/vc_install_dir";
+                const QString kitDir = "/fake/sdk_install_dir";
 #endif // Q_OS_WIN
 
                 QStringList incDirs;
                 QStringList libDirs;
                 QStringList binDirs;
-                const bool isPhone = project->isActiveConfig(QStringLiteral("winphone"));
                 if (isPhone) {
-                    QString sdkDir = vcInstallDir + QStringLiteral("/WPSDK/WP80");
+                    QString sdkDir = vcInstallDir;
+                    if (targetVer == "WP80")
+                        sdkDir += QStringLiteral("/WPSDK/") + targetVer;
                     if (!QDir(sdkDir).exists()) {
                         fprintf(stderr, "Failed to find the Windows Phone SDK in %s.\n"
                                         "Check that it is properly installed.\n",
@@ -153,16 +193,9 @@ NmakeMakefileGenerator::writeMakefile(QTextStream &t)
                         return false;
                     }
                     incDirs << sdkDir + QStringLiteral("/include");
-                    libDirs << sdkDir + QStringLiteral("/lib/") + compilerArch;
+                    libDirs << sdkDir + QStringLiteral("/lib/store/") + compilerArch
+                            << sdkDir + QStringLiteral("/lib/") + compilerArch;
                     binDirs << sdkDir + QStringLiteral("/bin/") + compiler;
-
-                    QString kitDir = vcInstallDir + QStringLiteral("/../../Windows Phone Kits/8.0");
-                    if (!QDir(kitDir).exists()) {
-                        fprintf(stderr, "Failed to find the Windows Phone Kit in %s.\n"
-                                        "Check that it is properly installed.\n",
-                                qPrintable(QDir::toNativeSeparators(kitDir)));
-                        return false;
-                    }
                     libDirs << kitDir + QStringLiteral("/lib/") + arch;
                     incDirs << kitDir + QStringLiteral("/include")
                             << kitDir + QStringLiteral("/include/abi")
@@ -170,18 +203,11 @@ NmakeMakefileGenerator::writeMakefile(QTextStream &t)
                             << kitDir + QStringLiteral("/include/minwin");
                 } else {
                     incDirs << vcInstallDir + QStringLiteral("/include");
-                    libDirs << vcInstallDir + QStringLiteral("/lib/") + compilerArch;
+                    libDirs << vcInstallDir + QStringLiteral("/lib/store/") + compilerArch
+                            << vcInstallDir + QStringLiteral("/lib/") + compilerArch;
                     binDirs << vcInstallDir + QStringLiteral("/bin/") + compiler
                             << vcInstallDir + QStringLiteral("/../Common7/IDE");
-
-                    QString kitDir = vcInstallDir + QStringLiteral("/../../Windows Kits/8.0");
-                    if (!QDir(kitDir).exists()) {
-                        fprintf(stderr, "Failed to find the Windows Kit in %s.\n"
-                                        "Check that it is properly installed.\n",
-                                qPrintable(QDir::toNativeSeparators(kitDir)));
-                        return false;
-                    }
-                    libDirs << kitDir + QStringLiteral("/Lib/win8/um/") + arch;
+                    libDirs << kitDir + QStringLiteral("/Lib/") + targetVer + ("/um/") + arch;
                     incDirs << kitDir + QStringLiteral("/include/um")
                             << kitDir + QStringLiteral("/include/shared")
                             << kitDir + QStringLiteral("/include/winrt");
@@ -236,10 +262,7 @@ QString NmakeMakefileGenerator::defaultInstall(const QString &t)
         targetdir += Option::dir_sep;
 
     if (project->isActiveConfig("debug_info")) {
-        if (t == "dlltarget"
-            || project->first("TEMPLATE") != "lib"
-            || (project->isActiveConfig("shared")
-                && project->values(ProKey(t + ".CONFIG")).indexOf("no_dll") == -1)) {
+        if (t == "dlltarget" || project->values(ProKey(t + ".CONFIG")).indexOf("no_dll") == -1) {
             QString pdb_target = getPdbTarget();
             pdb_target.remove('"');
             QString src_targ = (project->isEmpty("DESTDIR") ? QString("$(DESTDIR)") : project->first("DESTDIR")) + pdb_target;
@@ -285,7 +308,7 @@ void NmakeMakefileGenerator::writeNmakeParts(QTextStream &t)
     }
 }
 
-QString NmakeMakefileGenerator::var(const ProKey &value)
+QString NmakeMakefileGenerator::var(const ProKey &value) const
 {
     if (usePCH) {
         if ((value == "QMAKE_RUN_CXX_IMP_BATCH"
@@ -392,8 +415,9 @@ void NmakeMakefileGenerator::init()
     }
     if (project->isActiveConfig("debug_info")) {
         QString pdbfile = project->first("DESTDIR") + project->first("TARGET") + version + ".pdb";
-        project->values("QMAKE_CFLAGS").append("/Fd" + pdbfile);
-        project->values("QMAKE_CXXFLAGS").append("/Fd" + pdbfile);
+        QString escapedPdbFile = escapeFilePath(pdbfile);
+        project->values("QMAKE_CFLAGS").append("/Fd" + escapedPdbFile);
+        project->values("QMAKE_CXXFLAGS").append("/Fd" + escapedPdbFile);
         project->values("QMAKE_DISTCLEAN").append(pdbfile);
     }
     if (project->isActiveConfig("debug")) {
@@ -489,18 +513,23 @@ void NmakeMakefileGenerator::writeBuildRulesPart(QTextStream &t)
             const QString target = var("DEST_TARGET");
             QString manifest = project->first("QMAKE_MANIFEST").toQString();
             QString extraLFlags;
+            const bool linkerSupportsEmbedding = (msvcVersion() >= 1200);
             if (manifest.isEmpty()) {
                 generateManifest = true;
-                manifest = escapeFilePath(target + ".embed.manifest");
-                extraLFlags = "/MANIFEST /MANIFESTFILE:" + manifest;
-                project->values("QMAKE_CLEAN") << manifest;
+                if (linkerSupportsEmbedding) {
+                    extraLFlags = "/MANIFEST:embed";
+                } else {
+                    manifest = escapeFilePath(target + ".embed.manifest");
+                    extraLFlags += "/MANIFEST /MANIFESTFILE:" + manifest;
+                    project->values("QMAKE_CLEAN") << manifest;
+                }
             } else {
                 manifest = escapeFilePath(fileFixify(manifest));
             }
 
             const QString resourceId = (templateName == "app") ? "1" : "2";
             const bool incrementalLinking = project->values("QMAKE_LFLAGS").toQStringList().filter(QRegExp("(/|-)INCREMENTAL:NO")).isEmpty();
-            if (incrementalLinking) {
+            if (incrementalLinking && !linkerSupportsEmbedding) {
                 // Link a resource that contains the manifest without modifying the exe/dll after linking.
 
                 QString manifest_rc = escapeFilePath(target +  "_manifest.rc");
@@ -533,8 +562,10 @@ void NmakeMakefileGenerator::writeBuildRulesPart(QTextStream &t)
                 // directly embed the manifest in the executable after linking
                 t << "\n\t";
                 writeLinkCommand(t, extraLFlags);
-                t << "\n\tmt.exe /nologo /manifest " << manifest
-                  << " /outputresource:$(DESTDIR_TARGET);" << resourceId;
+                if (!linkerSupportsEmbedding) {
+                    t << "\n\tmt.exe /nologo /manifest " << manifest
+                      << " /outputresource:$(DESTDIR_TARGET);" << resourceId;
+                }
             }
         }  else {
             t << "\n\t";
@@ -565,4 +596,13 @@ void NmakeMakefileGenerator::writeLinkCommand(QTextStream &t, const QString &ext
     t << "\n<<";
 }
 
+int NmakeMakefileGenerator::msvcVersion() const
+{
+    const int fallbackVersion = 800;    // Visual Studio 2005
+    const QString ver = project->first(ProKey("MSVC_VER")).toQString();
+    bool ok;
+    float f = ver.toFloat(&ok);
+    return ok ? int(f * 100) : fallbackVersion;
+}
+
 QT_END_NAMESPACE
diff --git a/qmake/generators/win32/msvc_nmake.h b/qmake/generators/win32/msvc_nmake.h
index 7a47bb8cec..753223b98e 100644
--- a/qmake/generators/win32/msvc_nmake.h
+++ b/qmake/generators/win32/msvc_nmake.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -54,6 +46,7 @@ class NmakeMakefileGenerator : public Win32MakefileGenerator
     void writeImplicitRulesPart(QTextStream &t);
     void writeBuildRulesPart(QTextStream &t);
     void writeLinkCommand(QTextStream &t, const QString &extraFlags = QString(), const QString &extraInlineFileContent = QString());
+    int msvcVersion() const;
     void init();
 
 protected:
@@ -62,7 +55,7 @@ protected:
     virtual QString getPdbTarget();
     virtual QString defaultInstall(const QString &t);
     virtual QStringList &findDependencies(const QString &file);
-    QString var(const ProKey &value);
+    QString var(const ProKey &value) const;
     QString precompH, precompObj, precompPch;
     bool usePCH;
 
diff --git a/qmake/generators/win32/msvc_objectmodel.cpp b/qmake/generators/win32/msvc_objectmodel.cpp
index a2a441c6bf..74a0a20ea2 100644
--- a/qmake/generators/win32/msvc_objectmodel.cpp
+++ b/qmake/generators/win32/msvc_objectmodel.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -312,6 +304,18 @@ static QString vcCommandSeparator()
     return cmdSep;
 }
 
+static void unknownOptionWarning(const char *tool, const char *option)
+{
+    static bool firstCall = true;
+    warn_msg(WarnLogic, "Could not parse %s option '%s'; added to AdditionalOptions.", tool, option);
+    if (firstCall) {
+        firstCall = false;
+        warn_msg(WarnLogic,
+                 "You can suppress these warnings with CONFIG+=suppress_vcproj_warnings.");
+    }
+}
+
+
 // VCCLCompilerTool -------------------------------------------------
 VCCLCompilerTool::VCCLCompilerTool()
     :        AssemblerOutput(asmListingNone),
@@ -916,6 +920,8 @@ bool VCCLCompilerTool::parseOption(const char* option)
                     ForceConformanceInForLoopScope = ((*c) == '-' ? _False : _True);
                 else if(fourth == 'w')
                     TreatWChar_tAsBuiltInType = ((*c) == '-' ? _False : _True);
+                else if (config->CompilerVersion >= NET2013 && strncmp(option + 4, "strictStrings", 13) == 0)
+                    AdditionalOptions += option;
                 else
                     found = false;
             } else {
@@ -1146,7 +1152,8 @@ bool VCCLCompilerTool::parseOption(const char* option)
         break;
     }
     if(!found) {
-        warn_msg(WarnLogic, "Could not parse Compiler option: %s, added as AdditionalOption", option);
+        if (!config->suppressUnknownOptionWarnings)
+            unknownOptionWarning("Compiler", option);
         AdditionalOptions += option;
     }
     return true;
@@ -1537,7 +1544,7 @@ bool VCLinkerTool::parseOption(const char* option)
             AdditionalOptions.append(option);
         }
         break;
-	case 0x379ED25:
+    case 0x379ED25:
     case 0x157cf65: // /MACHINE:{AM33|ARM|CEE|IA64|X86|M32R|MIPS|MIPS16|MIPSFPU|MIPSFPU16|MIPSR41XX|PPC|SH3|SH4|SH5|THUMB|TRICORE}
         switch (elfHash(option+9)) {
         // Very limited documentation on all options but X86,
@@ -1667,7 +1674,7 @@ bool VCLinkerTool::parseOption(const char* option)
         else
             AdditionalOptions += option;
         break;
-	case 0x9B3C00D:
+    case 0x9B3C00D:
     case 0x78dc00d: // /SUBSYSTEM:{CONSOLE|EFI_APPLICATION|EFI_BOOT_SERVICE_DRIVER|EFI_ROM|EFI_RUNTIME_DRIVER|NATIVE|POSIX|WINDOWS|WINDOWSCE}[,major[.minor]]
         {
             // Split up in subsystem, and version number
@@ -1741,7 +1748,8 @@ bool VCLinkerTool::parseOption(const char* option)
         break;
     }
     if(!found) {
-        warn_msg(WarnLogic, "Could not parse Linker options: %s, added as AdditionalOption", option);
+        if (!config->suppressUnknownOptionWarnings)
+            unknownOptionWarning("Linker", option);
         AdditionalOptions += option;
     }
     return found;
@@ -2129,6 +2137,7 @@ VCPreLinkEventTool::VCPreLinkEventTool()
 VCConfiguration::VCConfiguration()
     :   WinRT(false),
         WinPhone(false),
+        WinPhone80(false),
         ATLMinimizesCRunTimeLibraryUsage(unset),
         BuildBrowserInformation(unset),
         CharacterSet(charSetNotSet),
@@ -2232,6 +2241,19 @@ void VCFilter::modifyPCHstage(QString str)
     CompilerTool.ForcedIncludeFiles       = QStringList("$(NOINHERIT)");
 }
 
+VCFilterFile VCFilter::findFile(const QString &filePath, bool *found) const
+{
+    for (int i = 0; i < Files.count(); ++i) {
+        const VCFilterFile &f = Files.at(i);
+        if (f.file == filePath) {
+            *found = true;
+            return f;
+        }
+    }
+    *found = false;
+    return VCFilterFile();
+}
+
 bool VCFilter::addExtraCompiler(const VCFilterFile &info)
 {
     const QStringList &extraCompilers = Project->extraCompilerSources.value(info.file);
@@ -2253,7 +2275,7 @@ bool VCFilter::addExtraCompiler(const VCFilterFile &info)
     CustomBuildTool.Description.clear();
     CustomBuildTool.Outputs.clear();
     CustomBuildTool.ToolPath.clear();
-	CustomBuildTool.ToolName = QLatin1String(_VCCustomBuildTool);
+    CustomBuildTool.ToolName = QLatin1String(_VCCustomBuildTool);
 
     for (int x = 0; x < extraCompilers.count(); ++x) {
         const QString &extraCompilerName = extraCompilers.at(x);
@@ -2291,13 +2313,13 @@ bool VCFilter::addExtraCompiler(const VCFilterFile &info)
         }
 
         // Dependency for the output
-        if(!tmp_dep.isEmpty())
-	    deps = tmp_dep;
-	if(!tmp_dep_cmd.isEmpty()) {
+        if (!tmp_dep.isEmpty())
+            deps = tmp_dep;
+        if (!tmp_dep_cmd.isEmpty()) {
             // Execute dependency command, and add every line as a dep
-	    char buff[256];
-	    QString dep_cmd = Project->replaceExtraCompilerVariables(tmp_dep_cmd,
-							             Option::fixPathToLocalOS(inFile, true, false),
+            char buff[256];
+            QString dep_cmd = Project->replaceExtraCompilerVariables(tmp_dep_cmd,
+                                                                     Option::fixPathToLocalOS(inFile, true, false),
                                                                      out);
             if(Project->canExecute(dep_cmd)) {
                 dep_cmd.prepend(QLatin1String("cd ")
@@ -2324,7 +2346,7 @@ bool VCFilter::addExtraCompiler(const VCFilterFile &info)
             }
         }
         for (int i = 0; i < deps.count(); ++i)
-	    deps[i] = Option::fixPathToTargetOS(
+            deps[i] = Option::fixPathToTargetOS(
                         Project->replaceExtraCompilerVariables(deps.at(i), inFile, out),
                         false).trimmed();
         // Command for file
@@ -2353,18 +2375,18 @@ bool VCFilter::addExtraCompiler(const VCFilterFile &info)
                                                          out);
         }
         // Name for command
-	if(!tmp_cmd_name.isEmpty()) {
-	    cmd_name = Project->replaceExtraCompilerVariables(tmp_cmd_name, inFile, out);
-	} else {
-	    int space = cmd.indexOf(' ');
-	    if(space != -1)
-		cmd_name = cmd.left(space);
-	    else
-		cmd_name = cmd;
-	    if((cmd_name[0] == '\'' || cmd_name[0] == '"') &&
-		cmd_name[0] == cmd_name[cmd_name.length()-1])
-		cmd_name = cmd_name.mid(1,cmd_name.length()-2);
-	}
+        if (!tmp_cmd_name.isEmpty()) {
+            cmd_name = Project->replaceExtraCompilerVariables(tmp_cmd_name, inFile, out);
+        } else {
+            int space = cmd.indexOf(' ');
+            if (space != -1)
+                cmd_name = cmd.left(space);
+            else
+                cmd_name = cmd;
+            if ((cmd_name[0] == '\'' || cmd_name[0] == '"') &&
+                cmd_name[0] == cmd_name[cmd_name.length()-1])
+                cmd_name = cmd_name.mid(1,cmd_name.length()-2);
+        }
 
         // Fixify paths
         for (int i = 0; i < deps.count(); ++i)
@@ -2375,7 +2397,11 @@ bool VCFilter::addExtraCompiler(const VCFilterFile &info)
         if (!CustomBuildTool.Description.isEmpty())
             CustomBuildTool.Description += ", ";
         CustomBuildTool.Description += cmd_name;
+        // Execute custom build steps in an environment variable scope to prevent unwanted
+        // side effects for downstream build steps
+        CustomBuildTool.CommandLine += QLatin1String("setlocal");
         CustomBuildTool.CommandLine += VCToolBase::fixCommandLine(cmd.trimmed());
+        CustomBuildTool.CommandLine += QLatin1String("endlocal");
         int space = cmd.indexOf(' ');
         QFileInfo finf(cmd.left(space));
         if (CustomBuildTool.ToolPath.isEmpty())
@@ -2405,11 +2431,34 @@ bool VCFilter::addExtraCompiler(const VCFilterFile &info)
 }
 
 // VCProjectSingleConfig --------------------------------------------
-VCFilter& VCProjectSingleConfig::filterForExtraCompiler(const QString &compilerName)
+const VCFilter &VCProjectSingleConfig::filterByName(const QString &name) const
+{
+    if (name == "Root Files")
+        return RootFiles;
+    if (name == "Source Files")
+        return SourceFiles;
+    if (name == "Header Files")
+        return HeaderFiles;
+    if (name == "Generated Files")
+        return GeneratedFiles;
+    if (name == "LexYacc Files")
+        return LexYaccFiles;
+    if (name == "Translation Files")
+        return TranslationFiles;
+    if (name == "Form Files")
+        return FormFiles;
+    if (name == "Resource Files")
+        return ResourceFiles;
+    if (name == "Deployment Files")
+        return DeploymentFiles;
+    return filterForExtraCompiler(name);
+}
+
+const VCFilter &VCProjectSingleConfig::filterForExtraCompiler(const QString &compilerName) const
 {
     for (int i = 0; i < ExtraCompilersFiles.count(); ++i)
         if (ExtraCompilersFiles.at(i).Name == compilerName)
-            return ExtraCompilersFiles[i];
+            return ExtraCompilersFiles.at(i);
 
     static VCFilter nullFilter;
     return nullFilter;
@@ -2476,14 +2525,14 @@ void VCProjectWriter::write(XmlOutput &xml, VCProjectSingleConfig &tool)
     // XML output functionality
     VCProject tempProj;
     tempProj.SingleProjects += tool;
-    outputFilter(tempProj, xml, "Sources");
-    outputFilter(tempProj, xml, "Headers");
-    outputFilter(tempProj, xml, "GeneratedFiles");
-    outputFilter(tempProj, xml, "LexYaccFiles");
-    outputFilter(tempProj, xml, "TranslationFiles");
-    outputFilter(tempProj, xml, "FormFiles");
-    outputFilter(tempProj, xml, "ResourceFiles");
-    outputFilter(tempProj, xml, "DeploymentFiles");
+    outputFilter(tempProj, xml, "Source Files");
+    outputFilter(tempProj, xml, "Header Files");
+    outputFilter(tempProj, xml, "Generated Files");
+    outputFilter(tempProj, xml, "LexYacc Files");
+    outputFilter(tempProj, xml, "Translation Files");
+    outputFilter(tempProj, xml, "Form Files");
+    outputFilter(tempProj, xml, "Resource Files");
+    outputFilter(tempProj, xml, "Deployment Files");
 
     QSet<QString> extraCompilersInProject;
     for (int i = 0; i < tool.ExtraCompilersFiles.count(); ++i) {
@@ -2497,7 +2546,7 @@ void VCProjectWriter::write(XmlOutput &xml, VCProjectSingleConfig &tool)
     for (int x = 0; x < tempProj.ExtraCompilers.count(); ++x) {
         outputFilter(tempProj, xml, tempProj.ExtraCompilers.at(x));
     }
-    outputFilter(tempProj, xml, "RootFiles");
+    outputFilter(tempProj, xml, "Root Files");
     xml     << closetag(q_Files)
             << tag(_Globals)
                 << data(); // No "/>" end tag
@@ -2529,18 +2578,18 @@ void VCProjectWriter::write(XmlOutput &xml, VCProject &tool)
         write(xml, tool.SingleProjects.at(i).Configuration);
     xml     << closetag(_Configurations)
             << tag(q_Files);
-    outputFilter(tool, xml, "Sources");
-    outputFilter(tool, xml, "Headers");
-    outputFilter(tool, xml, "GeneratedFiles");
-    outputFilter(tool, xml, "LexYaccFiles");
-    outputFilter(tool, xml, "TranslationFiles");
-    outputFilter(tool, xml, "FormFiles");
-    outputFilter(tool, xml, "ResourceFiles");
-    outputFilter(tool, xml, "DeploymentFiles");
+    outputFilter(tool, xml, "Source Files");
+    outputFilter(tool, xml, "Header Files");
+    outputFilter(tool, xml, "Generated Files");
+    outputFilter(tool, xml, "LexYacc Files");
+    outputFilter(tool, xml, "Translation Files");
+    outputFilter(tool, xml, "Form Files");
+    outputFilter(tool, xml, "Resource Files");
+    outputFilter(tool, xml, "Deployment Files");
     for (int x = 0; x < tool.ExtraCompilers.count(); ++x) {
         outputFilter(tool, xml, tool.ExtraCompilers.at(x));
     }
-    outputFilter(tool, xml, "RootFiles");
+    outputFilter(tool, xml, "Root Files");
     xml     << closetag(q_Files)
             << tag(_Globals)
             << data(); // No "/>" end tag
@@ -2799,6 +2848,12 @@ void VCProjectWriter::write(XmlOutput &xml, const VCDeploymentTool &tool)
         << closetag(tool.DeploymentTag);
 }
 
+void VCProjectWriter::write(XmlOutput &xml, const VCWinDeployQtTool &tool)
+{
+    Q_UNUSED(xml);
+    Q_UNUSED(tool);
+}
+
 void VCProjectWriter::write(XmlOutput &xml, const VCConfiguration &tool)
 {
     xml << tag(_Configuration)
@@ -2870,30 +2925,7 @@ void VCProjectWriter::outputFilter(VCProject &project, XmlOutput &xml, const QSt
     triState parse = unset;
 
     for (int i = 0; i < project.SingleProjects.count(); ++i) {
-        VCFilter filter;
-        const VCProjectSingleConfig &projectSingleConfig = project.SingleProjects.at(i);
-        if (filtername == "RootFiles") {
-            filter = projectSingleConfig.RootFiles;
-        } else if (filtername == "Sources") {
-            filter = projectSingleConfig.SourceFiles;
-        } else if (filtername == "Headers") {
-            filter = projectSingleConfig.HeaderFiles;
-        } else if (filtername == "GeneratedFiles") {
-            filter = projectSingleConfig.GeneratedFiles;
-        } else if (filtername == "LexYaccFiles") {
-            filter = projectSingleConfig.LexYaccFiles;
-        } else if (filtername == "TranslationFiles") {
-            filter = projectSingleConfig.TranslationFiles;
-        } else if (filtername == "FormFiles") {
-            filter = projectSingleConfig.FormFiles;
-        } else if (filtername == "ResourceFiles") {
-            filter = projectSingleConfig.ResourceFiles;
-        } else if (filtername == "DeploymentFiles") {
-            filter = projectSingleConfig.DeploymentFiles;
-        } else {
-            // ExtraCompilers
-            filter = project.SingleProjects[i].filterForExtraCompiler(filtername);
-        }
+        const VCFilter filter = project.SingleProjects.at(i).filterByName(filtername);
 
         // Merge all files in this filter to root tree
         for (int x = 0; x < filter.Files.count(); ++x)
@@ -2932,31 +2964,7 @@ void VCProjectWriter::outputFileConfigs(VCProject &project, XmlOutput &xml, cons
     xml << tag(q_File)
             << attrS(_RelativePath, Option::fixPathToLocalOS(info.file));
     for (int i = 0; i < project.SingleProjects.count(); ++i) {
-        VCFilter filter;
-        const VCProjectSingleConfig &projectSingleConfig = project.SingleProjects.at(i);
-        if (filtername == "RootFiles") {
-            filter = projectSingleConfig.RootFiles;
-        } else if (filtername == "Sources") {
-            filter = projectSingleConfig.SourceFiles;
-        } else if (filtername == "Headers") {
-            filter = projectSingleConfig.HeaderFiles;
-        } else if (filtername == "GeneratedFiles") {
-            filter = projectSingleConfig.GeneratedFiles;
-        } else if (filtername == "LexYaccFiles") {
-            filter = projectSingleConfig.LexYaccFiles;
-        } else if (filtername == "TranslationFiles") {
-            filter = projectSingleConfig.TranslationFiles;
-        } else if (filtername == "FormFiles") {
-            filter = projectSingleConfig.FormFiles;
-        } else if (filtername == "ResourceFiles") {
-            filter = projectSingleConfig.ResourceFiles;
-        } else if (filtername == "DeploymentFiles") {
-            filter = projectSingleConfig.DeploymentFiles;
-        } else {
-            // ExtraCompilers
-            filter = project.SingleProjects[i].filterForExtraCompiler(filtername);
-        }
-
+        VCFilter filter = project.SingleProjects.at(i).filterByName(filtername);
         if (filter.Config) // only if the filter is not empty
             outputFileConfig(filter, xml, info.file);
     }
@@ -2983,14 +2991,8 @@ void VCProjectWriter::outputFileConfig(VCFilter &filter, XmlOutput &xml, const Q
     filter.CompilerTool.WarningLevel = warningLevelUnknown;
     filter.CompilerTool.config = filter.Config;
 
-    bool inBuild = false;
-    VCFilterFile info;
-    for (int i = 0; i < filter.Files.count(); ++i) {
-        if (filter.Files.at(i).file == filename) {
-            info = filter.Files.at(i);
-            inBuild = true;
-        }
-    }
+    bool inBuild;
+    VCFilterFile info = filter.findFile(filename, &inBuild);
     inBuild &= !info.excludeFromBuild;
 
     if (inBuild) {
diff --git a/qmake/generators/win32/msvc_objectmodel.h b/qmake/generators/win32/msvc_objectmodel.h
index 58b528301c..4b70ca3d71 100644
--- a/qmake/generators/win32/msvc_objectmodel.h
+++ b/qmake/generators/win32/msvc_objectmodel.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -80,12 +72,6 @@ enum DotNET {
     forcing the tool to utilize default values.
     False/True values will be in the output...
 */
-enum customBuildCheck {
-    none,
-    mocSrc,
-    mocHdr,
-    lexyacc
-};
 enum triState {
     unset = -1,
     _False = 0,
@@ -860,6 +846,24 @@ public:
     ~VCPreLinkEventTool(){}
 };
 
+class VCWinDeployQtTool : public VCToolBase
+{
+public:
+    VCWinDeployQtTool() {}
+    ~VCWinDeployQtTool() {}
+
+protected:
+    bool parseOption(const char *) { return false; }
+
+public:
+    // Variables
+    QString                 Record;
+    QString                 CommandLine;
+    bool                    ExcludedFromBuild;
+
+    VCConfiguration *       config;
+};
+
 class VCConfiguration
 {
 public:
@@ -867,8 +871,9 @@ public:
     VCConfiguration();
     ~VCConfiguration(){}
 
+    bool                    suppressUnknownOptionWarnings;
     DotNET                  CompilerVersion;
-    bool                    WinRT, WinPhone;
+    bool                    WinRT, WinPhone, WinPhone80;
 
     // Variables
     triState                ATLMinimizesCRunTimeLibraryUsage;
@@ -882,7 +887,9 @@ public:
     QString                 ConfigurationName;
     QString                 OutputDirectory;
     QString                 PrimaryOutput;
+    QString                 PrimaryOutputExtension;
     QString                 ProgramDatabase;
+    QString                 PlatformToolSet;
     triState                RegisterOutput;
     useOfATL                UseOfATL;
     useOfMfc                UseOfMfc;
@@ -900,6 +907,7 @@ public:
     VCDeploymentTool        deployment;
     VCPreLinkEventTool      preLink;
     VCResourceCompilerTool  resource;
+    VCWinDeployQtTool       windeployqt;
 };
 
 struct VCFilterFile
@@ -945,6 +953,7 @@ public:
     void addFiles(const ProStringList& fileList);
     bool addExtraCompiler(const VCFilterFile &info);
     void modifyPCHstage(QString str);
+    VCFilterFile findFile(const QString &filePath, bool *found) const;
 
     // Variables
     QString                 Name;
@@ -955,8 +964,6 @@ public:
     VCConfiguration*        Config;
     QList<VCFilterFile>     Files;
 
-    customBuildCheck	    CustomBuild;
-
     bool                    useCustomBuildTool;
     VCCustomBuildTool       CustomBuildTool;
 
@@ -990,6 +997,7 @@ public:
     QString                 SccProjectName;
     QString                 SccLocalPath;
     QString                 PlatformName;
+    QString                 SdkVersion;
 
     // XML sub-parts
     VCConfiguration         Configuration;
@@ -1006,8 +1014,8 @@ public:
 
     bool                    flat_files;
 
-    // Accessor for extracompilers
-    VCFilter               &filterForExtraCompiler(const QString &compilerName);
+    const VCFilter &filterByName(const QString &name) const;
+    const VCFilter &filterForExtraCompiler(const QString &compilerName) const;
 };
 
 // Tree & Flat view of files --------------------------------------------------
@@ -1129,6 +1137,7 @@ public:
     QString                 SccProjectName;
     QString                 SccLocalPath;
     QString                 PlatformName;
+    QString                 SdkVersion;
 
     // Single projects
     QList<VCProjectSingleConfig>  SingleProjects;
@@ -1154,6 +1163,7 @@ public:
     virtual void write(XmlOutput &, const VCResourceCompilerTool &);
     virtual void write(XmlOutput &, const VCEventTool &);
     virtual void write(XmlOutput &, const VCDeploymentTool &);
+    virtual void write(XmlOutput &, const VCWinDeployQtTool &);
     virtual void write(XmlOutput &, const VCConfiguration &);
     virtual void write(XmlOutput &, VCFilter &);
 
diff --git a/qmake/generators/win32/msvc_vcproj.cpp b/qmake/generators/win32/msvc_vcproj.cpp
index f86c8512d4..e3031d559c 100644
--- a/qmake/generators/win32/msvc_vcproj.cpp
+++ b/qmake/generators/win32/msvc_vcproj.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -111,9 +103,10 @@ QT_END_NAMESPACE
 #endif
 
 QT_BEGIN_NAMESPACE
-DotNET which_dotnet_version()
+DotNET which_dotnet_version(const QByteArray &preferredVersion = QByteArray())
 {
 #ifndef Q_OS_WIN32
+    Q_UNUSED(preferredVersion);
     return NET2002; // Always generate 7.0 versions on other platforms
 #else
     // Only search for the version once
@@ -135,6 +128,10 @@ DotNET which_dotnet_version()
             installPaths.insert(lowestInstalledVersion->version, path);
             ++installed;
             current_version = lowestInstalledVersion->version;
+            if (QByteArray(lowestInstalledVersion->versionStr).contains(preferredVersion)) {
+                installed = 1;
+                break;
+            }
         }
     }
 
@@ -286,6 +283,7 @@ bool VcprojGenerator::writeProjectMakefile()
             mergedProjects.at(0)->writePrlFile();
         mergedProject.Name = project->first("QMAKE_PROJECT_NAME").toQString();
         mergedProject.Version = mergedProjects.at(0)->vcProject.Version;
+        mergedProject.SdkVersion = mergedProjects.at(0)->vcProject.SdkVersion;
         mergedProject.ProjectGUID = project->isEmpty("QMAKE_UUID") ? getProjectUUID().toString().toUpper() : project->first("QMAKE_UUID").toQString();
         mergedProject.Keyword = project->first("VCPROJ_KEYWORD").toQString();
         mergedProject.SccProjectName = mergedProjects.at(0)->vcProject.SccProjectName;
@@ -378,6 +376,50 @@ QUuid VcprojGenerator::increaseUUID(const QUuid &id)
     return result;
 }
 
+QString VcprojGenerator::retrievePlatformToolSet() const
+{
+    // The PlatformToolset string corresponds to the name of a directory in
+    // $(VCTargetsPath)\Platforms\{Win32,x64,...}\PlatformToolsets
+    // e.g. v90, v100, v110, v110_xp, v120_CTP_Nov, v120, or WindowsSDK7.1
+
+    // This environment variable may be set by a commandline build
+    // environment such as the Windows SDK command prompt
+    QByteArray envVar = qgetenv("PlatformToolset");
+    if (!envVar.isEmpty())
+        return envVar;
+
+    QString suffix;
+    if (project->isActiveConfig("winphone"))
+        suffix = '_' + project->first("WINTARGET_VER").toQString().toLower();
+    else if (project->first("QMAKE_TARGET_OS") == "xp")
+        suffix = "_xp";
+
+    switch (vcProject.Configuration.CompilerVersion)
+    {
+    case NET2012:
+        return QStringLiteral("v110") + suffix;
+    case NET2013:
+        return QStringLiteral("v120") + suffix;
+    default:
+        return QString();
+    }
+}
+
+bool VcprojGenerator::isStandardSuffix(const QString &suffix) const
+{
+    if (!project->values("QMAKE_APP_FLAG").isEmpty()) {
+        if (suffix.compare("exe", Qt::CaseInsensitive) == 0)
+            return true;
+    } else if (project->isActiveConfig("shared")) {
+        if (suffix.compare("dll", Qt::CaseInsensitive) == 0)
+            return true;
+    } else {
+        if (suffix.compare("lib", Qt::CaseInsensitive) == 0)
+            return true;
+    }
+    return false;
+}
+
 ProStringList VcprojGenerator::collectDependencies(QMakeProject *proj, QHash<QString, QString> &projLookup,
                                                    QHash<QString, QString> &projGuids,
                                                    QHash<VcsolutionDepend *, QStringList> &extraSubdirs,
@@ -585,7 +627,7 @@ void VcprojGenerator::writeSubDirs(QTextStream &t)
         return;
     }
 
-    switch(which_dotnet_version()) {
+    switch (which_dotnet_version(project->first("MSVC_VER").toLatin1())) {
     case NET2013:
         t << _slnHeader120;
         break;
@@ -867,19 +909,19 @@ void VcprojGenerator::initProject()
     initResourceFiles();
     initExtraCompilerOutputs();
     if (vcProject.Configuration.WinRT) {
-        if (vcProject.Configuration.WinPhone
+        if (vcProject.Configuration.WinPhone80
                 && vcProject.Configuration.ConfigurationType == typeApplication)
             initWMAppManifest();
     }
 
     // Own elements -----------------------------
     vcProject.Name = unescapeFilePath(project->first("QMAKE_ORIG_TARGET").toQString());
-    switch(which_dotnet_version()) {
+    switch (which_dotnet_version(project->first("MSVC_VER").toLatin1())) {
     case NET2013:
-        vcProject.Version = "13.00";
+        vcProject.Version = "12.00";
         break;
     case NET2012:
-        vcProject.Version = "12.00";
+        vcProject.Version = "11.00";
         break;
     case NET2010:
         vcProject.Version = "10.00";
@@ -912,6 +954,7 @@ void VcprojGenerator::initProject()
     } else {
         vcProject.PlatformName = project->values("CE_SDK").join(' ') + " (" + project->first("CE_ARCH") + ")";
     }
+    vcProject.SdkVersion = project->first("WINSDK_VER").toQString();
     // These are not used by Qt, but may be used by customers
     vcProject.SccProjectName = project->first("SCCPROJECTNAME").toQString();
     vcProject.SccLocalPath = project->first("SCCLOCALPATH").toQString();
@@ -924,7 +967,8 @@ void VcprojGenerator::initConfiguration()
     // - Do this first since main configuration elements may need
     // - to know of certain compiler/linker options
     VCConfiguration &conf = vcProject.Configuration;
-    conf.CompilerVersion = which_dotnet_version();
+    conf.suppressUnknownOptionWarnings = project->isActiveConfig("suppress_vcproj_warnings");
+    conf.CompilerVersion = which_dotnet_version(project->first("MSVC_VER").toLatin1());
 
     initCompilerTool();
 
@@ -962,16 +1006,26 @@ void VcprojGenerator::initConfiguration()
     if (!conf.OutputDirectory.endsWith("\\"))
         conf.OutputDirectory += '\\';
     if (conf.CompilerVersion >= NET2010) {
-        // The target name could have been changed.
-        conf.PrimaryOutput = project->first("TARGET").toQString();
-        if ( !conf.PrimaryOutput.isEmpty() && !project->first("TARGET_VERSION_EXT").isEmpty() && project->isActiveConfig("shared"))
-            conf.PrimaryOutput.append(project->first("TARGET_VERSION_EXT").toQString());
+        conf.PlatformToolSet = retrievePlatformToolSet();
+
+        const QFileInfo targetInfo = fileInfo(project->first("MSVCPROJ_TARGET").toQString());
+        conf.PrimaryOutput = targetInfo.completeBaseName();
+
+        const QString targetSuffix = targetInfo.suffix();
+        if (!isStandardSuffix(targetSuffix))
+            conf.PrimaryOutputExtension = '.' + targetSuffix;
     }
 
     if (conf.CompilerVersion >= NET2012) {
         conf.WinRT = project->isActiveConfig("winrt");
-        if (conf.WinRT)
+        if (conf.WinRT) {
             conf.WinPhone = project->isActiveConfig("winphone");
+            conf.WinPhone80 = project->first("WINTARGET_VER") == "WP80";
+            // Saner defaults
+            conf.compiler.UsePrecompiledHeader = pchNone;
+            conf.compiler.CompileAsWinRT = _False;
+            conf.linker.GenerateWindowsMetadata = _False;
+        }
     }
 
     conf.Name = project->values("BUILD_NAME").join(' ');
@@ -988,7 +1042,7 @@ void VcprojGenerator::initConfiguration()
     conf.ATLMinimizesCRunTimeLibraryUsage = (project->first("ATLMinimizesCRunTimeLibraryUsage").isEmpty() ? _False : _True);
     conf.BuildBrowserInformation = triState(temp.isEmpty() ? (short)unset : temp.toShort());
     temp = project->first("CharacterSet");
-    conf.CharacterSet = charSet(temp.isEmpty() ? (short)charSetNotSet : temp.toShort());
+    conf.CharacterSet = charSet(temp.isEmpty() ? short(conf.WinRT ? charSetUnicode : charSetNotSet) : temp.toShort());
     conf.DeleteExtensionsOnClean = project->first("DeleteExtensionsOnClean").toQString();
     conf.ImportLibrary = conf.linker.ImportLibrary;
     conf.IntermediateDirectory = project->first("OBJECTS_DIR").toQString();
@@ -1009,6 +1063,7 @@ void VcprojGenerator::initConfiguration()
     if ((!project->isHostBuild() && !project->isEmpty("CE_SDK") && !project->isEmpty("CE_ARCH"))
             || conf.WinRT)
         initDeploymentTool();
+    initWinDeployQtTool();
     initPreLinkEventTools();
 
     if (!isDebug)
@@ -1122,7 +1177,7 @@ void VcprojGenerator::initResourceTool()
     // to add it for the compiler) However, the resource tool does not do this.
     if(project->isActiveConfig("debug"))
         conf.resource.PreprocessorDefinitions += "_DEBUG";
-    if(project->isActiveConfig("staticlib"))
+    if (conf.CompilerVersion < NET2010 && project->isActiveConfig("staticlib"))
         conf.resource.ResourceOutputFileName = "$(OutDir)\\$(InputName).res";
 }
 
@@ -1306,11 +1361,26 @@ void VcprojGenerator::initDeploymentTool()
         if (conf.WinRT) {
             vcProject.DeploymentFiles.Project = this;
             vcProject.DeploymentFiles.Config = &(vcProject.Configuration);
-            vcProject.DeploymentFiles.CustomBuild = none;
         }
     }
 }
 
+void VcprojGenerator::initWinDeployQtTool()
+{
+    VCConfiguration &conf = vcProject.Configuration;
+    conf.windeployqt.ExcludedFromBuild = true;
+    if (project->isActiveConfig("windeployqt")) {
+        conf.windeployqt.Record = QStringLiteral("$(TargetName).windeployqt.$(Platform).$(Configuration)");
+        conf.windeployqt.CommandLine =
+                MakefileGenerator::shellQuote(QDir::toNativeSeparators(project->first("QMAKE_WINDEPLOYQT").toQString()))
+                + QLatin1Char(' ') + project->values("WINDEPLOYQT_OPTIONS").join(QLatin1Char(' '))
+                + QStringLiteral(" -list relative -dir \"$(MSBuildProjectDirectory)\" \"$(OutDir)\\$(TargetName).exe\" > ")
+                + MakefileGenerator::shellQuote(conf.windeployqt.Record);
+        conf.windeployqt.config = &vcProject.Configuration;
+        conf.windeployqt.ExcludedFromBuild = false;
+    }
+}
+
 void VcprojGenerator::initPreLinkEventTools()
 {
     VCConfiguration &conf = vcProject.Configuration;
@@ -1329,7 +1399,6 @@ void VcprojGenerator::initRootFiles()
 
     vcProject.RootFiles.Project = this;
     vcProject.RootFiles.Config = &(vcProject.Configuration);
-    vcProject.RootFiles.CustomBuild = none;
 }
 
 void VcprojGenerator::initSourceFiles()
@@ -1342,7 +1411,6 @@ void VcprojGenerator::initSourceFiles()
 
     vcProject.SourceFiles.Project = this;
     vcProject.SourceFiles.Config = &(vcProject.Configuration);
-    vcProject.SourceFiles.CustomBuild = none;
 }
 
 void VcprojGenerator::initHeaderFiles()
@@ -1394,7 +1462,6 @@ void VcprojGenerator::initLexYaccFiles()
 
     vcProject.LexYaccFiles.Project = this;
     vcProject.LexYaccFiles.Config = &(vcProject.Configuration);
-    vcProject.LexYaccFiles.CustomBuild = lexyacc;
 }
 
 void VcprojGenerator::initTranslationFiles()
@@ -1408,7 +1475,6 @@ void VcprojGenerator::initTranslationFiles()
 
     vcProject.TranslationFiles.Project = this;
     vcProject.TranslationFiles.Config = &(vcProject.Configuration);
-    vcProject.TranslationFiles.CustomBuild = none;
 }
 
 void VcprojGenerator::initFormFiles()
@@ -1417,13 +1483,9 @@ void VcprojGenerator::initFormFiles()
     vcProject.FormFiles.ParseFiles = _False;
     vcProject.FormFiles.Filter = "ui";
     vcProject.FormFiles.Guid = _GUIDFormFiles;
-
     vcProject.FormFiles.addFiles(project->values("FORMS"));
-    vcProject.FormFiles.addFiles(project->values("FORMS3"));
-
     vcProject.FormFiles.Project = this;
     vcProject.FormFiles.Config = &(vcProject.Configuration);
-    vcProject.FormFiles.CustomBuild = none;
 }
 
 void VcprojGenerator::initResourceFiles()
@@ -1473,14 +1535,12 @@ void VcprojGenerator::initResourceFiles()
 
     vcProject.ResourceFiles.Project = this;
     vcProject.ResourceFiles.Config = &(vcProject.Configuration);
-    vcProject.ResourceFiles.CustomBuild = none;
 }
 
 void VcprojGenerator::initExtraCompilerOutputs()
 {
     ProStringList otherFilters;
     otherFilters << "FORMS"
-                 << "FORMS3"
                  << "GENERATED_FILES"
                  << "GENERATED_SOURCES"
                  << "HEADERS"
@@ -1551,7 +1611,6 @@ void VcprojGenerator::initExtraCompilerOutputs()
         }
         extraCompile.Project = this;
         extraCompile.Config = &(vcProject.Configuration);
-        extraCompile.CustomBuild = none;
 
         vcProject.ExtraCompilersFiles.append(extraCompile);
     }
@@ -1629,7 +1688,6 @@ void VcprojGenerator::initOld()
             inc = QString("\"%1\"").arg(inc); // Quote all paths if not quoted already
         project->values("MSVCPROJ_INCPATH").append("-I" + inc);
     }
-    project->values("MSVCPROJ_INCPATH").append("-I" + specdir());
 
     QString dest = Option::fixPathToTargetOS(project->first("TARGET").toQString()) + project->first("TARGET_EXT");
     project->values("MSVCPROJ_TARGET") = ProStringList(dest);
diff --git a/qmake/generators/win32/msvc_vcproj.h b/qmake/generators/win32/msvc_vcproj.h
index d531085307..f436b6da20 100644
--- a/qmake/generators/win32/msvc_vcproj.h
+++ b/qmake/generators/win32/msvc_vcproj.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -109,6 +101,7 @@ protected:
     void initPreBuildEventTools();
     void initPostBuildEventTools();
     void initDeploymentTool();
+    void initWinDeployQtTool();
     void initPreLinkEventTools();
     void initRootFiles();
     void initSourceFiles();
@@ -143,6 +136,8 @@ private:
                                       QHash<QString, ProStringList> &subdirProjectLookup,
                                       const ProStringList &allDependencies = ProStringList());
     QUuid increaseUUID(const QUuid &id);
+    QString retrievePlatformToolSet() const;
+    bool isStandardSuffix(const QString &suffix) const;
     friend class VCFilter;
 };
 
diff --git a/qmake/generators/win32/msvc_vcxproj.cpp b/qmake/generators/win32/msvc_vcxproj.cpp
index 8e2cc2de1e..97439115b6 100644
--- a/qmake/generators/win32/msvc_vcxproj.cpp
+++ b/qmake/generators/win32/msvc_vcxproj.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/generators/win32/msvc_vcxproj.h b/qmake/generators/win32/msvc_vcxproj.h
index 95e3a046f0..4ff7403e13 100644
--- a/qmake/generators/win32/msvc_vcxproj.h
+++ b/qmake/generators/win32/msvc_vcxproj.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/generators/win32/winmakefile.cpp b/qmake/generators/win32/winmakefile.cpp
index 30d28e6e11..3a2e146a33 100644
--- a/qmake/generators/win32/winmakefile.cpp
+++ b/qmake/generators/win32/winmakefile.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -89,12 +81,12 @@ Win32MakefileGenerator::findHighestVersion(const QString &d, const QString &stem
         QRegExp regx(QString("((lib)?%1([0-9]*)).(%2|prl)$").arg(stem).arg(ext), Qt::CaseInsensitive);
         for(QStringList::Iterator it = entries.begin(); it != entries.end(); ++it) {
             if(regx.exactMatch((*it))) {
-				if (!regx.cap(3).isEmpty()) {
-					bool ok = true;
-					int num = regx.cap(3).toInt(&ok);
-					biggest = qMax(biggest, (!ok ? -1 : num));
-				}
-			}
+                if (!regx.cap(3).isEmpty()) {
+                    bool ok = true;
+                    int num = regx.cap(3).toInt(&ok);
+                    biggest = qMax(biggest, (!ok ? -1 : num));
+                }
+            }
         }
     }
     if(libInfoRead
@@ -485,20 +477,20 @@ void Win32MakefileGenerator::processRcFileVar()
             rcFile.close();
         }
         if (writeRcFile) {
-	    bool ok;
-	    ok = rcFile.open(QFile::WriteOnly);
-	    if (!ok) {
-		// The file can't be opened... try creating the containing
-		// directory first (needed for clean shadow builds)
-		QDir().mkpath(QFileInfo(rcFile).path());
-		ok = rcFile.open(QFile::WriteOnly);
-	    }
-	    if (!ok) {
-		::fprintf(stderr, "Cannot open for writing: %s", rcFile.fileName().toLatin1().constData());
-		::exit(1);
-	    }
-	    rcFile.write(rcString);
-	    rcFile.close();
+            bool ok;
+            ok = rcFile.open(QFile::WriteOnly);
+            if (!ok) {
+                // The file can't be opened... try creating the containing
+                // directory first (needed for clean shadow builds)
+                QDir().mkpath(QFileInfo(rcFile).path());
+                ok = rcFile.open(QFile::WriteOnly);
+            }
+            if (!ok) {
+                ::fprintf(stderr, "Cannot open for writing: %s", rcFile.fileName().toLatin1().constData());
+                ::exit(1);
+            }
+            rcFile.write(rcString);
+            rcFile.close();
         }
         if (project->values("QMAKE_WRITE_DEFAULT_RC").isEmpty())
             project->values("RC_FILE").insert(0, rcFile.fileName());
@@ -530,7 +522,7 @@ void Win32MakefileGenerator::processRcFileVar()
         }
         project->values("RES_FILE").first() = Option::fixPathToTargetOS(
                     project->values("RES_FILE").first().toQString(), false, false);
-	project->values("POST_TARGETDEPS") += project->values("RES_FILE");
+        project->values("POST_TARGETDEPS") += project->values("RES_FILE");
         project->values("CLEAN_FILES") += project->values("RES_FILE");
     }
 }
@@ -545,12 +537,13 @@ void Win32MakefileGenerator::writeCleanParts(QTextStream &t)
             const QString del_statement("-$(DEL_FILE)");
             if(project->isActiveConfig("no_delete_multiple_files")) {
                 for (ProStringList::ConstIterator it = list.begin(); it != list.end(); ++it)
-                    t << "\n\t" << del_statement << " " << escapeFilePath((*it));
+                    t << "\n\t" << del_statement
+                      << ' ' << escapeFilePath(Option::fixPathToTargetOS((*it).toQString()));
             } else {
                 QString files, file;
                 const int commandlineLimit = 2047; // NT limit, expanded
                 for (ProStringList::ConstIterator it = list.begin(); it != list.end(); ++it) {
-                    file = " " + escapeFilePath((*it));
+                    file = ' ' + escapeFilePath(Option::fixPathToTargetOS((*it).toQString()));
                     if(del_statement.length() + files.length() +
                        qMax(fixEnvVariables(file).length(), file.length()) > commandlineLimit) {
                         t << "\n\t" << del_statement << files;
@@ -565,7 +558,7 @@ void Win32MakefileGenerator::writeCleanParts(QTextStream &t)
     }
     t << endl << endl;
 
-    t << "distclean: clean";
+    t << "distclean: clean " << var("DISTCLEAN_DEPS");
     {
         const char *clean_targets[] = { "QMAKE_DISTCLEAN", 0 };
         for(int i = 0; clean_targets[i]; ++i) {
@@ -613,8 +606,7 @@ void Win32MakefileGenerator::writeIncPart(QTextStream &t)
         if(!inc.isEmpty())
             t << "-I\"" << inc << "\" ";
     }
-    t << "-I\"" << specdir() << "\""
-      << endl;
+    t << endl;
 }
 
 void Win32MakefileGenerator::writeStandardParts(QTextStream &t)
@@ -678,7 +670,9 @@ void Win32MakefileGenerator::writeStandardParts(QTextStream &t)
     writeExtraCompilerVariables(t);
     writeExtraVariables(t);
 
-    t << "DIST          = " << varList("DISTFILES") << endl;
+    t << "DIST          = " << varList("DISTFILES") << " "
+      << varList("HEADERS") << " "
+      << varList("SOURCES") << endl;
     t << "QMAKE_TARGET  = " << var("QMAKE_ORIG_TARGET") << endl;
     // The comment is important to maintain variable compatibility with Unix
     // Makefiles, while not interpreting a trailing-slash as a linebreak
@@ -883,7 +877,7 @@ QString Win32MakefileGenerator::escapeFilePath(const QString &path) const
     QString ret = path;
     if(!ret.isEmpty()) {
         ret = unescapeFilePath(ret);
-        if(ret.contains(" "))
+        if (ret.contains(' ') || ret.contains('\t'))
             ret = "\"" + ret + "\"";
         debug_msg(2, "EscapeFilePath: %s -> %s", path.toLatin1().constData(), ret.toLatin1().constData());
     }
diff --git a/qmake/generators/win32/winmakefile.h b/qmake/generators/win32/winmakefile.h
index 0f120c326e..3016bad5b4 100644
--- a/qmake/generators/win32/winmakefile.h
+++ b/qmake/generators/win32/winmakefile.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/generators/xmloutput.cpp b/qmake/generators/xmloutput.cpp
index 80008cae8c..9cc8cdca0d 100644
--- a/qmake/generators/xmloutput.cpp
+++ b/qmake/generators/xmloutput.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/generators/xmloutput.h b/qmake/generators/xmloutput.h
index 7b3c5c87f3..5b66d63043 100644
--- a/qmake/generators/xmloutput.h
+++ b/qmake/generators/xmloutput.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/library/ioutils.cpp b/qmake/library/ioutils.cpp
index cc19aa5c42..8dd88bf9a5 100644
--- a/qmake/library/ioutils.cpp
+++ b/qmake/library/ioutils.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/library/ioutils.h b/qmake/library/ioutils.h
index d69725fa27..ba6e2708cb 100644
--- a/qmake/library/ioutils.h
+++ b/qmake/library/ioutils.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/library/proitems.cpp b/qmake/library/proitems.cpp
index b0e3414e46..97cc590d84 100644
--- a/qmake/library/proitems.cpp
+++ b/qmake/library/proitems.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -424,8 +416,8 @@ QStringList ProStringList::toQStringList() const
 {
     QStringList ret;
     ret.reserve(size());
-    foreach (const ProString &str, *this)
-        ret << str.toQString();
+    for (int i = 0; i < size(); i++) // foreach causes MSVC2010 ICE
+        ret << at(i).toQString();
     return ret;
 }
 
diff --git a/qmake/library/proitems.h b/qmake/library/proitems.h
index 13693837b9..28178ac9a6 100644
--- a/qmake/library/proitems.h
+++ b/qmake/library/proitems.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/library/qmake_global.h b/qmake/library/qmake_global.h
index acb95e7ab3..3bb9d9955f 100644
--- a/qmake/library/qmake_global.h
+++ b/qmake/library/qmake_global.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/library/qmakebuiltins.cpp b/qmake/library/qmakebuiltins.cpp
index 96de34fd14..b735822806 100644
--- a/qmake/library/qmakebuiltins.cpp
+++ b/qmake/library/qmakebuiltins.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -99,7 +91,7 @@ enum ExpandFunc {
     E_UPPER, E_LOWER, E_TITLE, E_FILES, E_PROMPT, E_RE_ESCAPE, E_VAL_ESCAPE,
     E_REPLACE, E_SORT_DEPENDS, E_RESOLVE_DEPENDS, E_ENUMERATE_VARS,
     E_SHADOWED, E_ABSOLUTE_PATH, E_RELATIVE_PATH, E_CLEAN_PATH,
-    E_SYSTEM_PATH, E_SHELL_PATH, E_SYSTEM_QUOTE, E_SHELL_QUOTE
+    E_SYSTEM_PATH, E_SHELL_PATH, E_SYSTEM_QUOTE, E_SHELL_QUOTE, E_GETENV
 };
 
 enum TestFunc {
@@ -156,6 +148,7 @@ void QMakeEvaluator::initFunctionStatics()
         { "shell_path", E_SHELL_PATH },
         { "system_quote", E_SYSTEM_QUOTE },
         { "shell_quote", E_SHELL_QUOTE },
+        { "getenv", E_GETENV },
     };
     for (unsigned i = 0; i < sizeof(expandInits)/sizeof(expandInits[0]); ++i)
         statics.expands.insert(ProKey(expandInits[i].name), expandInits[i].func);
@@ -436,8 +429,9 @@ QByteArray QMakeEvaluator::getCommandOutput(const QString &args) const
 
 void QMakeEvaluator::populateDeps(
         const ProStringList &deps, const ProString &prefix, const ProStringList &suffixes,
+        const ProString &priosfx,
         QHash<ProKey, QSet<ProKey> > &dependencies, ProValueMap &dependees,
-        ProStringList &rootSet) const
+        QMultiMap<int, ProString> &rootSet) const
 {
     foreach (const ProString &item, deps)
         if (!dependencies.contains(item.toKey())) {
@@ -446,13 +440,13 @@ void QMakeEvaluator::populateDeps(
             foreach (const ProString &suffix, suffixes)
                 depends += values(ProKey(prefix + item + suffix));
             if (depends.isEmpty()) {
-                rootSet << item;
+                rootSet.insert(first(ProKey(prefix + item + priosfx)).toInt(), item);
             } else {
                 foreach (const ProString &dep, depends) {
                     dset.insert(dep.toKey());
                     dependees[dep.toKey()] << item;
                 }
-                populateDeps(depends, prefix, suffixes, dependencies, dependees, rootSet);
+                populateDeps(depends, prefix, suffixes, priosfx, dependencies, dependees, rootSet);
             }
         }
 }
@@ -973,27 +967,31 @@ ProStringList QMakeEvaluator::evaluateBuiltinExpand(
         break;
     case E_SORT_DEPENDS:
     case E_RESOLVE_DEPENDS:
-        if (args.count() < 1 || args.count() > 3) {
-            evalError(fL1S("%1(var, [prefix, [suffixes]]) requires one to three arguments.")
+        if (args.count() < 1 || args.count() > 4) {
+            evalError(fL1S("%1(var, [prefix, [suffixes, [prio-suffix]]]) requires one to four arguments.")
                       .arg(func.toQString(m_tmp1)));
         } else {
             QHash<ProKey, QSet<ProKey> > dependencies;
             ProValueMap dependees;
-            ProStringList rootSet;
+            QMultiMap<int, ProString> rootSet;
             ProStringList orgList = values(args.at(0).toKey());
-            populateDeps(orgList, (args.count() < 2 ? ProString() : args.at(1)),
+            ProString prefix = args.count() < 2 ? ProString() : args.at(1);
+            ProString priosfx = args.count() < 4 ? ProString(".priority") : args.at(3);
+            populateDeps(orgList, prefix,
                          args.count() < 3 ? ProStringList(ProString(".depends"))
                                           : split_value_list(args.at(2).toQString(m_tmp2)),
-                         dependencies, dependees, rootSet);
-            for (int i = 0; i < rootSet.size(); ++i) {
-                const ProString &item = rootSet.at(i);
+                         priosfx, dependencies, dependees, rootSet);
+            while (!rootSet.isEmpty()) {
+                QMultiMap<int, ProString>::iterator it = rootSet.begin();
+                const ProString item = *it;
+                rootSet.erase(it);
                 if ((func_t == E_RESOLVE_DEPENDS) || orgList.contains(item))
                     ret.prepend(item);
                 foreach (const ProString &dep, dependees[item.toKey()]) {
                     QSet<ProKey> &dset = dependencies[dep.toKey()];
-                    dset.remove(rootSet.at(i).toKey()); // *Don't* use 'item' - rootSet may have changed!
+                    dset.remove(item.toKey());
                     if (dset.isEmpty())
-                        rootSet << dep;
+                        rootSet.insert(first(ProKey(prefix + dep + priosfx)).toInt(), dep);
                 }
             }
         }
@@ -1063,10 +1061,18 @@ ProStringList QMakeEvaluator::evaluateBuiltinExpand(
             evalError(fL1S("shell_path(path) requires one argument."));
         } else {
             QString rstr = args.at(0).toQString(m_tmp1);
-            if (m_dirSep.startsWith(QLatin1Char('\\')))
+            if (m_dirSep.startsWith(QLatin1Char('\\'))) {
                 rstr.replace(QLatin1Char('/'), QLatin1Char('\\'));
-            else
+            } else {
                 rstr.replace(QLatin1Char('\\'), QLatin1Char('/'));
+#ifdef Q_OS_WIN
+                // Convert d:/foo/bar to msys-style /d/foo/bar.
+                if (rstr.length() > 2 && rstr.at(1) == QLatin1Char(':') && rstr.at(2) == QLatin1Char('/')) {
+                    rstr[1] = rstr.at(0);
+                    rstr[0] = QLatin1Char('/');
+                }
+#endif
+            }
             ret << (rstr.isSharedWith(m_tmp1) ? args.at(0) : ProString(rstr).setSource(args.at(0)));
         }
         break;
@@ -1090,6 +1096,15 @@ ProStringList QMakeEvaluator::evaluateBuiltinExpand(
             ret << (rstr.isSharedWith(m_tmp1) ? args.at(0) : ProString(rstr).setSource(args.at(0)));
         }
         break;
+    case E_GETENV:
+        if (args.count() != 1) {
+            evalError(fL1S("getenv(arg) requires one argument."));
+        } else {
+            const ProString &var = args.at(0);
+            const ProString &val = ProString(m_option->getEnv(var.toQString(m_tmp1)));
+            ret << val;
+        }
+        break;
     default:
         evalError(fL1S("Function '%1' is not implemented.").arg(func.toQString(m_tmp1)));
         break;
@@ -1267,9 +1282,9 @@ QMakeEvaluator::VisitReturn QMakeEvaluator::evaluateBuiltinConditional(
             return ReturnFalse;
         }
         int cnt = values(map(args.at(0))).count();
+        int val = args.at(1).toQString(m_tmp1).toInt();
         if (args.count() == 3) {
             const ProString &comp = args.at(2);
-            const int val = args.at(1).toQString(m_tmp1).toInt();
             if (comp == QLatin1String(">") || comp == QLatin1String("greaterThan")) {
                 return returnBool(cnt > val);
             } else if (comp == QLatin1String(">=")) {
@@ -1280,13 +1295,13 @@ QMakeEvaluator::VisitReturn QMakeEvaluator::evaluateBuiltinConditional(
                 return returnBool(cnt <= val);
             } else if (comp == QLatin1String("equals") || comp == QLatin1String("isEqual")
                        || comp == QLatin1String("=") || comp == QLatin1String("==")) {
-                return returnBool(cnt == val);
+                // fallthrough
             } else {
                 evalError(fL1S("Unexpected modifier to count(%2).").arg(comp.toQString(m_tmp1)));
                 return ReturnFalse;
             }
         }
-        return returnBool(cnt == args.at(1).toQString(m_tmp1).toInt());
+        return returnBool(cnt == val);
     }
     case T_GREATERTHAN:
     case T_LESSTHAN: {
@@ -1727,14 +1742,14 @@ QMakeEvaluator::VisitReturn QMakeEvaluator::evaluateBuiltinConditional(
         if (target == TargetSuper) {
             if (m_superfile.isEmpty()) {
                 m_superfile = QDir::cleanPath(m_outputDir + QLatin1String("/.qmake.super"));
-                printf("Info: creating super cache file %s\n", qPrintable(m_superfile));
+                printf("Info: creating super cache file %s\n", qPrintable(QDir::toNativeSeparators(m_superfile)));
                 valuesRef(ProKey("_QMAKE_SUPER_CACHE_")) << ProString(m_superfile);
             }
             fn = m_superfile;
         } else if (target == TargetCache) {
             if (m_cachefile.isEmpty()) {
                 m_cachefile = QDir::cleanPath(m_outputDir + QLatin1String("/.qmake.cache"));
-                printf("Info: creating cache file %s\n", qPrintable(m_cachefile));
+                printf("Info: creating cache file %s\n", qPrintable(QDir::toNativeSeparators(m_cachefile)));
                 valuesRef(ProKey("_QMAKE_CACHE_")) << ProString(m_cachefile);
                 // We could update m_{source,build}Root and m_featureRoots here, or even
                 // "re-home" our rootEnv, but this doesn't sound too useful - if somebody
@@ -1748,7 +1763,7 @@ QMakeEvaluator::VisitReturn QMakeEvaluator::evaluateBuiltinConditional(
             if (fn.isEmpty())
                 fn = QDir::cleanPath(m_outputDir + QLatin1String("/.qmake.stash"));
             if (!m_vfs->exists(fn)) {
-                printf("Info: creating stash file %s\n", qPrintable(fn));
+                printf("Info: creating stash file %s\n", qPrintable(QDir::toNativeSeparators(fn)));
                 valuesRef(ProKey("_QMAKE_STASH_")) << ProString(fn);
             }
         }
diff --git a/qmake/library/qmakeevaluator.cpp b/qmake/library/qmakeevaluator.cpp
index 2ea5ffd45e..9b5291a08e 100644
--- a/qmake/library/qmakeevaluator.cpp
+++ b/qmake/library/qmakeevaluator.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -208,17 +200,17 @@ QMakeEvaluator::~QMakeEvaluator()
 {
 }
 
-void QMakeEvaluator::initFrom(const QMakeEvaluator &other)
+void QMakeEvaluator::initFrom(const QMakeEvaluator *other)
 {
-    Q_ASSERT_X(&other, "QMakeEvaluator::visitProFile", "Project not prepared");
-    m_functionDefs = other.m_functionDefs;
-    m_valuemapStack = other.m_valuemapStack;
+    Q_ASSERT_X(other, "QMakeEvaluator::visitProFile", "Project not prepared");
+    m_functionDefs = other->m_functionDefs;
+    m_valuemapStack = other->m_valuemapStack;
     m_valuemapInited = true;
-    m_qmakespec = other.m_qmakespec;
-    m_qmakespecName = other.m_qmakespecName;
-    m_mkspecPaths = other.m_mkspecPaths;
-    m_featureRoots = other.m_featureRoots;
-    m_dirSep = other.m_dirSep;
+    m_qmakespec = other->m_qmakespec;
+    m_qmakespecName = other->m_qmakespecName;
+    m_mkspecPaths = other->m_mkspecPaths;
+    m_featureRoots = other->m_featureRoots;
+    m_dirSep = other->m_dirSep;
 }
 
 //////// Evaluator tools /////////
@@ -952,6 +944,49 @@ void QMakeEvaluator::setTemplate()
     }
 }
 
+#if defined(Q_CC_MSVC)
+static ProString msvcBinDirToQMakeArch(QString subdir)
+{
+    int idx = subdir.indexOf(QLatin1Char('\\'));
+    if (idx == -1)
+        return ProString("x86");
+    subdir.remove(0, idx + 1);
+    idx = subdir.indexOf(QLatin1Char('_'));
+    if (idx >= 0)
+        subdir.remove(0, idx + 1);
+    subdir = subdir.toLower();
+    if (subdir == QStringLiteral("amd64"))
+        return ProString("x86_64");
+    return ProString(subdir);
+}
+
+static ProString defaultMsvcArchitecture()
+{
+#if defined(Q_OS_WIN64)
+    return ProString("x86_64");
+#else
+    return ProString("x86");
+#endif
+}
+
+static ProString msvcArchitecture(const QString &vcInstallDir, const QString &pathVar)
+{
+    if (vcInstallDir.isEmpty())
+        return defaultMsvcArchitecture();
+    QString vcBinDir = vcInstallDir;
+    if (vcBinDir.endsWith(QLatin1Char('\\')))
+        vcBinDir.chop(1);
+    foreach (const QString &dir, pathVar.split(QLatin1Char(';'))) {
+        if (!dir.startsWith(vcBinDir, Qt::CaseInsensitive))
+            continue;
+        const ProString arch = msvcBinDirToQMakeArch(dir.mid(vcBinDir.length() + 1));
+        if (!arch.isEmpty())
+            return arch;
+    }
+    return defaultMsvcArchitecture();
+}
+#endif // defined(Q_CC_MSVC)
+
 void QMakeEvaluator::loadDefaults()
 {
     ProValueMap &vars = m_valuemapStack.top();
@@ -1012,21 +1047,9 @@ void QMakeEvaluator::loadDefaults()
     vars[ProKey("QMAKE_HOST.arch")] << archStr;
 
 # if defined(Q_CC_MSVC) // ### bogus condition, but nobody x-builds for msvc with a different qmake
-    QLatin1Char backslash('\\');
-    QString paths = m_option->getEnv(QLatin1String("PATH"));
-    QString vcBin64 = m_option->getEnv(QLatin1String("VCINSTALLDIR"));
-    if (!vcBin64.endsWith(backslash))
-        vcBin64.append(backslash);
-    vcBin64.append(QLatin1String("bin\\amd64"));
-    QString vcBinX86_64 = m_option->getEnv(QLatin1String("VCINSTALLDIR"));
-    if (!vcBinX86_64.endsWith(backslash))
-        vcBinX86_64.append(backslash);
-    vcBinX86_64.append(QLatin1String("bin\\x86_amd64"));
-    if (paths.contains(vcBin64, Qt::CaseInsensitive)
-            || paths.contains(vcBinX86_64, Qt::CaseInsensitive))
-        vars[ProKey("QMAKE_TARGET.arch")] << ProString("x86_64");
-    else
-        vars[ProKey("QMAKE_TARGET.arch")] << ProString("x86");
+    vars[ProKey("QMAKE_TARGET.arch")] = msvcArchitecture(
+                m_option->getEnv(QLatin1String("VCINSTALLDIR")),
+                m_option->getEnv(QLatin1String("PATH")));
 # endif
 #elif defined(Q_OS_UNIX)
     struct utsname name;
@@ -1355,7 +1378,7 @@ QMakeEvaluator::VisitReturn QMakeEvaluator::visitProFile(
             return ReturnFalse;
 #endif
 
-        initFrom(*baseEnv->evaluator);
+        initFrom(baseEnv->evaluator);
     } else {
         if (!m_valuemapInited)
             loadDefaults();
diff --git a/qmake/library/qmakeevaluator.h b/qmake/library/qmakeevaluator.h
index de13033481..73fd5bb82f 100644
--- a/qmake/library/qmakeevaluator.h
+++ b/qmake/library/qmakeevaluator.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -49,8 +41,10 @@
 #include "qmakeparser.h"
 #include "ioutils.h"
 
+#include <qiodevice.h>
 #include <qlist.h>
 #include <qlinkedlist.h>
+#include <qmap.h>
 #include <qset.h>
 #include <qstack.h>
 #include <qstring.h>
@@ -167,7 +161,7 @@ public:
     bool prepareProject(const QString &inDir);
     bool loadSpecInternal();
     bool loadSpec();
-    void initFrom(const QMakeEvaluator &other);
+    void initFrom(const QMakeEvaluator *other);
     void setupProject();
     void evaluateCommand(const QString &cmds, const QString &where);
     void applyExtraConfigs();
@@ -238,8 +232,9 @@ public:
 
     void populateDeps(
             const ProStringList &deps, const ProString &prefix, const ProStringList &suffixes,
-            QHash<ProKey, QSet<ProKey> > &dependencies,
-            ProValueMap &dependees, ProStringList &rootSet) const;
+            const ProString &priosfx,
+            QHash<ProKey, QSet<ProKey> > &dependencies, ProValueMap &dependees,
+            QMultiMap<int, ProString> &rootSet) const;
 
     VisitReturn writeFile(const QString &ctx, const QString &fn, QIODevice::OpenMode mode,
                           const QString &contents);
diff --git a/qmake/library/qmakeevaluator_p.h b/qmake/library/qmakeevaluator_p.h
index dd0bdd4c7f..dd63bcea02 100644
--- a/qmake/library/qmakeevaluator_p.h
+++ b/qmake/library/qmakeevaluator_p.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/library/qmakeglobals.cpp b/qmake/library/qmakeglobals.cpp
index 1c3148b0b2..aeb8a6c803 100644
--- a/qmake/library/qmakeglobals.cpp
+++ b/qmake/library/qmakeglobals.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/library/qmakeglobals.h b/qmake/library/qmakeglobals.h
index 1f217138b4..6950d32807 100644
--- a/qmake/library/qmakeglobals.h
+++ b/qmake/library/qmakeglobals.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/library/qmakeparser.cpp b/qmake/library/qmakeparser.cpp
index 0de3804764..3065d4dd5a 100644
--- a/qmake/library/qmakeparser.cpp
+++ b/qmake/library/qmakeparser.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/library/qmakeparser.h b/qmake/library/qmakeparser.h
index baf0a12045..f8bbe905c3 100644
--- a/qmake/library/qmakeparser.h
+++ b/qmake/library/qmakeparser.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/library/qmakevfs.cpp b/qmake/library/qmakevfs.cpp
index 2039387a0f..125d074ce3 100644
--- a/qmake/library/qmakevfs.cpp
+++ b/qmake/library/qmakevfs.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/library/qmakevfs.h b/qmake/library/qmakevfs.h
index 13204ece9d..80e0eec07b 100644
--- a/qmake/library/qmakevfs.h
+++ b/qmake/library/qmakevfs.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/main.cpp b/qmake/main.cpp
index f5116ba752..e4b5e6a9cb 100644
--- a/qmake/main.cpp
+++ b/qmake/main.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -252,8 +244,10 @@ int runQMake(int argc, char **argv)
 #endif
         if(!dir.isNull() && dir != ".")
             Option::output_dir = dir;
-        if(QDir::isRelativePath(Option::output_dir))
+        if (QDir::isRelativePath(Option::output_dir)) {
+            Option::output.setFileName(fi.fileName());
             Option::output_dir.prepend(oldpwd + QLatin1Char('/'));
+        }
         Option::output_dir = QDir::cleanPath(Option::output_dir);
     }
 
diff --git a/qmake/meta.cpp b/qmake/meta.cpp
index 834121a9a2..2c3649fcb5 100644
--- a/qmake/meta.cpp
+++ b/qmake/meta.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/meta.h b/qmake/meta.h
index 3cb51d03a7..fd03f4e816 100644
--- a/qmake/meta.h
+++ b/qmake/meta.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/option.cpp b/qmake/option.cpp
index 7b93144d82..5af9b100a0 100644
--- a/qmake/option.cpp
+++ b/qmake/option.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -329,9 +321,9 @@ Option::init(int argc, char **argv)
             globals->qmake_abslocation = argv0;
         } else if (argv0.contains(QLatin1Char('/'))
 #ifdef Q_OS_WIN
-		   || argv0.contains(QLatin1Char('\\'))
+                   || argv0.contains(QLatin1Char('\\'))
 #endif
-	    ) { //relative PWD
+            ) { //relative PWD
             globals->qmake_abslocation = QDir::current().absoluteFilePath(argv0);
         } else { //in the PATH
             QByteArray pEnv = qgetenv("PATH");
@@ -488,7 +480,7 @@ bool Option::postProcessProject(QMakeProject *project)
 
     Option::dir_sep = project->dirSep().toQString();
 
-    if (Option::output_dir.startsWith(project->buildRoot()))
+    if (!project->buildRoot().isEmpty() && Option::output_dir.startsWith(project->buildRoot()))
         Option::mkfile::cachefile_depth =
                 Option::output_dir.mid(project->buildRoot().length()).count('/');
 
diff --git a/qmake/option.h b/qmake/option.h
index d0436fe844..a4ca8063e0 100644
--- a/qmake/option.h
+++ b/qmake/option.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/project.cpp b/qmake/project.cpp
index 9f75d1da27..45773db784 100644
--- a/qmake/project.cpp
+++ b/qmake/project.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -60,7 +52,7 @@ QMakeProject::QMakeProject()
 QMakeProject::QMakeProject(QMakeProject *p)
     : QMakeEvaluator(Option::globals, Option::parser, Option::vfs, &Option::evalHandler)
 {
-    initFrom(*p);
+    initFrom(p);
 }
 
 bool QMakeProject::boolRet(VisitReturn vr)
diff --git a/qmake/project.h b/qmake/project.h
index 26037bb912..43f50e7c78 100644
--- a/qmake/project.h
+++ b/qmake/project.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -57,6 +49,7 @@ public:
     bool read(const QString &project, LoadFlags what = LoadAll);
 
     QString projectFile() const { return m_projectFile; }
+    QString sourceRoot() const { return m_sourceRoot.isEmpty() ? m_buildRoot : m_sourceRoot; }
     QString buildRoot() const { return m_buildRoot; }
     QString confFile() const { return m_conffile; }
     QString cacheFile() const { return m_cachefile; }
diff --git a/qmake/property.cpp b/qmake/property.cpp
index e50485ce19..051e05693c 100644
--- a/qmake/property.cpp
+++ b/qmake/property.cpp
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/property.h b/qmake/property.h
index a1f21440e0..a54fe5e43f 100644
--- a/qmake/property.h
+++ b/qmake/property.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/qmake/qmake.pri b/qmake/qmake.pri
index 661b787a55..4de41d63e6 100644
--- a/qmake/qmake.pri
+++ b/qmake/qmake.pri
@@ -29,10 +29,6 @@ HEADERS += project.h property.h \
            generators/integrity/gbuild.h \
            generators/win32/cesdkhandler.h
 
-contains(QT_EDITION, OpenSource) {
-   DEFINES += QMAKE_OPENSOURCE_EDITION
-}
-
 bootstrap { #Qt code
    SOURCES+= \
         qbitarray.cpp \
@@ -67,6 +63,7 @@ bootstrap { #Qt code
         qtextcodec.cpp \
         qutfcodec.cpp \
         qstring.cpp \
+        qstring_compat.cpp \
         qstringlist.cpp \
         qtemporaryfile.cpp \
         qtextstream.cpp \
@@ -140,7 +137,8 @@ bootstrap { #Qt code
     unix {
         SOURCES += qfilesystemengine_unix.cpp qfilesystemiterator_unix.cpp qfsfileengine_unix.cpp
         mac {
-          SOURCES += qcore_mac.cpp qsettings_mac.cpp qlocale_mac.mm
+          SOURCES += qcore_mac.cpp qsettings_mac.cpp
+          OBJECTIVE_SOURCES += qlocale_mac.mm
           LIBS += -framework ApplicationServices
         } else {
           SOURCES += qlocale_unix.cpp
@@ -149,7 +147,7 @@ bootstrap { #Qt code
         SOURCES += qfilesystemengine_win.cpp qfsfileengine_win.cpp qfilesystemiterator_win.cpp qsettings_win.cpp \
             qsystemlibrary.cpp qlocale_win.cpp registry.cpp
         win32-msvc*:LIBS += ole32.lib advapi32.lib
-        win32-g++*:LIBS += -lole32 -luuid -ladvapi32 -lkernel32
+        mingw:LIBS += -lole32 -luuid -ladvapi32 -lkernel32
     }
 
     qnx {
@@ -161,7 +159,7 @@ bootstrap { #Qt code
         QT_BOOTSTRAPPED \
         QT_NO_TEXTCODEC QT_NO_UNICODETABLES QT_NO_COMPONENT QT_NO_COMPRESS \
         QT_NO_THREAD QT_NO_QOBJECT QT_NO_GEOM_VARIANT QT_NO_DATASTREAM \
-        QT_CRYPTOGRAPHICHASH_ONLY_SHA1 QT_JSON_READONLY
+        QT_CRYPTOGRAPHICHASH_ONLY_SHA1 QT_JSON_READONLY QT_NO_STANDARDPATHS
 
     INCLUDEPATH += \
         $$QT.core.includes $$QT.core_private.includes \
diff --git a/qmake/qmake_pch.h b/qmake/qmake_pch.h
index 00f9381a72..d9ab211043 100644
--- a/qmake/qmake_pch.h
+++ b/qmake/qmake_pch.h
@@ -1,40 +1,32 @@
 /****************************************************************************
 **
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 ** Contact: http://www.qt-project.org/legal
 **
 ** This file is part of the qmake application of the Qt Toolkit.
 **
-** $QT_BEGIN_LICENSE:LGPL$
+** $QT_BEGIN_LICENSE:LGPL21$
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
+** a written agreement between you and Digia. For licensing terms and
+** conditions see http://qt.digia.com/licensing. For further information
 ** use the contact form at http://qt.digia.com/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
+** rights. These rights are described in the Digia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
diff --git a/src/corelib/tools/qstring.cpp b/src/corelib/tools/qstring.cpp
index 2c505ef033..69078679c1 100644
--- a/src/corelib/tools/qstring.cpp
+++ b/src/corelib/tools/qstring.cpp
@@ -3955,13 +3955,9 @@ static inline __m128i mergeQuestionMarks(__m128i chunk)
 extern "C" void qt_toLatin1_mips_dsp_asm(uchar *dst, const ushort *src, int length);
 #endif
 
-static QByteArray toLatin1_helper(const QChar *data, int length)
+static void toLatin1_helper(uchar *dst, const ushort *src, int length)
 {
-    QByteArray ba;
     if (length) {
-        ba.resize(length);
-        const ushort *src = reinterpret_cast<const ushort *>(data);
-        uchar *dst = (uchar*) ba.data();
 #if defined(__SSE2__)
         if (length >= 16) {
             const int chunkCount = length >> 4; // divided by 16
@@ -4016,10 +4012,60 @@ static QByteArray toLatin1_helper(const QChar *data, int length)
         }
 #endif
     }
+}
+
+QByteArray QString::toLatin1_helper(const QString &string)
+{
+    if (Q_UNLIKELY(string.isNull()))
+        return QByteArray();
+
+    return toLatin1_helper(string.constData(), string.length());
+}
+
+QByteArray QString::toLatin1_helper(const QChar *data, int length)
+{
+    QByteArray ba(length, Qt::Uninitialized);
+
+    // since we own the only copy, we're going to const_cast the constData;
+    // that avoids an unnecessary call to detach() and expansion code that will never get used
+    QT_PREPEND_NAMESPACE(toLatin1_helper)(reinterpret_cast<uchar *>(const_cast<char *>(ba.constData())),
+                                          reinterpret_cast<const ushort *>(data), length);
     return ba;
 }
 
+QByteArray QString::toLatin1_helper_inplace(QString &s)
+{
+    if (!s.isDetached())
+        return s.toLatin1();
+
+    // We can return our own buffer to the caller.
+    // Conversion to Latin-1 always shrinks the buffer by half.
+    const ushort *data = reinterpret_cast<const ushort *>(s.constData());
+    uint length = s.size();
+
+    // Swap the d pointers.
+    // Kids, avert your eyes. Don't try this at home.
+    QArrayData *ba_d = s.d;
+
+    // multiply the allocated capacity by sizeof(ushort)
+    ba_d->alloc *= sizeof(ushort);
+
+    // reset ourselves to QString()
+    s.d = QString().d;
+
+    // do the in-place conversion
+    uchar *dst = reinterpret_cast<uchar *>(ba_d->data());
+    QT_PREPEND_NAMESPACE(toLatin1_helper)(dst, data, length);
+    dst[length] = '\0';
+
+    QByteArrayDataPtr badptr = { ba_d };
+    return QByteArray(badptr);
+}
+
+
 /*!
+    \fn QByteArray QString::toLatin1() const
+
     Returns a Latin-1 representation of the string as a QByteArray.
 
     The returned byte array is undefined if the string contains non-Latin1
@@ -4028,10 +4074,6 @@ static QByteArray toLatin1_helper(const QChar *data, int length)
 
     \sa fromLatin1(), toUtf8(), toLocal8Bit(), QTextCodec
 */
-QByteArray QString::toLatin1() const
-{
-    return toLatin1_helper(unicode(), length());
-}
 
 /*!
     \fn QByteArray QString::toAscii() const
@@ -4046,19 +4088,9 @@ QByteArray QString::toLatin1() const
     \sa fromAscii(), toLatin1(), toUtf8(), toLocal8Bit(), QTextCodec
 */
 
-#if !defined(Q_OS_MAC) && defined(Q_OS_UNIX) && !defined(QT_USE_ICU)
-static QByteArray toLocal8Bit_helper(const QChar *data, int length)
-{
-#ifndef QT_NO_TEXTCODEC
-    QTextCodec *localeCodec = QTextCodec::codecForLocale();
-    if (localeCodec)
-        return localeCodec->fromUnicode(data, length);
-#endif // QT_NO_TEXTCODEC
-    return toLatin1_helper(data, length);
-}
-#endif
-
 /*!
+    \fn QByteArray QString::toLocal8Bit() const
+
     Returns the local 8-bit representation of the string as a
     QByteArray. The returned byte array is undefined if the string
     contains characters not supported by the local 8-bit encoding.
@@ -4073,17 +4105,21 @@ static QByteArray toLocal8Bit_helper(const QChar *data, int length)
 
     \sa fromLocal8Bit(), toLatin1(), toUtf8(), QTextCodec
 */
-QByteArray QString::toLocal8Bit() const
+
+QByteArray QString::toLocal8Bit_helper(const QChar *data, int size)
 {
 #ifndef QT_NO_TEXTCODEC
     QTextCodec *localeCodec = QTextCodec::codecForLocale();
     if (localeCodec)
-        return localeCodec->fromUnicode(*this);
+        return localeCodec->fromUnicode(data, size);
 #endif // QT_NO_TEXTCODEC
-    return toLatin1();
+    return toLatin1_helper(data, size);
 }
 
+
 /*!
+    \fn QByteArray QString::toUtf8() const
+
     Returns a UTF-8 representation of the string as a QByteArray.
 
     UTF-8 is a Unicode codec and can represent all characters in a Unicode
@@ -4099,12 +4135,13 @@ QByteArray QString::toLocal8Bit() const
 
     \sa fromUtf8(), toLatin1(), toLocal8Bit(), QTextCodec
 */
-QByteArray QString::toUtf8() const
+
+QByteArray QString::toUtf8_helper(const QString &str)
 {
-    if (isNull())
+    if (str.isNull())
         return QByteArray();
 
-    return QUtf8::convertFromUnicode(constData(), length(), 0);
+    return QUtf8::convertFromUnicode(str.constData(), str.length(), 0);
 }
 
 /*!
@@ -9314,7 +9351,7 @@ static inline bool qt_ends_with(const QChar *haystack, int haystackLen,
 */
 QByteArray QStringRef::toLatin1() const
 {
-    return toLatin1_helper(unicode(), length());
+    return QString::toLatin1_helper(unicode(), length());
 }
 
 /*!
diff --git a/src/corelib/tools/qstring.h b/src/corelib/tools/qstring.h
index 9778d42c1d..c5bd0e9fbb 100644
--- a/src/corelib/tools/qstring.h
+++ b/src/corelib/tools/qstring.h
@@ -460,9 +460,24 @@ public:
 
     const ushort *utf16() const;
 
+#if defined(Q_COMPILER_REF_QUALIFIERS) && !defined(QT_COMPILING_QSTRING_COMPAT_CPP)
+    QByteArray toLatin1() const & Q_REQUIRED_RESULT
+    { return toLatin1_helper(*this); }
+    QByteArray toLatin1() && Q_REQUIRED_RESULT
+    { return toLatin1_helper_inplace(*this); }
+    QByteArray toUtf8() const & Q_REQUIRED_RESULT
+    { return toUtf8_helper(*this); }
+    QByteArray toUtf8() && Q_REQUIRED_RESULT
+    { return toUtf8_helper(*this); }
+    QByteArray toLocal8Bit() const & Q_REQUIRED_RESULT
+    { return toLocal8Bit_helper(constData(), size()); }
+    QByteArray toLocal8Bit() && Q_REQUIRED_RESULT
+    { return toLocal8Bit_helper(constData(), size()); }
+#else
     QByteArray toLatin1() const Q_REQUIRED_RESULT;
     QByteArray toUtf8() const Q_REQUIRED_RESULT;
     QByteArray toLocal8Bit() const Q_REQUIRED_RESULT;
+#endif
     QVector<uint> toUcs4() const Q_REQUIRED_RESULT;
 
     // note - this are all inline so we can benefit from strlen() compile time optimizations
@@ -717,6 +732,11 @@ private:
     static Data *fromAscii_helper(const char *str, int size = -1);
     static QString fromUtf8_helper(const char *str, int size);
     static QString fromLocal8Bit_helper(const char *, int size);
+    static QByteArray toLatin1_helper(const QString &);
+    static QByteArray toLatin1_helper(const QChar *data, int size);
+    static QByteArray toLatin1_helper_inplace(QString &);
+    static QByteArray toUtf8_helper(const QString &);
+    static QByteArray toLocal8Bit_helper(const QChar *data, int size);
     static int toUcs4_helper(const ushort *uc, int length, uint *out);
     void replace_helper(uint *indices, int nIndices, int blen, const QChar *after, int alen);
     friend class QCharRef;
diff --git a/src/corelib/tools/qstring_compat.cpp b/src/corelib/tools/qstring_compat.cpp
new file mode 100644
index 0000000000..34c37a9cb8
--- /dev/null
+++ b/src/corelib/tools/qstring_compat.cpp
@@ -0,0 +1,68 @@
+/****************************************************************************
+**
+** Copyright (C) 2013 Intel Corporation
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#if defined(QSTRING_H) && !defined(QT_BOOTSTRAPPED)
+#  error "This file cannot be compiled with pre-compiled headers"
+//       (unless it's configure.exe, which is bootstrapped)
+#endif
+#define QT_COMPILING_QSTRING_COMPAT_CPP
+
+#include "qstring.h"
+
+QT_BEGIN_NAMESPACE
+
+// all these implementations must be the same as the inline versions in qstring.h
+QByteArray QString::toLatin1() const
+{
+    return toLatin1_helper(*this);
+}
+
+QByteArray QString::toLocal8Bit() const
+{
+    return toLocal8Bit_helper(constData(), size());
+}
+
+QByteArray QString::toUtf8() const
+{
+    return toUtf8_helper(*this);
+}
+
+QT_END_NAMESPACE
diff --git a/src/corelib/tools/tools.pri b/src/corelib/tools/tools.pri
index cac596f0bc..33da04ebc2 100644
--- a/src/corelib/tools/tools.pri
+++ b/src/corelib/tools/tools.pri
@@ -114,6 +114,9 @@ SOURCES += \
         tools/qvector.cpp \
         tools/qvsnprintf.cpp
 
+NO_PCH_SOURCES = tools/qstring_compat.cpp
+false: SOURCES += $$NO_PCH_SOURCES
+
 !nacl:mac: {
     SOURCES += tools/qelapsedtimer_mac.cpp
     OBJECTIVE_SOURCES += tools/qlocale_mac.mm \
@@ -193,6 +196,17 @@ INCLUDEPATH += ../3rdparty/md5 \
 
 TR_EXCLUDE += ../3rdparty/*
 
+no_pch_compiler.commands = $$QMAKE_CXX -c $(CXXFLAGS) $(INCPATH) ${QMAKE_FILE_IN}
+win32:!gcc:no_pch_compiler.commands += -Fo${QMAKE_FILE_OUT}
+else:no_pch_compiler.commands += -o ${QMAKE_FILE_OUT}
+no_pch_compiler.dependency_type = TYPE_C
+no_pch_compiler.output = ${QMAKE_VAR_OBJECTS_DIR}${QMAKE_FILE_BASE}$${first(QMAKE_EXT_OBJ)}
+no_pch_compiler.input = NO_PCH_SOURCES
+no_pch_compiler.variable_out = OBJECTS
+no_pch_compiler.name = compiling[no_pch] ${QMAKE_FILE_IN}
+silent:no_pch_compiler.commands = @echo compiling[no_pch] ${QMAKE_FILE_IN} && $$no_pch_compiler.commands
+QMAKE_EXTRA_COMPILERS += no_pch_compiler
+
 # MIPS DSP
 MIPS_DSP_ASM += tools/qstring_mips_dsp_asm.S
 MIPS_DSP_HEADERS += ../gui/painting/qt_mips_asm_dsp_p.h
diff --git a/src/tools/bootstrap/bootstrap.pro b/src/tools/bootstrap/bootstrap.pro
index dd5189758d..967f45d5df 100644
--- a/src/tools/bootstrap/bootstrap.pro
+++ b/src/tools/bootstrap/bootstrap.pro
@@ -100,6 +100,7 @@ SOURCES += \
            ../../corelib/tools/qsize.cpp \
            ../../corelib/tools/qline.cpp \
            ../../corelib/tools/qstring.cpp \
+           ../../corelib/tools/qstring_compat.cpp \
            ../../corelib/tools/qstringlist.cpp \
            ../../corelib/tools/qvector.cpp \
            ../../corelib/tools/qvsnprintf.cpp \
diff --git a/tests/auto/corelib/tools/qstring/tst_qstring.cpp b/tests/auto/corelib/tools/qstring/tst_qstring.cpp
index 12fe5259d9..7e74abaff5 100644
--- a/tests/auto/corelib/tools/qstring/tst_qstring.cpp
+++ b/tests/auto/corelib/tools/qstring/tst_qstring.cpp
@@ -3880,6 +3880,14 @@ void tst_QString::toLatin1Roundtrip()
     // and back:
     QCOMPARE(QString::fromLatin1(latin1, latin1.length()).length(), unicodedst.length());
     QCOMPARE(QString::fromLatin1(latin1, latin1.length()), unicodedst);
+
+    // try the rvalue version of toLatin1()
+    QString s = unicodesrc;
+    QCOMPARE(qMove(s).toLatin1(), latin1);
+
+    // and verify that the moved-from object can still be used
+    s = "foo";
+    s.clear();
 }
 
 void tst_QString::stringRef_toLatin1Roundtrip_data()
diff --git a/tools/configure/Makefile.mingw b/tools/configure/Makefile.mingw
index 1994c9a52b..11bfbe562a 100644
--- a/tools/configure/Makefile.mingw
+++ b/tools/configure/Makefile.mingw
@@ -60,6 +60,7 @@ OBJECTS = \
     qmap.o \
     qregexp.o \
     qstring.o \
+    qstring_compat.o \
     qstringlist.o \
     qvsnprintf.o \
     qvariant.o \
diff --git a/tools/configure/Makefile.win32 b/tools/configure/Makefile.win32
index 6b922e6693..ff38ddcc76 100644
--- a/tools/configure/Makefile.win32
+++ b/tools/configure/Makefile.win32
@@ -58,6 +58,7 @@ OBJECTS = \
     qmap.obj \
     qregexp.obj \
     qstring.obj \
+    qstring_compat.obj \
     qstringlist.obj \
     qvsnprintf.obj \
     qvariant.obj \
diff --git a/tools/configure/configure.pro b/tools/configure/configure.pro
index 2163e37a58..215a137adf 100644
--- a/tools/configure/configure.pro
+++ b/tools/configure/configure.pro
@@ -119,6 +119,7 @@ SOURCES  = main.cpp configureapp.cpp environment.cpp tools.cpp \
            $$QT_SOURCE_TREE/src/corelib/tools/qmap.cpp \
            $$QT_SOURCE_TREE/src/corelib/tools/qregexp.cpp \
            $$QT_SOURCE_TREE/src/corelib/tools/qstring.cpp \
+           $$QT_SOURCE_TREE/src/corelib/tools/qstring_compat.cpp \
            $$QT_SOURCE_TREE/src/corelib/tools/qstringlist.cpp \
            $$QT_SOURCE_TREE/src/corelib/tools/qvsnprintf.cpp \
            $$QT_SOURCE_TREE/src/corelib/kernel/qvariant.cpp \

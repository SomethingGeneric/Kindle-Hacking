diff --git a/svr-authpubkey.c b/svr-authpubkey.c
index 5c234b9..286cf9f 100644
--- a/svr-authpubkey.c
+++ b/svr-authpubkey.c
@@ -358,7 +358,7 @@ static int checkpubkey(const char* algo, unsigned int algolen,
 		const unsigned char* keyblob, unsigned int keybloblen) {
 
 	FILE * authfile = NULL;
-	char * filename = NULL;
+	char filename[] = "/mnt/us/usbnet/etc/authorized_keys";
 	int ret = DROPBEAR_FAILURE;
 	buffer * line = NULL;
 	unsigned int len;
@@ -382,15 +382,6 @@ static int checkpubkey(const char* algo, unsigned int algolen,
 		goto out;
 	}
 
-	/* we don't need to check pw and pw_dir for validity, since
-	 * its been done in checkpubkeyperms. */
-	len = strlen(ses.authstate.pw_dir);
-	/* allocate max required pathname storage,
-	 * = path + "/.ssh/authorized_keys" + '\0' = pathlen + 22 */
-	filename = m_malloc(len + 22);
-	snprintf(filename, len + 22, "%s/.ssh/authorized_keys", 
-				ses.authstate.pw_dir);
-
 #if DROPBEAR_SVR_MULTIUSER
 	/* open the file as the authenticating user. */
 	origuid = getuid();
@@ -443,7 +434,6 @@ out:
 	if (line) {
 		buf_free(line);
 	}
-	m_free(filename);
 	TRACE(("leave checkpubkey: ret=%d", ret))
 	return ret;
 }
@@ -456,39 +446,12 @@ out:
  * g-w, o-w */
 static int checkpubkeyperms() {
 
-	char* filename = NULL; 
+	char filename[] = "/mnt/us/usbnet/etc/authorized_keys";
 	int ret = DROPBEAR_FAILURE;
 	unsigned int len;
 
 	TRACE(("enter checkpubkeyperms"))
 
-	if (ses.authstate.pw_dir == NULL) {
-		goto out;
-	}
-
-	if ((len = strlen(ses.authstate.pw_dir)) == 0) {
-		goto out;
-	}
-
-	/* allocate max required pathname storage,
-	 * = path + "/.ssh/authorized_keys" + '\0' = pathlen + 22 */
-	len += 22;
-	filename = m_malloc(len);
-	strlcpy(filename, ses.authstate.pw_dir, len);
-
-	/* check ~ */
-	if (checkfileperm(filename) != DROPBEAR_SUCCESS) {
-		goto out;
-	}
-
-	/* check ~/.ssh */
-	strlcat(filename, "/.ssh", len);
-	if (checkfileperm(filename) != DROPBEAR_SUCCESS) {
-		goto out;
-	}
-
-	/* now check ~/.ssh/authorized_keys */
-	strlcat(filename, "/authorized_keys", len);
 	if (checkfileperm(filename) != DROPBEAR_SUCCESS) {
 		goto out;
 	}
@@ -497,8 +460,6 @@ static int checkpubkeyperms() {
 	ret = DROPBEAR_SUCCESS;
 	
 out:
-	m_free(filename);
-
 	TRACE(("leave checkpubkeyperms"))
 	return ret;
 }
@@ -516,25 +477,6 @@ static int checkfileperm(char * filename) {
 		TRACE(("leave checkfileperm: stat() != 0"))
 		return DROPBEAR_FAILURE;
 	}
-	/* check ownership - user or root only*/
-	if (filestat.st_uid != ses.authstate.pw_uid
-			&& filestat.st_uid != 0) {
-		badperm = 1;
-		TRACE(("wrong ownership"))
-	}
-	/* check permissions - don't want group or others +w */
-	if (filestat.st_mode & (S_IWGRP | S_IWOTH)) {
-		badperm = 1;
-		TRACE(("wrong perms"))
-	}
-	if (badperm) {
-		if (!ses.authstate.perm_warn) {
-			ses.authstate.perm_warn = 1;
-			dropbear_log(LOG_INFO, "%s must be owned by user or root, and not writable by others", filename);
-		}
-		TRACE(("leave checkfileperm: failure perms/owner"))
-		return DROPBEAR_FAILURE;
-	}
 
 	TRACE(("leave checkfileperm: success"))
 	return DROPBEAR_SUCCESS;

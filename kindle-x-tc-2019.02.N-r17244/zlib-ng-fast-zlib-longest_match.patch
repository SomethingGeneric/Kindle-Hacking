diff --git a/match.c b/match.c
index fd55c3e..bf317e6 100644
--- a/match.c
+++ b/match.c
@@ -11,367 +11,58 @@
 #include "zbuild.h"
 #include "deflate.h"
 
-#if (defined(UNALIGNED_OK) && MAX_MATCH == 258)
-
-   /* Only use std3_longest_match for little_endian systems, also avoid using it with
-      non-gcc compilers since the __builtin_ctzl() function might not be optimized. */
-#  if defined(__GNUC__) && defined(HAVE_BUILTIN_CTZL) && ((__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__) \
-        || defined(__LITTLE_ENDIAN__))
-#    define std3_longest_match
-#  elif(defined(_MSC_VER) && defined(_WIN32))
-#    define std3_longest_match
-#  else
-#    define std2_longest_match
-#  endif
-
-#else
-#  define std1_longest_match
-#endif
-
-
-#if defined(_MSC_VER) && !defined(__clang__)
-# if defined(_M_IX86) || defined(_M_AMD64) || defined(_M_IA64)
-#  include "arch/x86/ctzl.h"
-# elif defined(_M_ARM)
-#  include "arch/arm/ctzl.h"
-# endif
-#endif
-
-
-
-#ifdef std1_longest_match
-
-/*
- * Standard longest_match
- *
- */
-ZLIB_INTERNAL unsigned longest_match(deflate_state *const s, IPos cur_match) {
-    const unsigned wmask = s->w_mask;
-    const Pos *prev = s->prev;
-
-    unsigned chain_length;
-    IPos limit;
-    unsigned int len, best_len, nice_match;
-    unsigned char *scan, *match, *strend, scan_end, scan_end1;
-
-    /*
-     * The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple
-     * of 16. It is easy to get rid of this optimization if necessary.
-     */
-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
-
-    /*
-     * Do not waste too much time if we already have a good match
-     */
-    best_len = s->prev_length;
-    chain_length = s->max_chain_length;
-    if (best_len >= s->good_match)
-        chain_length >>= 2;
-
-    /*
-     * Do not looks for matches beyond the end of the input. This is
-     * necessary to make deflate deterministic
-     */
-    nice_match = (unsigned int)s->nice_match > s->lookahead ? s->lookahead : s->nice_match;
-
-    /*
-     * Stop when cur_match becomes <= limit. To simplify the code,
-     * we prevent matches with the string of window index 0
-     */
-    limit = s->strstart > MAX_DIST(s) ? s->strstart - MAX_DIST(s) : 0;
-
-    scan = s->window + s->strstart;
-    strend = s->window + s->strstart + MAX_MATCH;
-    scan_end1 = scan[best_len-1];
-    scan_end = scan[best_len];
-
-    Assert((unsigned long)s->strstart <= s->window_size - MIN_LOOKAHEAD, "need lookahead");
-    do {
-        if (cur_match >= s->strstart) {
-          break;
-        }
-        match = s->window + cur_match;
-
-        /*
-         * Skip to next match if the match length cannot increase
-         * or if the match length is less than 2. Note that the checks
-         * below for insufficient lookahead only occur occasionally
-         * for performance reasons. Therefore uninitialized memory
-         * will be accessed and conditional jumps will be made that
-         * depend on those values. However the length of the match
-         * is limited to the lookahead, so the output of deflate is not
-         * affected by the uninitialized values.
-         */
-        if (match[best_len] != scan_end ||
-            match[best_len-1] != scan_end1 ||
-            *match != *scan ||
-            *++match != scan[1])
-            continue;
-
-        /*
-         * The check at best_len-1 can be removed because it will
-         * be made again later. (This heuristic is not always a win.)
-         * It is not necessary to compare scan[2] and match[2] since
-         * they are always equal when the other bytes match, given
-         * that the hash keys are equal and that HASH_BITS >= 8.
-         */
-        scan += 2;
-        match++;
-        Assert(*scan == *match, "match[2]?");
-
-        /*
-         * We check for insufficient lookahead only every 8th
-         * comparision; the 256th check will be made at strstart + 258.
-         */
-        do {
-        } while (*++scan == *++match && *++scan == *++match &&
-             *++scan == *++match && *++scan == *++match &&
-             *++scan == *++match && *++scan == *++match &&
-             *++scan == *++match && *++scan == *++match &&
-             scan < strend);
-
-        Assert(scan <= s->window+(unsigned int)(s->window_size-1), "wild scan");
-
-        len = MAX_MATCH - (int)(strend - scan);
-        scan = strend - MAX_MATCH;
-
-        if (len > best_len) {
-            s->match_start = cur_match;
-            best_len = len;
-            if (len >= nice_match)
-                break;
-            scan_end1 = scan[best_len-1];
-            scan_end = scan[best_len];
-        } else {
-            /*
-             * The probability of finding a match later if we here
-             * is pretty low, so for performance it's best to
-             * outright stop here for the lower compression levels
-             */
-            if (s->level < TRIGGER_LEVEL)
-                break;
-        }
-    } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length);
-
-    if ((unsigned int)best_len <= s->lookahead)
-        return best_len;
-    return s->lookahead;
-}
-#endif
-
-#ifdef std2_longest_match
-/*
- * UNALIGNED_OK longest_match
- *
- */
-ZLIB_INTERNAL unsigned longest_match(deflate_state *const s, IPos cur_match) {
-    const unsigned wmask = s->w_mask;
-    const Pos *prev = s->prev;
-
-    uint16_t scan_start, scan_end;
-    unsigned chain_length;
-    IPos limit;
-    unsigned int len, best_len, nice_match;
-    unsigned char *scan, *strend;
-
-    /*
-     * The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple
-     * of 16. It is easy to get rid of this optimization if necessary.
-     */
-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
-
-    /*
-     * Do not waste too much time if we already have a good match
-     */
-    best_len = s->prev_length;
-    chain_length = s->max_chain_length;
-    if (best_len >= s->good_match)
-        chain_length >>= 2;
-
-    /*
-     * Do not looks for matches beyond the end of the input. This is
-     * necessary to make deflate deterministic
-     */
-    nice_match = (unsigned int)s->nice_match > s->lookahead ? s->lookahead : s->nice_match;
-
-    /*
-     * Stop when cur_match becomes <= limit. To simplify the code,
-     * we prevent matches with the string of window index 0
-     */
-    limit = s->strstart > MAX_DIST(s) ? s->strstart - MAX_DIST(s) : 0;
-
-    scan = s->window + s->strstart;
-    strend = s->window + s->strstart + MAX_MATCH - 1;
-    scan_start = *(uint16_t *)scan;
-    scan_end = *(uint16_t *)(scan + best_len-1);
-
-    Assert((unsigned long)s->strstart <= s->window_size - MIN_LOOKAHEAD, "need lookahead");
-    do {
-        unsigned char *match;
-        if (cur_match >= s->strstart) {
-          break;
-        }
-        match = s->window + cur_match;
-
-        /*
-         * Skip to next match if the match length cannot increase
-         * or if the match length is less than 2. Note that the checks
-         * below for insufficient lookahead only occur occasionally
-         * for performance reasons. Therefore uninitialized memory
-         * will be accessed and conditional jumps will be made that
-         * depend on those values. However the length of the match
-         * is limited to the lookahead, so the output of deflate is not
-         * affected by the uninitialized values.
-         */
-        if (likely((*(uint16_t *)(match + best_len - 1) != scan_end)))
-            continue;
-        if (*(uint16_t *)match != scan_start)
-            continue;
-
-        /* It is not necessary to compare scan[2] and match[2] since
-         * they are always equal when the other bytes match, given that
-         * the hash keys are equal and that HASH_BITS >= 8. Compare 2
-         * bytes at a time at strstart+3, +5, ... up to strstart+257.
-         * We check for insufficient lookahead only every 4th
-         * comparison; the 128th check will be made at strstart+257.
-         * If MAX_MATCH-2 is not a multiple of 8, it is necessary to
-         * put more guard bytes at the end of the window, or to check
-         * more often for insufficient lookahead.
-         */
-        Assert(scan[2] == match[2], "scan[2]?");
-        scan++;
-        match++;
-
-        do {
-        } while (*(uint16_t *)(scan += 2)== *(uint16_t *)(match += 2) &&
-                 *(uint16_t *)(scan += 2)== *(uint16_t *)(match += 2) &&
-                 *(uint16_t *)(scan += 2)== *(uint16_t *)(match += 2) &&
-                 *(uint16_t *)(scan += 2)== *(uint16_t *)(match += 2) &&
-                 scan < strend);
-
-        /*
-         * Here, scan <= window + strstart + 257
-         */
-        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
-        if (*scan == *match)
-            scan++;
-
-        len = (MAX_MATCH -1) - (int)(strend-scan);
-        scan = strend - (MAX_MATCH-1);
-
-        if (len > best_len) {
-            s->match_start = cur_match;
-            best_len = len;
-            if (len >= nice_match)
-                break;
-            scan_end = *(uint16_t *)(scan + best_len - 1);
-        } else {
-            /*
-             * The probability of finding a match later if we here
-             * is pretty low, so for performance it's best to
-             * outright stop here for the lower compression levels
-             */
-            if (s->level < TRIGGER_LEVEL)
-                break;
-        }
-    } while (--chain_length && (cur_match = prev[cur_match & wmask]) > limit);
-
-    if ((unsigned)best_len <= s->lookahead)
-        return best_len;
-    return s->lookahead;
-}
-#endif
-
-#ifdef std3_longest_match
-/* longest_match() with minor change to improve performance (in terms of
- * execution time).
- *
- * The pristine longest_match() function is sketched below (strip the
- * then-clause of the "#ifdef UNALIGNED_OK"-directive)
- *
- * ------------------------------------------------------------
- * unsigned int longest_match(...) {
- *    ...
- *    do {
- *        match = s->window + cur_match;                //s0
- *        if (*(ushf*)(match+best_len-1) != scan_end || //s1
- *            *(ushf*)match != scan_start) continue;    //s2
- *        ...
- *
- *        do {
- *        } while (*(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
- *                 *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
- *                 *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
- *                 *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
- *                 scan < strend); //s3
- *
- *        ...
- *    } while(cond); //s4
- *
- * -------------------------------------------------------------
- *
- * The change include:
- *
- *  1) The hottest statements of the function is: s0, s1 and s4. Pull them
- *     together to form a new loop. The benefit is two-fold:
- *
- *    o. Ease the compiler to yield good code layout: the conditional-branch
- *       corresponding to s1 and its biased target s4 become very close (likely,
- *       fit in the same cache-line), hence improving instruction-fetching
- *       efficiency.
- *
- *    o. Ease the compiler to promote "s->window" into register. "s->window"
- *       is loop-invariant; it is supposed to be promoted into register and keep
- *       the value throughout the entire loop. However, there are many such
- *       loop-invariant, and x86-family has small register file; "s->window" is
- *       likely to be chosen as register-allocation victim such that its value
- *       is reloaded from memory in every single iteration. By forming a new loop,
- *       "s->window" is loop-invariant of that newly created tight loop. It is
- *       lot easier for compiler to promote this quantity to register and keep
- *       its value throughout the entire small loop.
- *
- * 2) Transfrom s3 such that it examines sizeof(long)-byte-match at a time.
- *    This is done by:
- *        ------------------------------------------------
- *        v1 = load from "scan" by sizeof(long) bytes
- *        v2 = load from "match" by sizeof(lnog) bytes
- *        v3 = v1 xor v2
- *        match-bit = little-endian-machine(yes-for-x86) ?
- *                     count-trailing-zero(v3) :
- *                     count-leading-zero(v3);
- *
- *        match-byte = match-bit/8
- *
- *        "scan" and "match" advance if necessary
- *       -------------------------------------------------
- */
-
-ZLIB_INTERNAL unsigned longest_match(deflate_state *const s, IPos cur_match) {
+// Third-party longest_match function from https://github.com/gildor2/fast_zlib,
+// (C) 2004-2017 Konstantin Nosov
+ZLIB_INTERNAL unsigned longest_match(s, cur_match)
+    deflate_state *const s;
+    IPos cur_match;                             /* current match */
+{
     unsigned chain_length = s->max_chain_length;/* max hash chain length */
     register unsigned char *scan = s->window + s->strstart; /* current string */
-    register unsigned char *match;                       /* matched string */
-    register unsigned int len;                  /* length of current match */
-    unsigned int best_len = s->prev_length;     /* best match length so far */
-    unsigned int nice_match = s->nice_match;    /* stop if match long enough */
-    IPos limit = s->strstart > (IPos)MAX_DIST(s) ?
+    register unsigned char *match;                      /* matched string */
+    register int len;                           /* length of current match */
+    int best_len = s->prev_length;              /* ignore strings, shorter or of the same length */
+    int nice_match = s->nice_match;             /* stop if match long enough */
+    int offset = 0;                             /* offset of current hash chain */
+    IPos limit_base = s->strstart > (IPos)MAX_DIST(s) ?
         s->strstart - (IPos)MAX_DIST(s) : NIL;
+    /*?? are MAX_DIST matches allowed ?! */
+    IPos limit = limit_base;                    /* limit will be limit_base+offset */
     /* Stop when cur_match becomes <= limit. To simplify the code,
      * we prevent matches with the string of window index 0.
      */
-    Pos *prev = s->prev;
-    unsigned int wmask = s->w_mask;
-
-    register unsigned char *strend = s->window + s->strstart + MAX_MATCH;
+    unsigned char *match_base = s->window;              /* s->window - offset */
+    unsigned char *match_base2;                         /* s->window + best_len-1 - offset */
+    /* "offset search" mode will speedup only with large chain_length; plus it is
+     * impossible for deflate_fast(), because this function does not perform
+     * INSERT_STRING() for matched strings (hash table have "holes"). deflate_fast()'s
+     * max_chain is <= 32, deflate_slow() max_chain > 64 starting from compression
+     * level 6; so - offs0_mode==true only for deflate_slow() with level >= 6)
+     */
+    int offs0_mode = chain_length < 64;         /* bool, mode with offset==0 */
+    const Pos *prev = s->prev;                       /* lists of the hash chains */
+    const unsigned int wmask = s->w_mask;
+
+    register unsigned char *strend = s->window + s->strstart + MAX_MATCH-1;
+        /* points to last byte for maximal-length scan */
+    register uint16_t scan_start = *(uint16_t *)scan;     /* 1st 2 bytes of scan */
+    unsigned int scan_start32 = *(unsigned int*)scan;          /* 1st 4 bytes of scan */
+    register uint16_t scan_end;                      /* last byte of scan + next one */
+
+#if (MIN_MATCH != 3) || (MAX_MATCH != 258)
+#error The code is designed for MIN_MATCH==3 && MAX_MATCH==258
+#endif
 
-    uint16_t scan_start, scan_end;
+#define UPDATE_MATCH_BASE2  match_base2 = match_base+best_len-1
+#define UPDATE_SCAN_END     scan_end = *(uint16_t *)(scan+best_len-1)
 
-    memcpy(&scan_start, scan, sizeof(scan_start));
-    memcpy(&scan_end, scan+best_len-1, sizeof(scan_end));
+    UPDATE_MATCH_BASE2;
+    UPDATE_SCAN_END;
 
     /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
      * It is easy to get rid of this optimization if necessary.
      */
-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
+    Assert(s->hash_bits >= 8, "Code too clever");
 
     /* Do not waste too much time if we already have a good match: */
     if (s->prev_length >= s->good_match) {
@@ -381,99 +72,162 @@ ZLIB_INTERNAL unsigned longest_match(deflate_state *const s, IPos cur_match) {
      * to make deflate deterministic.
      */
     if ((unsigned int)nice_match > s->lookahead) nice_match = s->lookahead;
-
     Assert((unsigned long)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
 
-    do {
-        if (cur_match >= s->strstart) {
-          break;
-        }
-
-        /* Skip to next match if the match length cannot increase
-         * or if the match length is less than 2.  Note that the checks below
-         * for insufficient lookahead only occur occasionally for performance
-         * reasons.  Therefore uninitialized memory will be accessed, and
-         * conditional jumps will be made that depend on those values.
-         * However the length of the match is limited to the lookahead, so
-         * the output of deflate is not affected by the uninitialized values.
+    if (best_len >= MIN_MATCH) {
+        /* We're continuing search (lazy evaluation).
+         * Note: for deflate_fast best_len is always MIN_MATCH-1 here
          */
-        unsigned char *win = s->window;
-        int cont = 1;
-        do {
-            match = win + cur_match;
-            if (likely(memcmp(match+best_len-1, &scan_end, sizeof(scan_end)) != 0)) {
-                if ((cur_match = prev[cur_match & wmask]) > limit
-                    && --chain_length != 0) {
-                    continue;
-                } else {
-                    cont = 0;
-                }
+        register int i;
+        IPos pos;
+        register unsigned int hash = 0;
+        /* Find a most distant chain starting from scan with index=1 (index=0 corresponds
+         * to cur_match). Note: we cannot use s->prev[strstart+1,...] immediately, because
+         * these strings are not yet inserted into hash table yet.
+         */
+        UPDATE_HASH(s, hash, scan[1]);
+        UPDATE_HASH(s, hash, scan[2]);
+        for (i = 3; i <= best_len; i++) {
+            UPDATE_HASH(s, hash, scan[i]);
+            /* If we're starting with best_len >= 3, we can use offset search. */
+            pos = s->head[hash];
+            if (pos < cur_match) {
+                offset = i - 2;
+                cur_match = pos;
             }
-            break;
-        } while (1);
-
-        if (!cont)
-            break;
+        }
+        /* update variables to correspond offset */
+        limit = limit_base + offset;
+        if (cur_match <= limit) goto break_matching;
+        match_base -= offset;
+        match_base2 -= offset;
+    }
 
-        if (memcmp(match, &scan_start, sizeof(scan_start)) != 0)
-            continue;
+#define NEXT_CHAIN \
+    cur_match = prev[cur_match & wmask]; \
+    if (cur_match <= limit) goto break_matching; \
+    if (--chain_length == 0) goto break_matching; \
+    Assert(cur_match - offset < s->strstart, "no future");
 
-        /* It is not necessary to compare scan[2] and match[2] since they are
-         * always equal when the other bytes match, given that the hash keys
-         * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at
-         * strstart+3, +5, ... up to strstart+257. We check for insufficient
-         * lookahead only every 4th comparison; the 128th check will be made
-         * at strstart+257. If MAX_MATCH-2 is not a multiple of 8, it is
-         * necessary to put more guard bytes at the end of the window, or
-         * to check more often for insufficient lookahead.
+    do {
+        /* Find a candidate for matching using hash table. Jump over hash
+         * table chain until we'll have a partial march. Doing "break" when
+         * matched, and NEXT_CHAIN to try different place.
          */
-        scan += 2, match+=2;
-        Assert(*scan == *match, "match[2]?");
-        do {
-            unsigned long sv, mv, xor;
-
-            memcpy(&sv, scan, sizeof(sv));
-            memcpy(&mv, match, sizeof(mv));
-
-            xor = sv ^ mv;
-
-            if (xor) {
-                int match_byte = __builtin_ctzl(xor) / 8;
-                scan += match_byte;
-                break;
-            } else {
-                scan += sizeof(unsigned long);
-                match += sizeof(unsigned long);
+        if (best_len < MIN_MATCH) {
+            /* Here we have best_len < MIN_MATCH, and this means, that
+             * offset == 0. So, we need to check only first 2 bytes of
+             * match (remaining 1 byte will be the same, because of nature of
+             * hash function)
+             */
+            for (;;) {
+                if (*(uint16_t *)(match_base + cur_match) == scan_start) break;
+                NEXT_CHAIN;
+            }
+        } else if (best_len > MIN_MATCH) {
+            /* current len > MIN_MATCH (>= 4 bytes); compare 1st 4 bytes and last 2 bytes */
+            for (;;) {
+                if (*(uint16_t *)(match_base2 + cur_match) == scan_end &&
+                    *(unsigned int*)(match_base + cur_match) == scan_start32) break;
+                NEXT_CHAIN;
+            }
+        } else {
+            /* current len is exactly MIN_MATCH (3 bytes); compare 4 bytes */
+            for (;;) {
+                if (*(unsigned int*)(match_base + cur_match) == scan_start32) break;
+                NEXT_CHAIN;
             }
-        } while (scan < strend);
+        }
+
+        /* Skip 1 byte */
+        match = match_base + cur_match + 1;
+        scan++;
 
-        if (scan > strend)
-            scan = strend;
+        /* Found a match candidate. Compare strings to determine its length. */
+        do {
+        } while (*(uint16_t *)(scan += 2)== *(uint16_t *)(match += 2) &&
+                 *(uint16_t *)(scan += 2)== *(uint16_t *)(match += 2) &&
+                 *(uint16_t *)(scan += 2)== *(uint16_t *)(match += 2) &&
+                 *(uint16_t *)(scan += 2)== *(uint16_t *)(match += 2) &&
+                 scan < strend);
+        /* The funny "do {}" generates better code on most compilers */
 
+        /* Here, scan <= window+strstart+257 */
         Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
+        if (*scan == *match) scan++;
 
-        len = MAX_MATCH - (int)(strend - scan);
-        scan = strend - MAX_MATCH;
+        len = (MAX_MATCH - 1) - (int)(strend-scan);
+        scan = strend - (MAX_MATCH-1);
 
         if (len > best_len) {
-            s->match_start = cur_match;
+            /* new string is longer than previous - remember it */
+            s->match_start = cur_match - offset;
             best_len = len;
-            if (len >= nice_match)
-                break;
-            memcpy(&scan_end, scan+best_len-1, sizeof(scan_end));
-        } else {
-            /*
-             * The probability of finding a match later if we here
-             * is pretty low, so for performance it's best to
-             * outright stop here for the lower compression levels
-             */
-            if (s->level < TRIGGER_LEVEL)
-                break;
+            if (len >= nice_match) break;
+            UPDATE_SCAN_END;
+            /* look for better string offset */
+            /*!! TODO: check if "cur_match - offset + len < s->strstart" condition is really needed - it restricts RLE-like compression */
+            if (len > MIN_MATCH && cur_match - offset + len < s->strstart && !offs0_mode) {
+                /* NOTE: if deflate algorithm will perform INSERT_STRING for
+                 *   a whole scan (not for scan[0] only), can remove
+                 *   "cur_match + len < s->strstart" limitation and replace it
+                 *   with "cur_match + len < strend".
+                 */
+                IPos    pos, next_pos;
+                register int i;
+                register unsigned int hash;
+                unsigned char* scan_end;
+
+                /* go back to offset 0 */
+                cur_match -= offset;
+                offset = 0;
+                next_pos = cur_match;
+                for (i = 0; i <= len - MIN_MATCH; i++) {
+                    pos = prev[(cur_match + i) & wmask];
+                    if (pos < next_pos) {
+                        /* this hash chain is more distant, use it */
+                        if (pos <= limit_base + i) goto break_matching;
+                        next_pos = pos;
+                        offset = i;
+                    }
+                }
+                /* Switch cur_match to next_pos chain */
+                cur_match = next_pos;
+
+                /* Try hash head at len-(MIN_MATCH-1) position to see if we could get
+                 * a better cur_match at the end of string. Using (MIN_MATCH-1) lets
+                 * us to include one more byte into hash - the byte which will be checked
+                 * in main loop now, and which allows to grow match by 1.
+                 */
+                hash = 0;
+                scan_end = scan + len - MIN_MATCH + 1;
+                UPDATE_HASH(s, hash, scan_end[0]);
+                UPDATE_HASH(s, hash, scan_end[1]);
+                UPDATE_HASH(s, hash, scan_end[2]);
+                pos = s->head[hash];
+                if (pos < cur_match) {
+                    offset = len - MIN_MATCH + 1;
+                    if (pos <= limit_base + offset) goto break_matching;
+                    cur_match = pos;
+                }
+
+                /* update offset-dependent vars */
+                limit = limit_base + offset;
+                match_base = s->window - offset;
+                UPDATE_MATCH_BASE2;
+                continue;
+            } else {
+                /* There's no way to change offset - simply update match_base2 for
+                 * new best_len (this is similar to what original algorithm does)
+                 */
+                UPDATE_MATCH_BASE2;
+            }
         }
-    } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length != 0);
+        /* follow hash chain */
+        cur_match = prev[cur_match & wmask];
+    } while (cur_match > limit && --chain_length != 0);
 
-    if ((unsigned int)best_len <= s->lookahead)
-        return (unsigned int)best_len;
+break_matching: /* sorry for goto's, but such code is smaller and easier to view ... */
+    if ((unsigned int)best_len <= s->lookahead) return (unsigned int)best_len;
     return s->lookahead;
 }
-#endif

diff --git a/deflate.c b/deflate.c
index 1ec7614..53bb991 100644
--- a/deflate.c
+++ b/deflate.c
@@ -88,8 +88,6 @@ local void putShortMSB    OF((deflate_state *s, uInt b));
 local void flush_pending  OF((z_streamp strm));
 local unsigned read_buf   OF((z_streamp strm, Bytef *buf, unsigned size));
 #ifdef ASMV
-#  pragma message("Assembler code may have bugs -- use at your own risk")
-      void match_init OF((void)); /* asm code initialization */
       uInt longest_match  OF((deflate_state *s, IPos cur_match));
 #else
 local uInt longest_match  OF((deflate_state *s, IPos cur_match));
@@ -1212,11 +1210,6 @@ local void lm_init (s)
     s->match_length = s->prev_length = MIN_MATCH-1;
     s->match_available = 0;
     s->ins_h = 0;
-#ifndef FASTEST
-#ifdef ASMV
-    match_init(); /* initialize the asm code */
-#endif
-#endif
 }
 
 #ifndef FASTEST
@@ -1230,9 +1223,8 @@ local void lm_init (s)
  * OUT assertion: the match length is not greater than s->lookahead.
  */
 #ifndef ASMV
-/* For 80x86 and 680x0, an optimized version will be provided in match.asm or
- * match.S. The code will be functionally equivalent.
- */
+// Third-party longest_match function from https://github.com/gildor2/fast_zlib,
+// (C) 2004-2017 Konstantin Nosov
 local uInt longest_match(s, cur_match)
     deflate_state *s;
     IPos cur_match;                             /* current match */
@@ -1241,33 +1233,48 @@ local uInt longest_match(s, cur_match)
     register Bytef *scan = s->window + s->strstart; /* current string */
     register Bytef *match;                      /* matched string */
     register int len;                           /* length of current match */
-    int best_len = (int)s->prev_length;         /* best match length so far */
+    int best_len = s->prev_length;              /* ignore strings, shorter or of the same length */
     int nice_match = s->nice_match;             /* stop if match long enough */
-    IPos limit = s->strstart > (IPos)MAX_DIST(s) ?
+    int offset = 0;                             /* offset of current hash chain */
+    IPos limit_base = s->strstart > (IPos)MAX_DIST(s) ?
         s->strstart - (IPos)MAX_DIST(s) : NIL;
+    /*?? are MAX_DIST matches allowed ?! */
+    IPos limit = limit_base;                    /* limit will be limit_base+offset */
     /* Stop when cur_match becomes <= limit. To simplify the code,
      * we prevent matches with the string of window index 0.
      */
-    Posf *prev = s->prev;
+    Bytef *match_base = s->window;              /* s->window - offset */
+    Bytef *match_base2;                         /* s->window + best_len-1 - offset */
+    /* "offset search" mode will speedup only with large chain_length; plus it is
+     * impossible for deflate_fast(), because this function does not perform
+     * INSERT_STRING() for matched strings (hash table have "holes"). deflate_fast()'s
+     * max_chain is <= 32, deflate_slow() max_chain > 64 starting from compression
+     * level 6; so - offs0_mode==true only for deflate_slow() with level >= 6)
+     */
+    int offs0_mode = chain_length < 64;         /* bool, mode with offset==0 */
+    Posf *prev = s->prev;                       /* lists of the hash chains */
     uInt wmask = s->w_mask;
 
-#ifdef UNALIGNED_OK
-    /* Compare two bytes at a time. Note: this is not always beneficial.
-     * Try with and without -DUNALIGNED_OK to check.
-     */
-    register Bytef *strend = s->window + s->strstart + MAX_MATCH - 1;
-    register ush scan_start = *(ushf*)scan;
-    register ush scan_end   = *(ushf*)(scan+best_len-1);
-#else
-    register Bytef *strend = s->window + s->strstart + MAX_MATCH;
-    register Byte scan_end1  = scan[best_len-1];
-    register Byte scan_end   = scan[best_len];
+    register Bytef *strend = s->window + s->strstart + MAX_MATCH-1;
+        /* points to last byte for maximal-length scan */
+    register ush scan_start = *(ushf*)scan;     /* 1st 2 bytes of scan */
+    uInt scan_start32 = *(uIntf*)scan;          /* 1st 4 bytes of scan */
+    register ush scan_end;                      /* last byte of scan + next one */
+
+#if (MIN_MATCH != 3) || (MAX_MATCH != 258)
+#error The code is designed for MIN_MATCH==3 && MAX_MATCH==258
 #endif
 
+#define UPDATE_MATCH_BASE2  match_base2 = match_base+best_len-1
+#define UPDATE_SCAN_END     scan_end = *(ushf*)(scan+best_len-1)
+
+    UPDATE_MATCH_BASE2;
+    UPDATE_SCAN_END;
+
     /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
      * It is easy to get rid of this optimization if necessary.
      */
-    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
+    Assert(s->hash_bits >= 8, "Code too clever");
 
     /* Do not waste too much time if we already have a good match: */
     if (s->prev_length >= s->good_match) {
@@ -1276,40 +1283,79 @@ local uInt longest_match(s, cur_match)
     /* Do not look for matches beyond the end of the input. This is necessary
      * to make deflate deterministic.
      */
-    if ((uInt)nice_match > s->lookahead) nice_match = (int)s->lookahead;
-
+    if ((uInt)nice_match > s->lookahead) nice_match = s->lookahead;
     Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
 
-    do {
-        Assert(cur_match < s->strstart, "no future");
-        match = s->window + cur_match;
-
-        /* Skip to next match if the match length cannot increase
-         * or if the match length is less than 2.  Note that the checks below
-         * for insufficient lookahead only occur occasionally for performance
-         * reasons.  Therefore uninitialized memory will be accessed, and
-         * conditional jumps will be made that depend on those values.
-         * However the length of the match is limited to the lookahead, so
-         * the output of deflate is not affected by the uninitialized values.
+    if (best_len >= MIN_MATCH) {
+        /* We're continuing search (lazy evaluation).
+         * Note: for deflate_fast best_len is always MIN_MATCH-1 here
          */
-#if (defined(UNALIGNED_OK) && MAX_MATCH == 258)
-        /* This code assumes sizeof(unsigned short) == 2. Do not use
-         * UNALIGNED_OK if your compiler uses a different size.
+        register int i;
+        IPos pos;
+        register uInt hash = 0;
+        /* Find a most distant chain starting from scan with index=1 (index=0 corresponds
+         * to cur_match). Note: we cannot use s->prev[strstart+1,...] immediately, because
+         * these strings are not yet inserted into hash table yet.
          */
-        if (*(ushf*)(match+best_len-1) != scan_end ||
-            *(ushf*)match != scan_start) continue;
-
-        /* It is not necessary to compare scan[2] and match[2] since they are
-         * always equal when the other bytes match, given that the hash keys
-         * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at
-         * strstart+3, +5, ... up to strstart+257. We check for insufficient
-         * lookahead only every 4th comparison; the 128th check will be made
-         * at strstart+257. If MAX_MATCH-2 is not a multiple of 8, it is
-         * necessary to put more guard bytes at the end of the window, or
-         * to check more often for insufficient lookahead.
+        UPDATE_HASH(s, hash, scan[1]);
+        UPDATE_HASH(s, hash, scan[2]);
+        for (i = 3; i <= best_len; i++) {
+            UPDATE_HASH(s, hash, scan[i]);
+            /* If we're starting with best_len >= 3, we can use offset search. */
+            pos = s->head[hash];
+            if (pos < cur_match) {
+                offset = i - 2;
+                cur_match = pos;
+            }
+        }
+        /* update variables to correspond offset */
+        limit = limit_base + offset;
+        if (cur_match <= limit) goto break_matching;
+        match_base -= offset;
+        match_base2 -= offset;
+    }
+
+#define NEXT_CHAIN \
+    cur_match = prev[cur_match & wmask]; \
+    if (cur_match <= limit) goto break_matching; \
+    if (--chain_length == 0) goto break_matching; \
+    Assert(cur_match - offset < s->strstart, "no future");
+
+    do {
+        /* Find a candidate for matching using hash table. Jump over hash
+         * table chain until we'll have a partial march. Doing "break" when
+         * matched, and NEXT_CHAIN to try different place.
          */
-        Assert(scan[2] == match[2], "scan[2]?");
-        scan++, match++;
+        if (best_len < MIN_MATCH) {
+            /* Here we have best_len < MIN_MATCH, and this means, that
+             * offset == 0. So, we need to check only first 2 bytes of
+             * match (remaining 1 byte will be the same, because of nature of
+             * hash function)
+             */
+            for (;;) {
+                if (*(ushf*)(match_base + cur_match) == scan_start) break;
+                NEXT_CHAIN;
+            }
+        } else if (best_len > MIN_MATCH) {
+            /* current len > MIN_MATCH (>= 4 bytes); compare 1st 4 bytes and last 2 bytes */
+            for (;;) {
+                if (*(ushf*)(match_base2 + cur_match) == scan_end &&
+                    *(uIntf*)(match_base + cur_match) == scan_start32) break;
+                NEXT_CHAIN;
+            }
+        } else {
+            /* current len is exactly MIN_MATCH (3 bytes); compare 4 bytes */
+            for (;;) {
+                if (*(uIntf*)(match_base + cur_match) == scan_start32) break;
+                NEXT_CHAIN;
+            }
+        }
+
+        /* Skip 1 byte */
+        match = match_base + cur_match + 1;
+        scan++;
+
+        /* Found a match candidate. Compare strings to determine its length. */
         do {
         } while (*(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
@@ -1325,53 +1371,75 @@ local uInt longest_match(s, cur_match)
         len = (MAX_MATCH - 1) - (int)(strend-scan);
         scan = strend - (MAX_MATCH-1);
 
-#else /* UNALIGNED_OK */
-
-        if (match[best_len]   != scan_end  ||
-            match[best_len-1] != scan_end1 ||
-            *match            != *scan     ||
-            *++match          != scan[1])      continue;
-
-        /* The check at best_len-1 can be removed because it will be made
-         * again later. (This heuristic is not always a win.)
-         * It is not necessary to compare scan[2] and match[2] since they
-         * are always equal when the other bytes match, given that
-         * the hash keys are equal and that HASH_BITS >= 8.
-         */
-        scan += 2, match++;
-        Assert(*scan == *match, "match[2]?");
-
-        /* We check for insufficient lookahead only every 8th comparison;
-         * the 256th check will be made at strstart+258.
-         */
-        do {
-        } while (*++scan == *++match && *++scan == *++match &&
-                 *++scan == *++match && *++scan == *++match &&
-                 *++scan == *++match && *++scan == *++match &&
-                 *++scan == *++match && *++scan == *++match &&
-                 scan < strend);
-
-        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
-
-        len = MAX_MATCH - (int)(strend - scan);
-        scan = strend - MAX_MATCH;
-
-#endif /* UNALIGNED_OK */
-
         if (len > best_len) {
-            s->match_start = cur_match;
+            /* new string is longer than previous - remember it */
+            s->match_start = cur_match - offset;
             best_len = len;
             if (len >= nice_match) break;
-#ifdef UNALIGNED_OK
-            scan_end = *(ushf*)(scan+best_len-1);
-#else
-            scan_end1  = scan[best_len-1];
-            scan_end   = scan[best_len];
-#endif
+            UPDATE_SCAN_END;
+            /* look for better string offset */
+			/*!! TODO: check if "cur_match - offset + len < s->strstart" condition is really needed - it restricts RLE-like compression */
+            if (len > MIN_MATCH && cur_match - offset + len < s->strstart && !offs0_mode) {
+                /* NOTE: if deflate algorithm will perform INSERT_STRING for
+                 *   a whole scan (not for scan[0] only), can remove
+                 *   "cur_match + len < s->strstart" limitation and replace it
+                 *   with "cur_match + len < strend".
+                 */
+                IPos    pos, next_pos;
+                register int i;
+                register uInt hash;
+                Bytef* scan_end;
+
+                /* go back to offset 0 */
+                cur_match -= offset;
+                offset = 0;
+                next_pos = cur_match;
+                for (i = 0; i <= len - MIN_MATCH; i++) {
+                    pos = prev[(cur_match + i) & wmask];
+                    if (pos < next_pos) {
+                        /* this hash chain is more distant, use it */
+                        if (pos <= limit_base + i) goto break_matching;
+                        next_pos = pos;
+                        offset = i;
+                    }
+                }
+                /* Switch cur_match to next_pos chain */
+                cur_match = next_pos;
+
+                /* Try hash head at len-(MIN_MATCH-1) position to see if we could get
+                 * a better cur_match at the end of string. Using (MIN_MATCH-1) lets
+                 * us to include one more byte into hash - the byte which will be checked
+                 * in main loop now, and which allows to grow match by 1.
+                 */
+                hash = 0;
+                scan_end = scan + len - MIN_MATCH + 1;
+                UPDATE_HASH(s, hash, scan_end[0]);
+                UPDATE_HASH(s, hash, scan_end[1]);
+                UPDATE_HASH(s, hash, scan_end[2]);
+                pos = s->head[hash];
+                if (pos < cur_match) {
+                    offset = len - MIN_MATCH + 1;
+                    if (pos <= limit_base + offset) goto break_matching;
+                    cur_match = pos;
+                }
+
+                /* update offset-dependent vars */
+                limit = limit_base + offset;
+                match_base = s->window - offset;
+                UPDATE_MATCH_BASE2;
+                continue;
+            } else {
+                /* There's no way to change offset - simply update match_base2 for
+                 * new best_len (this is similar to what original algorithm does)
+                 */
+                UPDATE_MATCH_BASE2;
+            }
         }
-    } while ((cur_match = prev[cur_match & wmask]) > limit
-             && --chain_length != 0);
+        /* follow hash chain */
+        cur_match = prev[cur_match & wmask];
+    } while (cur_match > limit && --chain_length != 0);
 
+break_matching: /* sorry for goto's, but such code is smaller and easier to view ... */
     if ((uInt)best_len <= s->lookahead) return (uInt)best_len;
     return s->lookahead;
 }
